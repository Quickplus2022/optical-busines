import streamlit as st

# Page configuration DEVE ser a primeira linha Streamlit
st.set_page_config(
    page_title="Plano de Neg√≥cios - √ìtica",
    page_icon="üëì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS para eliminar COMPLETAMENTE problemas de fonte it√°lica ileg√≠vel
st.markdown("""
<style>
/* FOR√áAR FONTE NORMAL EM TODO O SISTEMA - PRIORITY M√ÅXIMA */
*, *::before, *::after,
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
    font-style: normal !important;
    font-weight: normal !important;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
}

/* ELIMINAR IT√ÅLICO AGRESSIVAMENTE */
em, i, .italic, cite, dfn, var,
.stMarkdown em, .stMarkdown i,
.stAlert em, .stAlert i,
.stInfo em, .stInfo i,
.stSuccess em, .stSuccess i,
.stWarning em, .stWarning i,
.stError em, .stError i {
    font-style: normal !important;
    font-weight: normal !important;
    text-decoration: none !important;
}

/* CORRIGIR TODOS OS COMPONENTES STREAMLIT */
.stTextInput, .stTextInput *,
.stNumberInput, .stNumberInput *,
.stSelectbox, .stSelectbox *,
.stMultiSelect, .stMultiSelect *,
.stTextArea, .stTextArea *,
.stSlider, .stSlider *,
.stCheckbox, .stCheckbox *,
.stRadio, .stRadio *,
.stButton, .stButton *,
.stMetric, .stMetric *,
.stContainer, .stContainer *,
.stColumns, .stColumns *,
.stTabs, .stTabs *,
.stExpander, .stExpander *,
.stSidebar, .stSidebar * {
    font-style: normal !important;
    font-family: inherit !important;
}

/* CORRIGIR ESPECIFICAMENTE ELEMENTOS DE INPUT */
input, textarea, select, option,
.stTextInput > div > div > input,
.stNumberInput > div > div > input,
.stSelectbox > div > div > div,
.stMultiSelect > div > div > div,
.stTextArea > div > div > textarea {
    font-style: normal !important;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif !important;
    font-weight: 400 !important;
}

/* CORRIGIR LABELS E HELP TEXT */
label, .stLabel, 
.help, .stHelp,
.caption, .stCaption,
.description, .stDescription {
    font-style: normal !important;
    font-family: inherit !important;
}

/* CORRIGIR TOOLTIPS E BAL√ïES */
.stTooltip, .stTooltipContent,
.stBalloons, .stSnow,
.tooltip, [data-tooltip] {
    font-style: normal !important;
}

/* CORRIGIR N√öMEROS E VALORES MONET√ÅRIOS */
.currency, .number, .metric-value,
.stMetric .metric-value,
.stMetric .metric-delta {
    font-family: 'Consolas', 'Monaco', 'Courier New', monospace !important;
    font-style: normal !important;
    font-weight: 500 !important;
}

/* OVERRIDE GLOBAL DE EMERG√äNCIA */
[style*="font-style: italic"] {
    font-style: normal !important;
}

[style*="font-style:italic"] {
    font-style: normal !important;  
}

/* APLICAR A TODA √ÅRVORE DOM */
.main * {
    font-style: normal !important;
}

.stApp * {
    font-style: normal !important;
}

/* FOR√áA BRUTA FINAL */
body * {
    font-style: normal !important;
}
</style>
""", unsafe_allow_html=True)

import pandas as pd
import numpy as np
import json
import os
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt

# Import calculators
from tax_calculator import TaxCalculator
from labor_calculator import LaborCalculator
from dre_generator import DREGenerator
from pdf_generator import PDFGenerator
from product_cost_calculator import ProductCostCalculator
from construction_cost_calculator import ConstructionCostCalculator
from pricing_suggestions import LensPricingSuggestions
from investor_report_generator import InvestorReportGenerator
from multilingual_pdf_generator import MultilingualInvestorPDFGenerator
from structured_investor_report import StructuredInvestorReport
from unified_cost_analyzer import show_unified_cost_analyzer
from integrated_cost_analyzer_step10 import show_integrated_cost_analyzer_step10

# Import authentication system
from auth_system import require_authentication, init_auth_system

# Page configuration j√° foi definida no in√≠cio do arquivo

# Initialize session state for 12 steps
if 'step' not in st.session_state:
    st.session_state.step = 1

if 'business_data' not in st.session_state:
    st.session_state.business_data = {}

if 'uploaded_files' not in st.session_state:
    st.session_state.uploaded_files = {}

if 'show_lens_pricing' not in st.session_state:
    st.session_state.show_lens_pricing = False

if 'show_employee_manager' not in st.session_state:
    st.session_state.show_employee_manager = False

if 'show_investor_report' not in st.session_state:
    st.session_state.show_investor_report = False

# Utility functions
def format_currency(value):
    """Format currency with Brazilian format (R$ 30.000,00)"""
    if value == 0:
        return "R$ 0,00"
    return f"R$ {value:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def format_number(value):
    """Format number with Brazilian format (30.000)"""
    if value == 0:
        return "0"
    return f"{value:,.0f}".replace(",", ".")

def round_price_to_tens(price):
    """Round price to nearest 10 reais (no cents)"""
    return round(price / 10) * 10

def calcular_custo_captador_mensal():
    """Calcula o custo mensal do captador baseado nas configura√ß√µes da Gest√£o de Pessoas"""
    
    # Verificar se o sistema de capta√ß√£o est√° ativo
    usar_sistema_captacao = st.session_state.business_data.get('usar_sistema_captacao', False)
    if not usar_sistema_captacao:
        return 0.0
    
    # Obter proje√ß√µes de vendas das Proje√ß√µes Financeiras
    vendas_mes_1 = st.session_state.business_data.get('vendas_mes_1', 0)
    ticket_medio = st.session_state.business_data.get('ticket_medio', 500)
    oculos_meta = int(vendas_mes_1 / ticket_medio) if ticket_medio > 0 and vendas_mes_1 > 0 else 30
    
    # VERIFICAR GATILHO M√çNIMO (a partir de 5 vendas)
    meta_minima_captador = st.session_state.business_data.get('meta_minima_captador', 5)
    if oculos_meta < meta_minima_captador:
        # N√£o h√° pagamento se n√£o atingir o m√≠nimo
        st.session_state.business_data['custo_captador_mensal_calculado'] = 0.0
        st.session_state.business_data['memoria_calculo_captador'] = f"Meta {oculos_meta} √≥culos < gatilho m√≠nimo {meta_minima_captador} vendas = R$ 0,00"
        return 0.0
    
    # Obter configura√ß√µes de comiss√£o da Gest√£o de Pessoas
    comissao_avista = st.session_state.business_data.get('comissao_avista', 30.0)  # R$ 30 por venda √† vista
    comissao_parcelada = st.session_state.business_data.get('comissao_parcelada', 5.0)  # R$ 5 por venda parcelada
    
    # Distribui√ß√£o entre √† vista e parcelada (padr√£o 50% cada)
    percentual_avista = st.session_state.business_data.get('percentual_vendas_avista', 50)
    percentual_parcelada = 100 - percentual_avista
    
    # Calcular vendas por modalidade
    vendas_avista = int(oculos_meta * (percentual_avista / 100))
    vendas_parcelada = oculos_meta - vendas_avista
    
    # Calcular comiss√µes (SEMPRE valor fixo por venda conforme configura√ß√£o)
    total_comissao_avista = vendas_avista * comissao_avista
    total_comissao_parcelada = vendas_parcelada * comissao_parcelada
    
    # Total mensal
    custo_total_captador = total_comissao_avista + total_comissao_parcelada
    
    # MEM√ìRIA DE C√ÅLCULO COMPLETA
    memoria_calculo = f"""
    C√ÅLCULO CAPTADOR:
    ‚Ä¢ Meta de √≥culos: {oculos_meta} vendas/m√™s
    ‚Ä¢ Gatilho m√≠nimo: {meta_minima_captador} vendas ‚úì
    ‚Ä¢ Distribui√ß√£o: {percentual_avista}% √† vista, {percentual_parcelada}% parcelada
    
    VENDAS POR MODALIDADE:
    ‚Ä¢ √Ä vista: {vendas_avista} vendas √ó R$ {comissao_avista:.2f} = R$ {total_comissao_avista:.2f}
    ‚Ä¢ Parcelada: {vendas_parcelada} vendas √ó R$ {comissao_parcelada:.2f} = R$ {total_comissao_parcelada:.2f}
    
    TOTAL: R$ {custo_total_captador:.2f}/m√™s
    """
    
    # Salvar para refer√™ncia e auditoria
    st.session_state.business_data['custo_captador_mensal_calculado'] = custo_total_captador
    st.session_state.business_data['memoria_calculo_captador'] = memoria_calculo
    
    return custo_total_captador

def safe_multiselect_default(stored_values, available_options, fallback_default=None):
    """Ensure multiselect default values are valid options"""
    if not stored_values:
        return fallback_default or []
    
    # Filter stored values to only include valid options
    valid_values = [v for v in stored_values if v in available_options]
    return valid_values if valid_values else (fallback_default or [])

# Business plan management functions
def get_saved_plans():
    """Get list of saved business plans"""
    if not os.path.exists('saved_plans'):
        os.makedirs('saved_plans')
    
    plans = []
    for filename in os.listdir('saved_plans'):
        if filename.endswith('.json'):
            try:
                with open(f'saved_plans/{filename}', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    plans.append({
                        'filename': filename,
                        'name': data.get('plan_name', filename.replace('.json', '')),
                        'shop_name': data.get('business_data', {}).get('nome_otica', 'Sem nome'),
                        'created': data.get('created_at', 'Data desconhecida'),
                        'last_modified': data.get('last_modified', 'N√£o modificado')
                    })
            except:
                continue
    
    return sorted(plans, key=lambda x: x.get('last_modified', ''), reverse=True)

def save_business_plan(plan_name=None, force_new_version=False):
    """Save current business plan - replaces existing unless force_new_version=True"""
    if not os.path.exists('saved_plans'):
        os.makedirs('saved_plans')
    
    # Use shop name as plan name if not provided
    shop_name = st.session_state.business_data.get('nome_otica', '').strip()
    if not plan_name:
        plan_name = shop_name if shop_name else f"Plano_{datetime.now().strftime('%Y%m%d_%H%M')}"
    
    # Check if plan with same name exists
    base_filename = f"{plan_name}.json"
    filename = base_filename
    
    # Only create versioned name if force_new_version is True
    if force_new_version and os.path.exists(f'saved_plans/{base_filename}'):
        version = 2
        while os.path.exists(f'saved_plans/{plan_name}_Versao_{version}.json'):
            version += 1
        filename = f"{plan_name}_Versao_{version}.json"
    
    # Get existing creation date if file exists and we're updating
    created_at = datetime.now().isoformat()
    if os.path.exists(f'saved_plans/{filename}') and not force_new_version:
        try:
            with open(f'saved_plans/{filename}', 'r', encoding='utf-8') as f:
                existing_data = json.load(f)
                created_at = existing_data.get('created_at', created_at)
        except:
            pass  # Use new creation date if can't read existing
    
    # Prepare data to save
    save_data = {
        'plan_name': plan_name,
        'business_data': st.session_state.business_data,
        'uploaded_files': {},  # File content would be saved separately in production
        'current_step': st.session_state.step,
        'created_at': created_at,
        'last_modified': datetime.now().isoformat()
    }
    
    # Save to file
    filepath = f'saved_plans/{filename}'
    with open(filepath, 'w', encoding='utf-8') as f:
        json.dump(save_data, f, ensure_ascii=False, indent=2, default=str)
    
    return filename

def load_business_plan(file_path):
    """Load business plan from file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Load business data
        st.session_state.business_data = data.get('business_data', {})
        st.session_state.step = data.get('current_step', 1)
        
        # Restore uploaded files (simplified for this demo)
        st.session_state.uploaded_files = data.get('uploaded_files', {})
        
        return True
    except Exception as e:
        st.error(f"Erro ao carregar plano: {e}")
        return False

def delete_business_plan(file_path, plan_name):
    """Delete business plan file"""
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            return True
    except Exception as e:
        st.error(f"Erro ao excluir plano {plan_name}: {e}")
        return False

def create_new_plan():
    """Create new business plan (clear current data)"""
    # Clear all business data
    st.session_state.business_data = {}
    st.session_state.uploaded_files = {}
    st.session_state.step = 1
    
    # Clear drill-down selections
    keys_to_delete = []
    for key in list(st.session_state.keys()):
        if str(key).startswith(('show_', 'drill_')):
            keys_to_delete.append(key)
    for key in keys_to_delete:
        del st.session_state[key]
    
    # Clear legacy data file
    try:
        if os.path.exists('user_data.json'):
            os.remove('user_data.json')
    except:
        pass

def show_plan_manager():
    """Show business plan manager interface"""
    st.sidebar.subheader("üìã Projetos")
    
    col1, col2 = st.sidebar.columns(2)
    
    with col1:
        if st.button("üìÑ Novo", key="new_plan_btn", use_container_width=True):
            create_new_plan()
            st.sidebar.success("Novo plano criado!")
            st.rerun()
    
    with col2:
        if st.button("üíæ Salvar", key="save_plan_btn", use_container_width=True):
            filename = save_business_plan()
            st.sidebar.success(f"Salvo: {filename}")
            st.rerun()
    
    # Show saved plans
    saved_plans = get_saved_plans()
    
    if saved_plans:
        st.sidebar.markdown("**Planos Salvos:**")
        
        for plan in saved_plans[:5]:  # Show only last 5
            col1, col2 = st.sidebar.columns([3, 1])
            
            with col1:
                if st.button(f"üìÇ {plan['name']}", key=f"load_{plan['filename']}", use_container_width=True):
                    if load_business_plan(f"saved_plans/{plan['filename']}"):
                        st.sidebar.success(f"Carregado: {plan['name']}")
                        st.rerun()
            
            with col2:
                # Usar form para fazer o bot√£o HTML funcionar com Streamlit
                with st.form(key=f"delete_form_{plan['filename']}"):
                    st.markdown(f"""
                    <style>
                    div[data-testid="stForm"] {{
                        border: none !important;
                        padding: 0 !important;
                    }}
                    div[data-testid="stForm"] button[type="submit"] {{
                        background: linear-gradient(135deg, #ff4757 0%, #ff3742 50%, #e63946 100%) !important;
                        color: white !important;
                        border: 2px solid #ff6b7a !important;
                        border-radius: 15px !important;
                        font-size: 1.4rem !important;
                        font-weight: 700 !important;
                        padding: 0.8rem 1rem !important;
                        width: 100% !important;
                        min-height: 3rem !important;
                        box-shadow: 0 6px 20px rgba(255, 71, 87, 0.4), inset 0 2px 0 rgba(255, 255, 255, 0.3) !important;
                        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
                        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3) !important;
                        cursor: pointer !important;
                        outline: none !important;
                    }}
                    div[data-testid="stForm"] button[type="submit"]:hover {{
                        background: linear-gradient(135deg, #ff3742 0%, #e63946 50%, #c62d42 100%) !important;
                        transform: translateY(-3px) scale(1.05) !important;
                        box-shadow: 0 8px 25px rgba(255, 71, 87, 0.6), inset 0 2px 0 rgba(255, 255, 255, 0.4) !important;
                    }}
                    div[data-testid="stForm"] button[type="submit"]:active {{
                        transform: translateY(-1px) scale(0.98) !important;
                        box-shadow: 0 4px 15px rgba(255, 71, 87, 0.7), inset 0 3px 8px rgba(0, 0, 0, 0.3) !important;
                    }}
                    </style>
                    """, unsafe_allow_html=True)
                    
                    delete_clicked = st.form_submit_button("üóëÔ∏è", help=f"Excluir {plan['name']}")
                    
                if delete_clicked:
                    st.session_state.confirm_delete_plan = plan
                    st.rerun()

# Legacy data functions (for backward compatibility)
def load_user_data():
    """Load user data from JSON file (legacy support)"""
    try:
        if os.path.exists('user_data.json'):
            with open('user_data.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            # Only load if business_data is empty
            if not st.session_state.business_data:
                st.session_state.business_data = data.get('business_data', {})
                st.session_state.step = data.get('current_step', 1)
                st.session_state.uploaded_files = data.get('uploaded_files', {})
    except Exception as e:
        pass  # Silently fail for backward compatibility
    


def save_user_data():
    """Save user data to JSON file (legacy support + auto-save)"""
    if st.session_state.business_data:  # Only save if there's data
        try:
            # Garantir sincroniza√ß√£o do DP antes de salvar
            if hasattr(st.session_state, 'funcionarios') and st.session_state.funcionarios:
                st.session_state.business_data['funcionarios_dp'] = st.session_state.funcionarios
            
            data = {
                'business_data': st.session_state.business_data,
                'uploaded_files': st.session_state.uploaded_files,
                'current_step': st.session_state.step,
                'last_saved': datetime.now().isoformat()
            }
            
            # Auto-save to legacy file
            with open('user_data.json', 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2, default=str)
        except Exception as e:
            print(f"Auto-save failed: {e}")  # Debug for development

def auto_save_drill_down_selection(key, value):
    """Save drill-down selection immediately"""
    st.session_state.business_data[f"drill_{key}"] = value
    save_user_data()

def get_drill_down_selection(key, default=None):
    """Get saved drill-down selection"""
    return st.session_state.business_data.get(f"drill_{key}", default)

def main():
    # Sistema de autentica√ß√£o - Verificar login obrigat√≥rio
    auth = require_authentication()
    
    # CSS com paleta de cores personalizada
    st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    /* Paleta de cores */
    :root {
        --primary-gold: #d4af37;
        --secondary-gold: #b8860b;
        --warm-cream: #f0ede5;
        --soft-brown: #8b7355;
        --dark-brown: #5d4e37;
        --navy-blue: #2c3e50;
        --text-primary: #2c3e50;
        --text-secondary: #5d4e37;
        --background-primary: #f0ede5;
        --background-secondary: #e8e3db;
    }
    
    html, body, [class*="css"] {
        font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
    }
    
    .stApp {
        font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
        background: linear-gradient(135deg, var(--background-secondary) 0%, var(--background-primary) 100%) !important;
        color: var(--text-primary) !important;
    }
    
    /* T√≠tulos principais com cores da paleta */
    h1 {
        font-family: 'Inter', sans-serif !important;
        font-weight: 700 !important;
        color: var(--text-primary) !important;
        line-height: 1.2 !important;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1) !important;
    }
    
    h2, h3 {
        font-family: 'Inter', sans-serif !important;
        font-weight: 600 !important;
        color: var(--text-secondary) !important;
        line-height: 1.3 !important;
    }
    
    h4, h5, h6 {
        font-family: 'Inter', sans-serif !important;
        font-weight: 500 !important;
        color: var(--soft-brown) !important;
        line-height: 1.3 !important;
    }
    
    /* Textos principais com melhor contraste */
    .stMarkdown, .stText, p, span, div, li {
        font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
        line-height: 1.6 !important;
        font-weight: 400 !important;
        color: var(--text-primary) !important;
    }
    
    /* Sidebar escura e elegante */
    .css-1d391kg, [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #1a252f 0%, #2c3e50 100%) !important;
        font-family: 'Inter', sans-serif !important;
        backdrop-filter: blur(20px) !important;
        border-right: 1px solid rgba(212, 175, 55, 0.3) !important;
        box-shadow: 2px 0 20px rgba(0, 0, 0, 0.3) !important;
    }
    
    /* For√ßa sidebar em todas as varia√ß√µes de classe */
    .stSidebar, .stSidebar > div, section[data-testid="stSidebar"] {
        background: linear-gradient(180deg, #1a252f 0%, #2c3e50 100%) !important;
    }
    
    .css-1d391kg::before, [data-testid="stSidebar"]::before {
        content: '' !important;
        position: absolute !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        height: 2px !important;
        background: linear-gradient(90deg, var(--primary-gold), var(--secondary-gold), var(--primary-gold)) !important;
    }
    
    .css-1d391kg h1, .css-1d391kg h2, .css-1d391kg h3, 
    [data-testid="stSidebar"] h1, [data-testid="stSidebar"] h2, [data-testid="stSidebar"] h3 {
        color: var(--primary-gold) !important;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2) !important;
    }
    
    .css-1d391kg p, .css-1d391kg span, .css-1d391kg div, .css-1d391kg li,
    [data-testid="stSidebar"] p, [data-testid="stSidebar"] span, [data-testid="stSidebar"] div, [data-testid="stSidebar"] li {
        color: rgba(255, 255, 255, 0.95) !important;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1) !important;
    }
    
    /* Bot√µes da sidebar com efeito 3D premium */
    .stSidebar .stButton > button {
        background: linear-gradient(145deg, rgba(26, 37, 47, 0.8), rgba(15, 25, 35, 0.9)) !important;
        color: rgba(255, 255, 255, 0.85) !important;
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
        border-radius: 12px !important;
        font-weight: 500 !important;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) !important;
        backdrop-filter: blur(15px) !important;
        margin: 3px 0 !important;
        padding: 10px 18px !important;
        box-shadow: 
            0 4px 8px rgba(0, 0, 0, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.1),
            inset 0 -1px 0 rgba(0, 0, 0, 0.2) !important;
        position: relative !important;
    }
    
    .stSidebar .stButton > button:hover {
        background: linear-gradient(145deg, rgba(212, 175, 55, 0.2), rgba(184, 134, 11, 0.15)) !important;
        border-color: rgba(212, 175, 55, 0.4) !important;
        color: rgba(255, 255, 255, 0.95) !important;
        transform: translateY(-2px) translateX(3px) scale(1.02) !important;
        box-shadow: 
            0 8px 20px rgba(0, 0, 0, 0.4),
            0 2px 10px rgba(212, 175, 55, 0.2),
            inset 0 1px 0 rgba(255, 255, 255, 0.2),
            inset 0 -1px 0 rgba(0, 0, 0, 0.3) !important;
    }
    
    /* Bot√£o ativo na sidebar com efeito 3D dourado */
    .stSidebar .stButton > button[kind="primary"] {
        background: linear-gradient(145deg, var(--primary-gold), var(--secondary-gold)) !important;
        color: white !important;
        border: none !important;
        font-weight: 600 !important;
        transform: translateX(5px) !important;
        box-shadow: 
            0 6px 16px rgba(212, 175, 55, 0.5),
            0 2px 8px rgba(0, 0, 0, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.3),
            inset 0 -1px 0 rgba(184, 134, 11, 0.8) !important;
    }
    
    /* Bot√µes n√£o-selecionados com efeito 3D suave */
    .stSidebar .stButton > button:not([kind="primary"]):not(:hover) {
        background: linear-gradient(145deg, rgba(26, 37, 47, 0.7), rgba(15, 25, 35, 0.8)) !important;
        border-color: rgba(255, 255, 255, 0.08) !important;
        color: rgba(255, 255, 255, 0.75) !important;
        box-shadow: 
            0 2px 6px rgba(0, 0, 0, 0.25),
            inset 0 1px 0 rgba(255, 255, 255, 0.08),
            inset 0 -1px 0 rgba(0, 0, 0, 0.15) !important;
    }
    
    /* Melhorar contraste dos textos na sidebar */
    .stSidebar .stMarkdown h1, .stSidebar .stMarkdown h2, .stSidebar .stMarkdown h3 {
        color: var(--primary-gold) !important;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !important;
    }
    
    /* Texto da navega√ß√£o mais vis√≠vel */
    .stSidebar .stMarkdown p, .stSidebar .stText {
        color: rgba(255, 255, 255, 0.9) !important;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2) !important;
    }
    
    /* Bot√µes prim√°rios com efeito 3D premium */
    .stButton > button[kind="primary"] {
        background: linear-gradient(145deg, var(--primary-gold) 0%, var(--secondary-gold) 100%) !important;
        border: none !important;
        color: white !important;
        font-family: 'Inter', sans-serif !important;
        font-weight: 600 !important;
        border-radius: 12px !important;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) !important;
        padding: 0.6rem 1.5rem !important;
        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.4) !important;
        box-shadow: 
            0 6px 16px rgba(212, 175, 55, 0.4),
            0 2px 8px rgba(0, 0, 0, 0.25),
            inset 0 1px 0 rgba(255, 255, 255, 0.3),
            inset 0 -1px 0 rgba(184, 134, 11, 0.8) !important;
        position: relative !important;
    }
    
    .stButton > button[kind="primary"]:hover {
        background: linear-gradient(145deg, var(--secondary-gold) 0%, var(--primary-gold) 100%) !important;
        transform: translateY(-3px) scale(1.02) !important;
        box-shadow: 
            0 10px 25px rgba(212, 175, 55, 0.5),
            0 4px 15px rgba(0, 0, 0, 0.3),
            inset 0 1px 0 rgba(255, 255, 255, 0.4),
            inset 0 -1px 0 rgba(184, 134, 11, 0.9) !important;
    }
    
    /* Bot√µes secund√°rios com efeito 3D suave */
    .stButton > button[kind="secondary"] {
        background: linear-gradient(145deg, rgba(255, 255, 255, 0.95), rgba(245, 242, 235, 0.9)) !important;
        backdrop-filter: blur(15px) !important;
        border: 2px solid var(--soft-brown) !important;
        color: var(--text-secondary) !important;
        font-family: 'Inter', sans-serif !important;
        font-weight: 500 !important;
        border-radius: 12px !important;
        transition: all 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275) !important;
        padding: 0.6rem 1.5rem !important;
        box-shadow: 
            0 4px 12px rgba(139, 115, 85, 0.2),
            0 1px 4px rgba(0, 0, 0, 0.1),
            inset 0 1px 0 rgba(255, 255, 255, 0.8),
            inset 0 -1px 0 rgba(139, 115, 85, 0.2) !important;
        position: relative !important;
    }
    
    .stButton > button[kind="secondary"]:hover {
        background: linear-gradient(135deg, var(--olive-brown) 0%, var(--dark-brown) 100%) !important;
        color: white !important;
        box-shadow: 0 6px 20px rgba(133, 115, 75, 0.3) !important;
        transform: translateY(-2px) !important;
    }
    
    /* Bot√µes normais com design sofisticado */
    .stButton > button {
        font-family: 'Inter', sans-serif !important;
        font-weight: 500 !important;
        font-size: 14px !important;
        border-radius: 10px !important;
        border: 1px solid rgba(189, 154, 110, 0.3) !important;
        color: var(--dark-brown) !important;
        background: rgba(255, 255, 255, 0.8) !important;
        backdrop-filter: blur(5px) !important;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
        transition: all 0.3s ease !important;
        padding: 0.5rem 1.2rem !important;
    }
    
    .stButton > button:hover {
        background: linear-gradient(135deg, var(--primary-gold) 0%, var(--secondary-gold) 100%) !important;
        color: white !important;
        border-color: transparent !important;
        box-shadow: 0 4px 15px rgba(189, 154, 110, 0.3) !important;
        transform: translateY(-1px) !important;
    }
    
    /* Inputs suaves com fundo creme */
    .stTextInput > div > div > input,
    .stNumberInput > div > div > input,
    .stSelectbox > div > div > select,
    .stTextArea > div > div > textarea {
        font-family: 'Inter', sans-serif !important;
        font-size: 14px !important;
        line-height: 1.5 !important;
        border: 2px solid rgba(212, 175, 55, 0.2) !important;
        border-radius: 8px !important;
        background: var(--background-primary) !important;
        color: var(--text-primary) !important;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05) !important;
        transition: all 0.3s ease !important;
        padding: 0.75rem 1rem !important;
    }
    
    .stTextInput > div > div > input:focus,
    .stNumberInput > div > div > input:focus,
    .stSelectbox > div > div > select:focus,
    .stTextArea > div > div > textarea:focus {
        border-color: var(--primary-gold) !important;
        box-shadow: 0 0 0 3px rgba(212, 175, 55, 0.15), 0 4px 12px rgba(0, 0, 0, 0.1) !important;
        background: #ffffff !important;
        outline: none !important;
    }
    
    /* Labels dos inputs */
    .stTextInput > label,
    .stNumberInput > label,
    .stSelectbox > label,
    .stMultiSelect > label,
    .stTextArea > label {
        font-family: 'Inter', sans-serif !important;
        font-weight: 500 !important;
        font-size: 14px !important;
        color: var(--dark-brown) !important;
    }
    
    /* Abas suaves com design harmonioso */
    .stTabs [data-baseweb="tab-list"] {
        gap: 4px;
        background: var(--warm-cream) !important;
        border-radius: 12px !important;
        padding: 4px !important;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
        border: 1px solid rgba(212, 175, 55, 0.1) !important;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: transparent !important;
        color: var(--text-secondary) !important;
        border-radius: 8px !important;
        font-family: 'Inter', sans-serif !important;
        font-weight: 500 !important;
        padding: 0.75rem 1.5rem !important;
        margin: 0 !important;
        border: none !important;
        transition: all 0.3s ease !important;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, var(--primary-gold) 0%, var(--secondary-gold) 100%) !important;
        color: white !important;
        box-shadow: 0 2px 8px rgba(212, 175, 55, 0.3) !important;
    }
    
    .stTabs [data-baseweb="tab"]:hover:not([aria-selected="true"]) {
        background: rgba(212, 175, 55, 0.1) !important;
        color: var(--text-primary) !important;
    }
    
    /* Alertas com cores da paleta */
    .stAlert {
        border-radius: 8px !important;
        font-family: 'Inter', sans-serif !important;
    }
    
    .stSuccess {
        background-color: rgba(189, 154, 110, 0.1) !important;
        border: 1px solid var(--primary-gold) !important;
        color: var(--dark-brown) !important;
    }
    
    .stWarning {
        background-color: rgba(133, 115, 75, 0.1) !important;
        border: 1px solid var(--olive-brown) !important;
        color: var(--dark-brown) !important;
    }
    
    .stError {
        background-color: rgba(122, 64, 34, 0.1) !important;
        border: 1px solid var(--dark-brown) !important;
        color: var(--dark-brown) !important;
    }
    
    /* Remover todas as cores vermelhas/rosas do sistema */
    div[data-testid="stMarkdownContainer"] > div > p > strong {
        color: var(--dark-brown) !important;
    }
    
    /* Progress indicator da navega√ß√£o */
    .stProgress {
        background-color: var(--olive-brown) !important;
    }
    
    /* Remover cor vermelha de elementos espec√≠ficos */
    .css-1544g2n, .css-1d391kg .css-1544g2n {
        color: var(--primary-gold) !important;
    }
    
    /* Substituir qualquer vermelho por cores da paleta */
    [style*="color: red"], [style*="color: #ff"], [style*="color: rgb(255"] {
        color: var(--dark-brown) !important;
    }
    
    /* Seletores espec√≠ficos para remover vermelho */
    .stSelectbox > div > div > div {
        color: var(--dark-gray) !important;
    }
    
    /* Info boxes */
    .stInfo {
        background-color: rgba(171, 140, 110, 0.1) !important;
        border: 1px solid var(--secondary-gold) !important;
        color: var(--dark-brown) !important;
    }
    
    /* M√©tricas elegantes com glassmorphism */
    [data-testid="metric-container"] {
        font-family: 'Inter', sans-serif !important;
        background: linear-gradient(135deg, var(--primary-gold), var(--secondary-gold)) !important;
        color: white !important;
        padding: 1.5rem !important;
        border-radius: 16px !important;
        box-shadow: 0 8px 32px rgba(189, 154, 110, 0.3) !important;
        backdrop-filter: blur(10px) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
        position: relative !important;
        overflow: hidden !important;
    }
    
    [data-testid="metric-container"]:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 12px 40px rgba(189, 154, 110, 0.4) !important;
    }
    
    [data-testid="metric-container"]::before {
        content: '' !important;
        position: absolute !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        height: 1px !important;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent) !important;
    }
    
    /* Expander elegante com glassmorphism */
    .streamlit-expanderHeader {
        background: linear-gradient(135deg, var(--secondary-gold) 0%, var(--olive-brown) 100%) !important;
        color: white !important;
        font-family: 'Inter', sans-serif !important;
        font-weight: 500 !important;
        border-radius: 12px !important;
        box-shadow: 0 4px 15px rgba(171, 140, 110, 0.3) !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        backdrop-filter: blur(10px) !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
        padding: 1rem 1.5rem !important;
        margin-bottom: 0.5rem !important;
    }
    
    .streamlit-expanderHeader:hover {
        background: linear-gradient(135deg, var(--primary-gold) 0%, var(--secondary-gold) 100%) !important;
        box-shadow: 0 6px 20px rgba(189, 154, 110, 0.4) !important;
        transform: translateY(-1px) !important;
    }
    
    .streamlit-expanderContent {
        background: rgba(255, 255, 255, 0.05) !important;
        backdrop-filter: blur(10px) !important;
        border-radius: 0 0 12px 12px !important;
        border: 1px solid rgba(189, 154, 110, 0.1) !important;
        border-top: none !important;
        padding: 1.5rem !important;
        margin-top: -0.5rem !important;
    }
    
    /* Progress bar elegante */
    .stProgress > div > div > div {
        background: linear-gradient(90deg, var(--primary-gold), var(--secondary-gold)) !important;
        border-radius: 10px !important;
        box-shadow: 0 2px 8px rgba(189, 154, 110, 0.3) !important;
    }
    
    .stProgress > div > div {
        background-color: rgba(189, 154, 110, 0.1) !important;
        border-radius: 10px !important;
        backdrop-filter: blur(5px) !important;
    }
    
    /* Multiselect elegante */
    .stMultiSelect > div > div {
        border: 2px solid rgba(189, 154, 110, 0.3) !important;
        border-radius: 12px !important;
        background: rgba(255, 255, 255, 0.8) !important;
        backdrop-filter: blur(10px) !important;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05) !important;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    }
    
    .stMultiSelect > div > div:focus-within {
        border-color: var(--primary-gold) !important;
        box-shadow: 0 0 0 3px rgba(189, 154, 110, 0.2), 0 8px 25px rgba(0, 0, 0, 0.1) !important;
        background: rgba(255, 255, 255, 0.95) !important;
        transform: translateY(-1px) !important;
    }
    
    /* Bot√£o de lixeira elegante com gradiente vermelho e efeito 3D - m√∫ltiplos seletores */
    button[data-testid*="del_"],
    button[key*="del_"],
    .stButton > button:has-text("üóëÔ∏è"),
    .stButton > button[title*="Excluir"],
    .stButton button:contains("üóëÔ∏è") {
        background: linear-gradient(135deg, #ff4757 0%, #ff3838 50%, #c44569 100%) !important;
        color: white !important;
        border: 2px solid #ff6b7a !important;
        border-radius: 15px !important;
        font-size: 1.4rem !important;
        font-weight: 700 !important;
        padding: 0.8rem 1.2rem !important;
        box-shadow: 
            0 8px 25px rgba(255, 71, 87, 0.4),
            inset 0 2px 0 rgba(255, 255, 255, 0.3),
            0 0 0 0 rgba(255, 71, 87, 0) !important;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;
        position: relative !important;
        overflow: hidden !important;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3) !important;
        cursor: pointer !important;
    }
    
    button[data-testid*="del_"]:hover,
    button[key*="del_"]:hover,
    .stButton > button:has-text("üóëÔ∏è"):hover,
    .stButton > button[title*="Excluir"]:hover,
    .stButton button:contains("üóëÔ∏è"):hover {
        background: linear-gradient(135deg, #ff3838 0%, #ff2f2f 50%, #b73e56 100%) !important;
        border-color: #ff5757 !important;
        transform: translateY(-3px) scale(1.05) !important;
        box-shadow: 
            0 12px 35px rgba(255, 71, 87, 0.6),
            inset 0 2px 0 rgba(255, 255, 255, 0.4),
            0 0 0 3px rgba(255, 71, 87, 0.3) !important;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.4) !important;
    }
    
    button[data-testid*="del_"]:active,
    button[key*="del_"]:active,
    .stButton > button:has-text("üóëÔ∏è"):active,
    .stButton > button[title*="Excluir"]:active,
    .stButton button:contains("üóëÔ∏è"):active {
        transform: translateY(-1px) scale(0.98) !important;
        box-shadow: 
            0 6px 20px rgba(255, 71, 87, 0.7),
            inset 0 3px 8px rgba(0, 0, 0, 0.3) !important;
    }
    
    /* Fallback para todos os bot√µes na coluna da lixeira */
    .stColumns > div:last-child .stButton > button {
        background: linear-gradient(135deg, #ff4757 0%, #ff3838 50%, #c44569 100%) !important;
        color: white !important;
        border: 2px solid #ff6b7a !important;
        border-radius: 15px !important;
        font-size: 1.4rem !important;
        font-weight: 700 !important;
        padding: 0.8rem 1.2rem !important;
        box-shadow: 
            0 8px 25px rgba(255, 71, 87, 0.4),
            inset 0 2px 0 rgba(255, 255, 255, 0.3) !important;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3) !important;
    }
    
    .stColumns > div:last-child .stButton > button:hover {
        background: linear-gradient(135deg, #ff3838 0%, #ff2f2f 50%, #b73e56 100%) !important;
        transform: translateY(-3px) scale(1.05) !important;
        box-shadow: 
            0 12px 35px rgba(255, 71, 87, 0.6),
            inset 0 2px 0 rgba(255, 255, 255, 0.4),
            0 0 0 3px rgba(255, 71, 87, 0.3) !important;
    }
    
    /* Containers principais com fundo suave */
    .main > div {
        background: var(--background-primary) !important;
        border-radius: 12px !important;
        border: 1px solid rgba(212, 175, 55, 0.1) !important;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08) !important;
        margin: 1rem !important;
        padding: 2rem !important;
    }
    
    /* Cards com efeito de eleva√ß√£o */
    .element-container {
        transition: all 0.3s ease !important;
    }
    
    .element-container:hover {
        transform: translateY(-2px) !important;
    }
    
    /* Checkboxes e radio buttons */
    .stCheckbox > label, .stRadio > label {
        color: var(--dark-brown) !important;
        font-family: 'Inter', sans-serif !important;
        font-weight: 500 !important;
    }
    
    /* Eliminar completamente qualquer cor vermelha/rosa */
    * {
        color: inherit !important;
    }
    
    /* For√ßar cores da paleta em elementos problem√°ticos */
    .css-1629p8f, .css-1629p8f *, 
    .css-10trblm, .css-10trblm *,
    .css-1aumxhk, .css-1aumxhk * {
        color: var(--dark-brown) !important;
    }
    
    /* Navigation e progresso */
    .css-1vbkxwb, .css-1vbkxwb * {
        color: var(--primary-gold) !important;
    }
    
    /* Remover bordas vermelhas de qualquer elemento */
    * {
        border-color: inherit !important;
    }
    
    /* Sobrescrever qualquer cor de fundo vermelha */
    div[style*="background-color: red"], 
    div[style*="background-color: #ff"],
    div[style*="background: red"],
    div[style*="background: #ff"] {
        background-color: var(--secondary-gold) !important;
    }
    
    /* Tags espec√≠ficas que podem ter cor vermelha */
    .stTag, .css-16huue1, .css-1cpxqw2 {
        background-color: var(--olive-brown) !important;
        color: white !important;
        border: 1px solid var(--olive-brown) !important;
    }
    
    /* Seletores de cores do multiselect */
    .stMultiSelect span[data-baseweb="tag"] {
        background-color: var(--secondary-gold) !important;
        color: white !important;
    }
    
    /* Links */
    a, a:visited, a:hover, a:active {
        color: var(--primary-gold) !important;
    }
    
    /* Headers espec√≠ficos */
    .css-1avcm0n, .css-1avcm0n * {
        color: var(--dark-brown) !important;
    }
    
    /* Expanders */
    .streamlit-expanderHeader {
        font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
        font-weight: 500 !important;
        font-size: 14px !important;
    }
    
    /* Alertas e notifica√ß√µes */
    .stAlert {
        font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
        line-height: 1.5 !important;
    }
    
    /* Tabelas */
    .stDataFrame {
        font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif !important;
        font-size: 13px !important;
    }
    
    /* C√≥digo e texto monospace */
    code, pre {
        font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Roboto Mono', monospace !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    load_user_data()
    
    # Check for delete confirmation dialog (full screen overlay)
    if st.session_state.get('confirm_delete_plan'):
        plan = st.session_state.confirm_delete_plan
        
        # Create full-screen overlay with dark background
        st.markdown("""
        <style>
        .delete-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.8);
            z-index: 9999;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .delete-dialog {
            background: white;
            padding: 3rem;
            border-radius: 20px;
            text-align: center;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);
            border: 3px solid #dc3545;
        }
        .delete-icon {
            font-size: 4rem;
            color: #dc3545;
            margin-bottom: 1rem;
        }
        .delete-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #dc3545;
            margin-bottom: 1rem;
        }
        .delete-message {
            font-size: 1.1rem;
            color: #333;
            margin-bottom: 2rem;
            line-height: 1.5;
        }
        .plan-name {
            background: #f8f9fa;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            border-left: 4px solid #dc3545;
            margin: 1rem 0;
            font-weight: bold;
            color: #dc3545;
        }
        </style>
        """, unsafe_allow_html=True)
        
        # Large confirmation dialog
        st.markdown("### üóëÔ∏è CONFIRMA√á√ÉO DE EXCLUS√ÉO")
        st.error("‚ö†Ô∏è **ATEN√á√ÉO: Esta a√ß√£o n√£o pode ser desfeita!**")
        
        st.markdown(f"""
        <div style="
            background: linear-gradient(135deg, #fee2e2, #fecaca);
            padding: 2rem;
            border-radius: 15px;
            border: 2px solid #dc3545;
            text-align: center;
            margin: 2rem 0;
            box-shadow: 0 8px 25px rgba(220, 53, 69, 0.3);
        ">
            <div style="font-size: 4rem; margin-bottom: 1rem;">üóëÔ∏è</div>
            <div style="font-size: 1.3rem; font-weight: bold; color: #dc3545; margin-bottom: 1rem;">
                Voc√™ tem certeza que deseja excluir seu plano de neg√≥cio?
            </div>
            <div style="
                background: white;
                padding: 1rem;
                border-radius: 8px;
                border-left: 4px solid #dc3545;
                margin: 1rem 0;
                font-weight: bold;
                color: #dc3545;
                font-size: 1.1rem;
            ">
                üìÑ {plan['name']}
            </div>
            <div style="color: #666; font-size: 1rem; margin-top: 1rem;">
                Todo o trabalho que voc√™ fez ser√° perdido permanentemente.<br>
                N√£o ser√° poss√≠vel recuperar este plano depois de exclu√≠do.
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Action buttons
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            col_cancel, col_delete = st.columns(2)
            
            with col_cancel:
                if st.button("‚ùå Cancelar", key="cancel_delete", use_container_width=True, type="secondary"):
                    del st.session_state.confirm_delete_plan
                    st.rerun()
            
            with col_delete:
                if st.button("üóëÔ∏è SIM, EXCLUIR", key="confirm_delete", use_container_width=True, type="primary"):
                    if delete_business_plan(f"saved_plans/{plan['filename']}", plan['name']):
                        st.success(f"‚úÖ Plano '{plan['name']}' foi exclu√≠do com sucesso!")
                        del st.session_state.confirm_delete_plan
                        st.rerun()
                    else:
                        st.error("‚ùå Erro ao excluir o plano. Tente novamente.")
        
        st.stop()  # Don't show the rest of the interface
    
    # Sidebar with navigation and project management
    st.sidebar.title("üìä Plano de Neg√≥cios")
    
    # Project management section
    show_plan_manager()
    
    st.sidebar.markdown("---")
    
    # Navigation for exactly 12 steps
    st.sidebar.markdown("### üß≠ Navega√ß√£o")
    
    steps = {
        1: "1. Sum√°rio Executivo",
        2: "2. An√°lise de Mercado", 
        3: "3. P√∫blico-Alvo",
        4: "4. Concorr√™ncia",
        5: "5. Produtos e Servi√ßos",
        6: "6. Estrat√©gia de Marketing",
        7: "7. Plano Operacional",
        8: "8. Gest√£o de Pessoas",
        9: "9. Investimento Inicial",
        10: "10. Proje√ß√µes Financeiras",
        11: "11. An√°lise de Viabilidade",
        12: "12. Cen√°rios e Riscos"
    }
    
    # Current step indicator
    current_step = st.session_state.step
    st.sidebar.markdown(f"**üìç Etapa Atual:** {steps.get(current_step, 'N/A')}")
    
    # Progress bar
    progress = min(current_step / 12, 1.0)
    st.sidebar.progress(progress)
    st.sidebar.caption(f"Progresso: {progress*100:.0f}% conclu√≠do")
    
    # Navigation mode selector - Initialize to steps if not exists
    if 'current_view' not in st.session_state:
        st.session_state.current_view = 'steps'
    
    # Home button - always returns to main steps
    if st.sidebar.button("üè† In√≠cio (Etapas)", key="home_button", type="primary", use_container_width=True):
        # Clear all tool flags to return to main steps
        for key in ['show_premissas', 'show_integrated_cost_analyzer', 'show_unified_cost_analyzer', 'show_plan_validator', 'show_lens_pricing', 'show_employee_manager', 'show_simulation_simple', 'show_fluxo_vital', 'show_investor_report', 'show_entrepreneur_summary']:
            if key in st.session_state:
                del st.session_state[key]
        st.session_state.current_view = 'steps'
        st.rerun()
    
    st.sidebar.markdown("---")
    
    # Direct navigation to all steps
    st.sidebar.markdown("**Acesso Direto √†s Etapas:**")
    
    for step_num, step_name in steps.items():
        button_type = "primary" if (step_num == current_step and st.session_state.current_view == 'steps') else "secondary"
        if st.sidebar.button(step_name, key=f"nav_step_{step_num}", type=button_type, use_container_width=True):
            st.session_state.step = step_num
            st.session_state.current_view = 'steps'
            # Clear all tool flags
            for key in ['show_premissas', 'show_integrated_cost_analyzer', 'show_unified_cost_analyzer', 'show_plan_validator', 'show_lens_pricing', 'show_employee_manager', 'show_fluxo_vital', 'show_investor_report', 'show_entrepreneur_summary']:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
    
    st.sidebar.markdown("---")
    
    # Tools navigation with unified system
    tools = {
        'premissas': {'name': '‚öôÔ∏è Premissas', 'key': 'show_premissas'},
        'integrated_cost': {'name': 'üî¨ An√°lise Integrada de Custos', 'key': 'show_integrated_cost_analyzer'},
        'validator': {'name': 'üîç Validador do Plano', 'key': 'show_plan_validator'},
        'employee': {'name': 'üë• DP e Tributa√ß√£o', 'key': 'show_employee_manager'},
        'vital': {'name': 'üöÄ Fluxo Vital', 'key': 'show_fluxo_vital'},
        'investor': {'name': 'üìä Relat√≥rio Investidor', 'key': 'show_investor_report'},
        'entrepreneur': {'name': 'üí° Resumo Empreendedor', 'key': 'show_entrepreneur_summary'}
    }
    
    for tool_id, tool_info in tools.items():
        button_type = "primary" if st.session_state.current_view == tool_id else "secondary"
        if st.sidebar.button(tool_info['name'], key=f"nav_{tool_id}", type=button_type, use_container_width=True):
            # Clear all other tool flags
            for key in ['show_premissas', 'show_integrated_cost_analyzer', 'show_unified_cost_analyzer', 'show_plan_validator', 'show_lens_pricing', 'show_employee_manager', 'show_fluxo_vital', 'show_investor_report', 'show_entrepreneur_summary']:
                if key in st.session_state:
                    del st.session_state[key]
            # Set the selected tool
            st.session_state[tool_info['key']] = True
            st.session_state.current_view = tool_id
            st.rerun()
    
    # Show tools or main content - Only if explicitly requested
    if st.session_state.current_view == 'premissas' and st.session_state.get('show_premissas', False):
        show_premissas()
    elif st.session_state.current_view == 'integrated_cost' and st.session_state.get('show_integrated_cost_analyzer', False):
        show_integrated_cost_analyzer_step10()
    elif st.session_state.current_view == 'unified_cost' and st.session_state.get('show_unified_cost_analyzer', False):
        show_unified_cost_analyzer()
    elif st.session_state.current_view == 'validator' and st.session_state.get('show_plan_validator', False):
        show_plan_validator_tool()

    elif st.session_state.current_view == 'employee' and st.session_state.get('show_employee_manager', False):
        show_employee_manager()
    elif st.session_state.current_view == 'vital' and st.session_state.get('show_fluxo_vital', False):
        show_fluxo_vital_tool()
    elif st.session_state.current_view == 'investor' and st.session_state.get('show_investor_report', False):
        show_investor_report_tool()
    elif st.session_state.current_view == 'entrepreneur' and st.session_state.get('show_entrepreneur_summary', False):
        show_entrepreneur_summary_tool()
    else:
        # Main content based on step (exactly 12 steps)
        if st.session_state.step == 1:
            show_step_1()  # Sum√°rio Executivo
        elif st.session_state.step == 2:
            show_step_2()  # An√°lise de Mercado
        elif st.session_state.step == 3:
            show_step_3()  # P√∫blico-Alvo
        elif st.session_state.step == 4:
            show_step_4()  # Concorr√™ncia
        elif st.session_state.step == 5:
            show_step_5()  # Produtos e Servi√ßos (antigo 3.5)
        elif st.session_state.step == 6:
            show_step_6()  # Estrat√©gia de Marketing
        elif st.session_state.step == 7:
            show_step_7()  # Plano Operacional
        elif st.session_state.step == 8:
            show_step_8()  # Gest√£o de Pessoas
        elif st.session_state.step == 9:
            show_step_9()  # Investimento Inicial
        elif st.session_state.step == 10:
            show_step_10()  # Proje√ß√µes Financeiras
        elif st.session_state.step == 11:
            show_step_11()  # An√°lise de Viabilidade
        elif st.session_state.step == 12:
            show_step_12()  # Cen√°rios e Riscos

# Step functions (exactly 12 steps)
def show_step_1():
    """Etapa 1: Informa√ß√µes Iniciais"""
    st.header("1Ô∏è‚É£ Informa√ß√µes Iniciais")
    st.markdown("**FASE 1: CONCEITO** - Defina a identidade e vis√£o da sua √≥tica")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üè™ Informa√ß√µes B√°sicas")
        
        nome_otica = st.text_input(
            "Nome da √≥tica *",
            value=st.session_state.business_data.get('nome_otica', ''),
            placeholder="Ex: √ìtica Vista Clara"
        )
        # Auto-save nome_otica
        if nome_otica != st.session_state.business_data.get('nome_otica'):
            st.session_state.business_data['nome_otica'] = nome_otica
            save_user_data()
        
        cnpj = st.text_input(
            "CNPJ",
            value=st.session_state.business_data.get('cnpj', ''),
            placeholder="00.000.000/0001-00"
        )
        # Auto-save cnpj
        if cnpj != st.session_state.business_data.get('cnpj'):
            st.session_state.business_data['cnpj'] = cnpj
            save_user_data()
        
        tipos_empresa_list = ["MEI", "Microempresa", "Empresa de Pequeno Porte", "Ltda", "Outro"]
        current_tipo_empresa = st.session_state.business_data.get('tipo_empresa', 'MEI')
        current_tipo_empresa_index = tipos_empresa_list.index(current_tipo_empresa) if current_tipo_empresa in tipos_empresa_list else 0
        
        tipo_empresa = st.selectbox(
            "Tipo de empresa *",
            tipos_empresa_list,
            index=current_tipo_empresa_index
        )
        # Auto-save tipo_empresa com valida√ß√£o cr√≠tica
        if tipo_empresa != st.session_state.business_data.get('tipo_empresa'):
            # Valida√ß√£o cr√≠tica de mudan√ßa de regime
            old_regime = st.session_state.business_data.get('tipo_empresa', 'MEI')
            
            # Validar compatibilidade com receita
            objetivo_faturamento = st.session_state.business_data.get('objetivo_faturamento', 0)
            receita_anual = objetivo_faturamento * 12
            
            # Validar limites MEI
            if tipo_empresa == 'MEI':
                if receita_anual > 81000:
                    st.error(f"üö® **PROBLEMA**: Sua meta √© muito alta para MEI")
                    st.write(f"Voc√™ quer faturar R$ {receita_anual:,.0f} por ano, mas o MEI s√≥ permite at√© R$ 81.000")
                    st.warning("**Escolha uma das op√ß√µes:**")
                    st.write("‚Ä¢ üí° Diminuir sua meta para R$ 6.750 por m√™s (m√°ximo do MEI)")
                    st.write("‚Ä¢ üè¢ Mudar para 'Microempresa' (pode faturar mais, mas paga mais impostos)")
                    st.info("üí∞ **Dica**: MEI paga s√≥ R$ 76 por m√™s. Microempresa paga % sobre as vendas.")
                    st.stop()
                
                # Validar funcion√°rios
                funcionarios_count = len(st.session_state.business_data.get('funcionarios_planejados', []))
                if funcionarios_count > 1:
                    st.error(f"üö® **PROBLEMA**: Voc√™ tem muitos funcion√°rios para MEI")
                    st.write(f"Voc√™ planejou {funcionarios_count} funcion√°rios, mas o MEI s√≥ permite 1 pessoa trabalhando")
                    st.warning("**Escolha uma das op√ß√µes:**")
                    st.write("‚Ä¢ üë§ Trabalhar s√≥ voc√™ (sem funcion√°rios)")
                    st.write("‚Ä¢ üè¢ Mudar para 'Microempresa' (pode ter at√© 9 funcion√°rios)")
                    st.info("üí° **Explica√ß√£o**: MEI √© para neg√≥cios pequenos, s√≥ o dono trabalhando.")
                    st.stop()
            
            # Alertar sobre mudan√ßas importantes
            if old_regime != tipo_empresa:
                if old_regime == 'MEI' and tipo_empresa != 'MEI':
                    st.warning(f"üîÑ **MUDAN√áA DE REGIME**: {old_regime} ‚Üí {tipo_empresa}")
                    
                    # Calcular impacto tribut√°rio
                    if tipo_empresa == 'Microempresa':
                        custo_mei_mes = 76.60  # MEI 2024
                        custo_simples_estimado = receita_anual * 0.06 / 12  # ~6% Simples Nacional
                        diferenca_mensal = custo_simples_estimado - custo_mei_mes
                        
                        st.info(f"**Impacto Tribut√°rio Estimado:**")
                        st.write(f"‚Ä¢ MEI: R$ {custo_mei_mes:.2f}/m√™s")
                        st.write(f"‚Ä¢ Simples Nacional: R$ {custo_simples_estimado:.2f}/m√™s")
                        st.write(f"‚Ä¢ Diferen√ßa: +R$ {diferenca_mensal:.2f}/m√™s")
                        
                        if diferenca_mensal > 500:
                            st.warning("‚ö†Ô∏è Impacto tribut√°rio significativo! Revisar viabilidade.")
            
            st.session_state.business_data['tipo_empresa'] = tipo_empresa
            save_user_data()
        
        endereco = st.text_input(
            "Endere√ßo *",
            value=st.session_state.business_data.get('endereco', ''),
            placeholder="Rua, n√∫mero, bairro"
        )
        # Auto-save endereco
        if endereco != st.session_state.business_data.get('endereco'):
            st.session_state.business_data['endereco'] = endereco
            save_user_data()
        
        col3, col4 = st.columns(2)
        with col3:
            cidade = st.text_input(
                "Cidade *",
                value=st.session_state.business_data.get('cidade', ''),
                placeholder="Ex: S√£o Paulo"
            )
            # Auto-save cidade
            if cidade != st.session_state.business_data.get('cidade'):
                st.session_state.business_data['cidade'] = cidade
                save_user_data()
        
        with col4:
            # Get current state value
            estados_list = ["AC", "AL", "AP", "AM", "BA", "CE", "DF", "ES", "GO", "MA", "MT", "MS", "MG", "PA", "PB", "PR", "PE", "PI", "RJ", "RN", "RS", "RO", "RR", "SC", "SP", "SE", "TO"]
            current_estado = st.session_state.business_data.get('estado', 'SP')
            current_index = estados_list.index(current_estado) if current_estado in estados_list else 22
            
            estado = st.selectbox(
                "Estado",
                estados_list,
                index=current_index
            )
            
            # Auto-save immediately when changed
            if estado != st.session_state.business_data.get('estado'):
                st.session_state.business_data['estado'] = estado
                save_user_data()
    
    with col2:
        st.subheader("üìä Caracter√≠sticas")
        
        area_loja = st.number_input(
            "√Årea da loja (m¬≤) *",
            min_value=0.0,
            value=float(st.session_state.business_data.get('area_loja', 50)),
            step=5.0
        )
        # Auto-save area_loja
        if area_loja != st.session_state.business_data.get('area_loja'):
            st.session_state.business_data['area_loja'] = area_loja
            save_user_data()
        
        tipos_list = ["Loja de Rua", "Shopping Center", "Galeria", "Centro Comercial"]
        current_tipo = st.session_state.business_data.get('tipo_estabelecimento', 'Loja de Rua')
        current_tipo_index = tipos_list.index(current_tipo) if current_tipo in tipos_list else 0
        
        tipo_estabelecimento = st.selectbox(
            "Tipo de estabelecimento",
            tipos_list,
            index=current_tipo_index
        )
        
        # Auto-save immediately when changed
        if tipo_estabelecimento != st.session_state.business_data.get('tipo_estabelecimento'):
            st.session_state.business_data['tipo_estabelecimento'] = tipo_estabelecimento
            save_user_data()
        
        exp_list = ["Nenhuma", "1-2 anos", "3-5 anos", "5+ anos"]
        current_exp = st.session_state.business_data.get('experiencia', 'Nenhuma')
        current_exp_index = exp_list.index(current_exp) if current_exp in exp_list else 0
        
        experiencia = st.selectbox(
            "Experi√™ncia no setor",
            exp_list,
            index=current_exp_index
        )
        
        # Auto-save immediately when changed
        if experiencia != st.session_state.business_data.get('experiencia'):
            st.session_state.business_data['experiencia'] = experiencia
            save_user_data()
        
        objetivo_faturamento = st.number_input(
            "Objetivo de faturamento mensal",
            min_value=0.0,
            value=float(st.session_state.business_data.get('objetivo_faturamento', 30000)),
            step=1000.0,
            format="%.0f"
        )
        
        # Auto-save com valida√ß√£o tribut√°ria cr√≠tica
        if objetivo_faturamento != st.session_state.business_data.get('objetivo_faturamento'):
            # Valida√ß√£o cr√≠tica baseada no regime tribut√°rio
            tipo_empresa = st.session_state.business_data.get('tipo_empresa', 'MEI')
            receita_anual = objetivo_faturamento * 12
            
            if tipo_empresa == 'MEI' and receita_anual > 81000:
                st.error(f"‚ö†Ô∏è **LIMITE MEI EXCEDIDO**: Faturamento anual (R$ {receita_anual:,.0f}) > R$ 81.000")
                st.warning("**Corre√ß√µes necess√°rias:**")
                col_corr1, col_corr2 = st.columns(2)
                with col_corr1:
                    if st.button("üîß Ajustar para limite MEI", type="secondary"):
                        objetivo_faturamento = 6750  # R$ 81.000 / 12
                        st.session_state.business_data['objetivo_faturamento'] = objetivo_faturamento
                        save_user_data()
                        st.success("Meta ajustada para R$ 6.750/m√™s (limite MEI)")
                        st.rerun()
                with col_corr2:
                    if st.button("üìà Migrar para Microempresa", type="primary"):
                        st.session_state.business_data['tipo_empresa'] = 'Microempresa'
                        st.session_state.business_data['objetivo_faturamento'] = objetivo_faturamento
                        save_user_data()
                        st.success("Regime alterado para Microempresa!")
                        st.rerun()
                st.stop()
            
            st.session_state.business_data['objetivo_faturamento'] = objetivo_faturamento
            save_user_data()
        st.caption(f"üí∞ {format_currency(objetivo_faturamento)}")
    
    # Vis√£o do neg√≥cio
    st.markdown("---")
    st.subheader("üíº Vis√£o do Neg√≥cio")
    
    col5, col6 = st.columns(2)
    
    with col5:
        missao = st.text_area(
            "Miss√£o da empresa",
            value=st.session_state.business_data.get('missao', ''),
            height=80,
            placeholder="Qual √© o prop√≥sito da sua √≥tica? Como ela ajuda os clientes?"
        )
        
        visao = st.text_area(
            "Vis√£o de futuro",
            value=st.session_state.business_data.get('visao', ''),
            height=80,
            placeholder="Como voc√™ v√™ sua √≥tica no futuro? Onde quer chegar?"
        )
    
    with col6:
        principais_diferenciais = st.multiselect(
            "Principais diferenciais",
            [
                "Atendimento personalizado",
                "Pre√ßos competitivos", 
                "Localiza√ß√£o privilegiada",
                "Tecnologia avan√ßada",
                "Variedade de produtos",
                "Facilidade de pagamento",
                "P√≥s-venda diferenciado",
                "Especializa√ß√£o t√©cnica"
            ],
            default=safe_multiselect_default(
                st.session_state.business_data.get('principais_diferenciais', []),
                [
                    "Atendimento personalizado",
                    "Pre√ßos competitivos", 
                    "Localiza√ß√£o privilegiada",
                    "Tecnologia avan√ßada",
                    "Variedade de produtos",
                    "Facilidade de pagamento",
                    "P√≥s-venda diferenciado",
                    "Especializa√ß√£o t√©cnica"
                ],
                ["Atendimento personalizado"]
            )
        )
        
        valores = st.text_area(
            "Valores e princ√≠pios",
            value=st.session_state.business_data.get('valores', ''),
            height=80,
            placeholder="Quais valores guiam o trabalho da sua √≥tica?"
        )
    
    # Estimativa autom√°tica de custos de reforma
    if area_loja > 0 and cidade and estado:
        st.markdown("---")
        st.subheader("üèóÔ∏è Estimativa Autom√°tica de Custos de Reforma")
        
        try:
            calc = ConstructionCostCalculator()
            tipo_reforma_list = ["basica", "intermediaria", "completa"]
            current_tipo_reforma = st.session_state.business_data.get('tipo_reforma', 'basica')
            current_tipo_reforma_index = tipo_reforma_list.index(current_tipo_reforma) if current_tipo_reforma in tipo_reforma_list else 0
            
            tipo_reforma = st.selectbox(
                "Tipo de reforma/adequa√ß√£o",
                tipo_reforma_list,
                index=current_tipo_reforma_index,
                format_func=lambda x: {
                    "basica": "B√°sica - Pintura e pequenos ajustes",
                    "intermediaria": "Intermedi√°ria - Reforma moderada", 
                    "completa": "Completa - Reforma total"
                }[x]
            )
            # Auto-save tipo_reforma
            if tipo_reforma != st.session_state.business_data.get('tipo_reforma'):
                st.session_state.business_data['tipo_reforma'] = tipo_reforma
                save_user_data()
            
            custos_reforma = calc.calculate_reform_cost(estado, cidade, area_loja, tipo_reforma)
            
            if custos_reforma and custos_reforma.get('custo_total_com_adicional', 0) > 0:
                col7, col8 = st.columns([2, 1])
                
                with col7:
                    st.success(f"üí∞ **Custo estimado da reforma:** {format_currency(custos_reforma['custo_total_com_adicional'])}")
                    st.info(f"üìç **Baseado em:** {custos_reforma['regiao']} - {cidade}/{estado}")
                    
                    # Breakdown detalhado
                    if st.checkbox("Ver detalhamento dos custos"):
                        breakdown = calc.format_cost_breakdown(custos_reforma)
                        st.text(breakdown)
                
                with col8:
                    # Compara√ß√£o regional
                    if st.checkbox("Comparar com outras regi√µes"):
                        comparacao = calc.get_market_comparison(estado)
                        if comparacao:
                            df_comp = pd.DataFrame(comparacao).T
                            df_comp = df_comp.round(0)
                            
                            # Format as currency
                            for col in df_comp.columns:
                                df_comp[col] = df_comp[col].apply(lambda x: format_currency(x))
                            
                            st.dataframe(df_comp, use_container_width=True)
                
                # Store reform data for use in investment calculation
                st.session_state.business_data['custos_reforma'] = custos_reforma
                st.session_state.business_data['tipo_reforma_escolhida'] = tipo_reforma
        except Exception as e:
            st.warning("Sistema de reforma temporariamente indispon√≠vel")
    else:
        st.info("‚ÑπÔ∏è Complete √°rea da loja, cidade e estado para ver estimativa de reforma automaticamente")
    
    # Store all data
    st.session_state.business_data.update({
        'nome_otica': nome_otica,
        'cnpj': cnpj,
        'tipo_empresa': tipo_empresa,
        'endereco': endereco,
        'cidade': cidade,
        'estado': estado,
        'area_loja': area_loja,
        'tipo_estabelecimento': tipo_estabelecimento,
        'experiencia': experiencia,
        'objetivo_faturamento': objetivo_faturamento,
        'missao': missao,
        'visao': visao,
        'principais_diferenciais': principais_diferenciais,
        'valores': valores
    })
    
    # Auto-save
    save_user_data()
    
    st.markdown("---")
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step1"):
            st.session_state.step = 2
            st.rerun()

def show_step_2():
    """Etapa 2: An√°lise de Mercado"""
    st.header("2Ô∏è‚É£ An√°lise de Mercado")
    st.markdown("**FASE 2: MERCADO** - Entenda seu mercado e concorr√™ncia")
    
    # Tabs para organizar an√°lise de mercado
    tab1, tab2 = st.tabs(["üìä Panorama do Mercado", "üìà Oportunidades"])
    
    with tab1:
        st.subheader("üìä Mercado √ìptico Local")
        
        col1, col2 = st.columns(2)
        
        with col1:
            populacao_cidade = st.number_input(
                "Popula√ß√£o estimada da cidade",
                min_value=0,
                value=int(st.session_state.business_data.get('populacao_cidade', 100000)),
                step=5000
            )
            # Auto-save populacao_cidade
            if populacao_cidade != st.session_state.business_data.get('populacao_cidade'):
                st.session_state.business_data['populacao_cidade'] = populacao_cidade
                save_user_data()
            
            renda_list = ["Baixa (at√© R$ 2.000)", "M√©dia (R$ 2.000-5.000)", "Alta (R$ 5.000+)", "Mista"]
            current_renda = st.session_state.business_data.get('renda_media', 'M√©dia (R$ 2.000-5.000)')
            current_renda_index = renda_list.index(current_renda) if current_renda in renda_list else 1
            
            renda_media = st.selectbox(
                "Renda m√©dia da popula√ß√£o",
                renda_list,
                index=current_renda_index
            )
            # Auto-save renda_media
            if renda_media != st.session_state.business_data.get('renda_media'):
                st.session_state.business_data['renda_media'] = renda_media
                save_user_data()
            
            potencial_list = ["Baixo", "M√©dio", "Alto", "Muito Alto"]
            current_potencial = st.session_state.business_data.get('potencial_mercado', 'M√©dio')
            current_potencial_index = potencial_list.index(current_potencial) if current_potencial in potencial_list else 1
            
            potencial_mercado = st.selectbox(
                "Potencial do mercado local",
                potencial_list,
                index=current_potencial_index
            )
            # Auto-save potencial_mercado
            if potencial_mercado != st.session_state.business_data.get('potencial_mercado'):
                st.session_state.business_data['potencial_mercado'] = potencial_mercado
                save_user_data()
        
        with col2:
            concorrencia_local = st.number_input(
                "N√∫mero de √≥ticas concorrentes na regi√£o",
                min_value=0,
                value=int(st.session_state.business_data.get('concorrencia_local', 3)),
                step=1
            )
            # Auto-save concorrencia_local
            if concorrencia_local != st.session_state.business_data.get('concorrencia_local'):
                st.session_state.business_data['concorrencia_local'] = concorrencia_local
                save_user_data()
            
            sazonalidade = st.multiselect(
                "Per√≠odos de maior demanda",
                ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
                 "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro", "O ano todo"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('sazonalidade', []),
                    ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
                     "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro", "O ano todo"],
                    ["Janeiro"]
                )
            )
            # Auto-save sazonalidade
            if sazonalidade != st.session_state.business_data.get('sazonalidade'):
                st.session_state.business_data['sazonalidade'] = sazonalidade
                save_user_data()
            
            tendencias_mercado = st.text_area(
                "Tend√™ncias observadas no mercado",
                value=st.session_state.business_data.get('tendencias_mercado', ''),
                height=100,
                placeholder="Ex: Aumento da miopia, lentes multifocais, √≥culos de prote√ß√£o..."
            )
            # Auto-save tendencias_mercado
            if tendencias_mercado != st.session_state.business_data.get('tendencias_mercado'):
                st.session_state.business_data['tendencias_mercado'] = tendencias_mercado
                save_user_data()
    
    with tab2:
        st.subheader("üìà Oportunidades de Mercado")
        
        col3, col4 = st.columns(2)
        
        with col3:
            oportunidades = st.multiselect(
                "Oportunidades identificadas",
                ["Mercado n√£o saturado", "Poucos concorrentes", "Demanda crescente", "Localiza√ß√£o estrat√©gica", 
                 "Falta de especializa√ß√£o", "Pre√ßos elevados na regi√£o", "Atendimento deficiente dos concorrentes"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('oportunidades', []),
                    ["Mercado n√£o saturado", "Poucos concorrentes", "Demanda crescente", "Localiza√ß√£o estrat√©gica", 
                     "Falta de especializa√ß√£o", "Pre√ßos elevados na regi√£o", "Atendimento deficiente dos concorrentes"],
                    ["Demanda crescente"]
                )
            )
            # Auto-save oportunidades
            if oportunidades != st.session_state.business_data.get('oportunidades'):
                st.session_state.business_data['oportunidades'] = oportunidades
                save_user_data()
            
            publicos_nao_atendidos = st.text_area(
                "P√∫blicos n√£o bem atendidos",
                value=st.session_state.business_data.get('publicos_nao_atendidos', ''),
                height=100,
                placeholder="Idosos, crian√ßas, pessoas com necessidades especiais..."
            )
            # Auto-save publicos_nao_atendidos
            if publicos_nao_atendidos != st.session_state.business_data.get('publicos_nao_atendidos'):
                st.session_state.business_data['publicos_nao_atendidos'] = publicos_nao_atendidos
                save_user_data()
        
        with col4:
            barreiras_entrada = st.multiselect(
                "Principais barreiras de entrada",
                ["Alto investimento inicial", "Necessidade de especializa√ß√£o", "Concorr√™ncia estabelecida", 
                 "Regulamenta√ß√µes", "Fornecedores limitados", "Localiza√ß√£o escassa"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('barreiras_entrada', []),
                    ["Alto investimento inicial", "Necessidade de especializa√ß√£o", "Concorr√™ncia estabelecida", 
                     "Regulamenta√ß√µes", "Fornecedores limitados", "Localiza√ß√£o escassa"],
                    ["Alto investimento inicial"]
                )
            )
            # Auto-save barreiras_entrada
            if barreiras_entrada != st.session_state.business_data.get('barreiras_entrada'):
                st.session_state.business_data['barreiras_entrada'] = barreiras_entrada
                save_user_data()
            
            estrategia_entrada = st.text_area(
                "Estrat√©gia para superar barreiras",
                value=st.session_state.business_data.get('estrategia_entrada', ''),
                height=100,
                placeholder="Como voc√™ pretende entrar e se estabelecer no mercado?"
            )
            # Auto-save estrategia_entrada
            if estrategia_entrada != st.session_state.business_data.get('estrategia_entrada'):
                st.session_state.business_data['estrategia_entrada'] = estrategia_entrada
                save_user_data()
    
    # Store all data
    st.session_state.business_data.update({
        'populacao_cidade': populacao_cidade,
        'renda_media': renda_media,
        'potencial_mercado': potencial_mercado,
        'concorrencia_local': concorrencia_local,
        'sazonalidade': sazonalidade,
        'tendencias_mercado': tendencias_mercado,
        'oportunidades': oportunidades,
        'publicos_nao_atendidos': publicos_nao_atendidos,
        'barreiras_entrada': barreiras_entrada,
        'estrategia_entrada': estrategia_entrada
    })
    
    # Auto-save
    save_user_data()
    
    st.markdown("---")
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step2"):
            st.session_state.step = 1
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step2"):
            st.session_state.step = 3
            st.rerun()

def show_step_3():
    """Etapa 3: P√∫blico-Alvo"""
    st.header("3Ô∏è‚É£ P√∫blico-Alvo")
    st.markdown("**FASE 3: CLIENTES** - Defina e entenda seu p√∫blico-alvo")
    
    # Segmenta√ß√£o do p√∫blico
    st.subheader("üéØ Segmenta√ß√£o do P√∫blico-Alvo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üë• Demografia Principal**")
        
        faixa_etaria_principal = st.multiselect(
            "Faixa et√°ria principal",
            ["18-25 anos", "26-35 anos", "36-45 anos", "46-60 anos", "60+ anos"],
            default=safe_multiselect_default(
                st.session_state.business_data.get('faixa_etaria_principal', []),
                ["18-25 anos", "26-35 anos", "36-45 anos", "46-60 anos", "60+ anos"],
                ["36-45 anos"]
            )
        )
        # Auto-save faixa_etaria_principal
        if faixa_etaria_principal != st.session_state.business_data.get('faixa_etaria_principal'):
            st.session_state.business_data['faixa_etaria_principal'] = faixa_etaria_principal
            save_user_data()
        
        classe_social = st.multiselect(
            "Classe social",
            ["Classe A", "Classe B", "Classe C", "Classe D"],
            default=safe_multiselect_default(
                st.session_state.business_data.get('classe_social', []),
                ["Classe A", "Classe B", "Classe C", "Classe D"],
                ["Classe B", "Classe C"]
            )
        )
        # Auto-save classe_social
        if classe_social != st.session_state.business_data.get('classe_social'):
            st.session_state.business_data['classe_social'] = classe_social
            save_user_data()
        
        perfil_profissional = st.multiselect(
            "Perfil profissional",
            ["Estudantes", "Profissionais liberais", "Funcion√°rios CLT", "Aposentados", "Aut√¥nomos", "Empres√°rios"],
            default=safe_multiselect_default(
                st.session_state.business_data.get('perfil_profissional', []),
                ["Estudantes", "Profissionais liberais", "Funcion√°rios CLT", "Aposentados", "Aut√¥nomos", "Empres√°rios"],
                ["Funcion√°rios CLT"]
            )
        )
        # Auto-save perfil_profissional
        if perfil_profissional != st.session_state.business_data.get('perfil_profissional'):
            st.session_state.business_data['perfil_profissional'] = perfil_profissional
            save_user_data()
    
    with col2:
        st.markdown("**üõçÔ∏è Comportamento de Compra**")
        
        necessidades_principais = st.multiselect(
            "Necessidades principais",
            ["√ìculos de grau", "√ìculos de sol", "Lentes de contato", "Exames oftalmol√≥gicos", "√ìculos infantis", "√ìculos de prote√ß√£o"],
            default=safe_multiselect_default(
                st.session_state.business_data.get('necessidades_principais', []),
                ["√ìculos de grau", "√ìculos de sol", "Lentes de contato", "Exames oftalmol√≥gicos", "√ìculos infantis", "√ìculos de prote√ß√£o"],
                ["√ìculos de grau"]
            )
        )
        # Auto-save necessidades_principais
        if necessidades_principais != st.session_state.business_data.get('necessidades_principais'):
            st.session_state.business_data['necessidades_principais'] = necessidades_principais
            save_user_data()
        
        freq_list = ["Anual", "A cada 2 anos", "A cada 3-4 anos", "Espor√°dica"]
        current_freq = st.session_state.business_data.get('frequencia_compra', 'A cada 2 anos')
        current_freq_index = freq_list.index(current_freq) if current_freq in freq_list else 1
        
        frequencia_compra = st.selectbox(
            "Frequ√™ncia de compra",
            freq_list,
            index=current_freq_index
        )
        # Auto-save frequencia_compra
        if frequencia_compra != st.session_state.business_data.get('frequencia_compra'):
            st.session_state.business_data['frequencia_compra'] = frequencia_compra
            save_user_data()
        
        # Usar o mesmo ticket_medio da Etapa 10 para consist√™ncia
        ticket_medio_etapa10 = st.session_state.business_data.get('ticket_medio', 460)
        ticket_medio_esperado = st.number_input(
            "Ticket m√©dio esperado",
            min_value=0.0,
            value=float(ticket_medio_etapa10),
            step=50.0,
            format="%.0f",
            help=f"Valor sincronizado com Etapa 10: {format_currency(ticket_medio_etapa10)}"
        )
        # Sincronizar ambas as chaves para manter consist√™ncia
        if ticket_medio_esperado != st.session_state.business_data.get('ticket_medio'):
            st.session_state.business_data['ticket_medio'] = ticket_medio_esperado
            st.session_state.business_data['ticket_medio_esperado'] = ticket_medio_esperado
            save_user_data()
        st.caption(f"üí∞ {format_currency(ticket_medio_esperado)}")
        
        fatores_decisao = st.multiselect(
            "Fatores de decis√£o de compra",
            ["Pre√ßo", "Qualidade", "Atendimento", "Localiza√ß√£o", "Variedade", "Marca", "Facilidade de pagamento"],
            default=safe_multiselect_default(
                st.session_state.business_data.get('fatores_decisao', []),
                ["Pre√ßo", "Qualidade", "Atendimento", "Localiza√ß√£o", "Variedade", "Marca", "Facilidade de pagamento"],
                ["Pre√ßo", "Qualidade"]
            )
        )
        # Auto-save fatores_decisao
        if fatores_decisao != st.session_state.business_data.get('fatores_decisao'):
            st.session_state.business_data['fatores_decisao'] = fatores_decisao
            save_user_data()
    
    # Estrat√©gias de abordagem
    st.markdown("---")
    st.subheader("üì¢ Estrat√©gias de Abordagem do P√∫blico")
    
    col3, col4 = st.columns(2)
    
    with col3:
        canais_comunicacao = st.multiselect(
            "Canais de comunica√ß√£o preferidos",
            ["Instagram", "Facebook", "WhatsApp", "Google Ads", "Panfletos", "R√°dio local", "Indica√ß√µes"],
            default=safe_multiselect_default(
                st.session_state.business_data.get('canais_comunicacao', []),
                ["Instagram", "Facebook", "WhatsApp", "Google Ads", "Panfletos", "R√°dio local", "Indica√ß√µes"],
                ["Instagram", "Facebook"]
            )
        )
        
        horarios_preferidos = st.multiselect(
            "Hor√°rios de maior movimento",
            ["Manh√£ (8h-12h)", "Tarde (12h-18h)", "Noite (18h-22h)", "Finais de semana"],
            default=safe_multiselect_default(
                st.session_state.business_data.get('horarios_preferidos', []),
                ["Manh√£ (8h-12h)", "Tarde (12h-18h)", "Noite (18h-22h)", "Finais de semana"],
                ["Tarde (12h-18h)"]
            )
        )
    
    with col4:
        perfil_detalhado = st.text_area(
            "Perfil detalhado do cliente ideal",
            value=st.session_state.business_data.get('perfil_detalhado', ''),
            height=120,
            placeholder="Descreva seu cliente ideal: necessidades, comportamento, poder aquisitivo, motiva√ß√µes..."
        )
        
        estrategia_atracao = st.text_area(
            "Estrat√©gia para atrair este p√∫blico",
            value=st.session_state.business_data.get('estrategia_atracao', ''),
            height=120,
            placeholder="Como voc√™ pretende atrair e conquistar estes clientes?"
        )
    
    # Store all data
    st.session_state.business_data.update({
        'faixa_etaria_principal': faixa_etaria_principal,
        'classe_social': classe_social,
        'perfil_profissional': perfil_profissional,
        'necessidades_principais': necessidades_principais,
        'frequencia_compra': frequencia_compra,
        'ticket_medio_esperado': ticket_medio_esperado,
        'fatores_decisao': fatores_decisao,
        'canais_comunicacao': canais_comunicacao,
        'horarios_preferidos': horarios_preferidos,
        'perfil_detalhado': perfil_detalhado,
        'estrategia_atracao': estrategia_atracao
    })
    
    # Auto-save
    save_user_data()
    
    st.markdown("---")
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step3"):
            st.session_state.step = 2
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step3"):
            st.session_state.step = 4
            st.rerun()

def show_step_4():
    """Etapa 4: Concorr√™ncia"""
    st.header("4Ô∏è‚É£ An√°lise da Concorr√™ncia")
    st.markdown("**FASE 4: CONCORR√äNCIA** - Conhe√ßa seus concorrentes e defina vantagens")
    
    # Tabs para organizar an√°lise da concorr√™ncia
    tab1, tab2, tab3 = st.tabs(["üè™ Mapeamento de Concorrentes", "üìä An√°lise Comparativa", "üéØ Posicionamento"])
    
    with tab1:
        st.subheader("üè™ Identifica√ß√£o dos Concorrentes")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Concorrentes Diretos**")
            
            num_concorrentes = st.number_input(
                "Quantos concorrentes diretos identificou?",
                min_value=0,
                max_value=20,
                value=int(st.session_state.business_data.get('num_concorrentes', 3)),
                step=1
            )
            # Auto-save num_concorrentes
            if num_concorrentes != st.session_state.business_data.get('num_concorrentes'):
                st.session_state.business_data['num_concorrentes'] = num_concorrentes
                save_user_data()
            
            if num_concorrentes > 0:
                concorrentes_info = st.session_state.business_data.get('concorrentes_info', [])
                
                # Ensure we have enough entries
                while len(concorrentes_info) < num_concorrentes:
                    concorrentes_info.append({
                        'nome': '',
                        'localizacao': '',
                        'porte': 'Pequeno',
                        'tempo_mercado': 'Menos de 2 anos'
                    })
                
                # Remove excess entries
                concorrentes_info = concorrentes_info[:num_concorrentes]
                
                for i in range(num_concorrentes):
                    with st.expander(f"Concorrente {i+1}"):
                        concorrentes_info[i]['nome'] = st.text_input(
                            "Nome da √≥tica",
                            value=concorrentes_info[i].get('nome', ''),
                            key=f"conc_nome_{i}"
                        )
                        
                        concorrentes_info[i]['localizacao'] = st.text_input(
                            "Localiza√ß√£o",
                            value=concorrentes_info[i].get('localizacao', ''),
                            key=f"conc_loc_{i}",
                            placeholder="Rua/Bairro"
                        )
                        
                        porte_list = ["Pequeno", "M√©dio", "Grande", "Rede"]
                        current_porte = concorrentes_info[i].get('porte', 'Pequeno')
                        current_porte_index = porte_list.index(current_porte) if current_porte in porte_list else 0
                        
                        concorrentes_info[i]['porte'] = st.selectbox(
                            "Porte",
                            porte_list,
                            index=current_porte_index,
                            key=f"conc_porte_{i}"
                        )
                        
                        tempo_list = ["Menos de 2 anos", "2-5 anos", "5-10 anos", "Mais de 10 anos"]
                        current_tempo = concorrentes_info[i].get('tempo_mercado', 'Menos de 2 anos')
                        current_tempo_index = tempo_list.index(current_tempo) if current_tempo in tempo_list else 0
                        
                        concorrentes_info[i]['tempo_mercado'] = st.selectbox(
                            "Tempo no mercado",
                            tempo_list,
                            index=current_tempo_index,
                            key=f"conc_tempo_{i}"
                        )
                
                # Auto-save concorrentes_info
                if concorrentes_info != st.session_state.business_data.get('concorrentes_info'):
                    st.session_state.business_data['concorrentes_info'] = concorrentes_info
                    save_user_data()
        
        with col2:
            st.markdown("**An√°lise do Ambiente Competitivo**")
            
            nivel_list = ["Baixa", "Moderada", "Alta", "Muito Alta"]
            current_nivel = st.session_state.business_data.get('nivel_concorrencia', 'Moderada')
            current_nivel_index = nivel_list.index(current_nivel) if current_nivel in nivel_list else 1
            
            nivel_concorrencia = st.selectbox(
                "N√≠vel de concorr√™ncia na regi√£o",
                nivel_list,
                index=current_nivel_index
            )
            # Auto-save nivel_concorrencia
            if nivel_concorrencia != st.session_state.business_data.get('nivel_concorrencia'):
                st.session_state.business_data['nivel_concorrencia'] = nivel_concorrencia
                save_user_data()
            
            tipos_concorrentes = st.multiselect(
                "Tipos de concorrentes presentes",
                ["√ìticas independentes", "Redes nacionais", "√ìticas de farm√°cias", "√ìticas online", "Consult√≥rios oftalmol√≥gicos"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('tipos_concorrentes', []),
                    ["√ìticas independentes", "Redes nacionais", "√ìticas de farm√°cias", "√ìticas online", "Consult√≥rios oftalmol√≥gicos"],
                    ["√ìticas independentes"]
                )
            )
            # Auto-save tipos_concorrentes
            if tipos_concorrentes != st.session_state.business_data.get('tipos_concorrentes'):
                st.session_state.business_data['tipos_concorrentes'] = tipos_concorrentes
                save_user_data()
            
            barreiras_competitivas = st.multiselect(
                "Principais barreiras competitivas",
                ["Pre√ßos baixos", "Localiza√ß√£o privilegiada", "Marca consolidada", "Variedade de produtos", 
                 "Atendimento especializado", "Conv√™nios", "Facilidades de pagamento"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('barreiras_competitivas', []),
                    ["Pre√ßos baixos", "Localiza√ß√£o privilegiada", "Marca consolidada", "Variedade de produtos", 
                     "Atendimento especializado", "Conv√™nios", "Facilidades de pagamento"],
                    ["Pre√ßos baixos"]
                )
            )
            # Auto-save barreiras_competitivas
            if barreiras_competitivas != st.session_state.business_data.get('barreiras_competitivas'):
                st.session_state.business_data['barreiras_competitivas'] = barreiras_competitivas
                save_user_data()
    
    with tab2:
        st.subheader("üìä An√°lise Comparativa")
        
        if num_concorrentes > 0:
            st.markdown("**Compara√ß√£o por Crit√©rios**")
            
            # Create comparison matrix
            criterios = ["Pre√ßos", "Variedade", "Atendimento", "Localiza√ß√£o", "Marketing", "Tecnologia"]
            
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.markdown("**Crit√©rios de Avalia√ß√£o:**")
                for criterio in criterios:
                    st.markdown(f"‚Ä¢ {criterio}")
                
                st.markdown("**Escala:** 1-5 (1=Muito Fraco, 5=Excelente)")
            
            with col2:
                # Initialize comparison data
                comparacao_data = st.session_state.business_data.get('comparacao_concorrentes', {})
                
                for criterio in criterios:
                    if criterio not in comparacao_data:
                        comparacao_data[criterio] = {}
                    
                    st.markdown(f"**{criterio}**")
                    cols = st.columns(min(num_concorrentes + 1, 4))  # Limit columns to prevent layout issues
                    
                    # Your business column
                    with cols[0]:
                        st.markdown("*Sua √≥tica*")
                        comparacao_data[criterio]['sua_otica'] = st.slider(
                            "Sua nota",
                            1, 5, 
                            comparacao_data[criterio].get('sua_otica', 3),
                            key=f"sua_{criterio.lower()}"
                        )
                    
                    # Competitor columns
                    for i in range(min(num_concorrentes, 3)):  # Show max 3 competitors
                        if i + 1 < len(cols):
                            with cols[i + 1]:
                                conc_name = concorrentes_info[i].get('nome', f'Concorrente {i+1}')[:15]
                                st.markdown(f"*{conc_name}*")
                                comparacao_data[criterio][f'concorrente_{i}'] = st.slider(
                                    "Nota",
                                    1, 5,
                                    comparacao_data[criterio].get(f'concorrente_{i}', 3),
                                    key=f"conc_{i}_{criterio.lower()}"
                                )
                
                # Auto-save comparison data
                st.session_state.business_data['comparacao_concorrentes'] = comparacao_data
                save_user_data()
        
        else:
            st.info("Configure os concorrentes na primeira aba para fazer a an√°lise comparativa")
    
    with tab3:
        st.subheader("üéØ Seu Posicionamento Competitivo")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**An√°lise dos Pontos Fortes e Fracos**")
            
            forcas = st.text_area(
                "‚úÖ Pontos Fortes do seu neg√≥cio",
                value=st.session_state.business_data.get('forcas', ''),
                height=100,
                placeholder="Ex: Atendimento personalizado, localiza√ß√£o estrat√©gica, pre√ßos justos..."
            )
            # Auto-save forcas
            if forcas != st.session_state.business_data.get('forcas'):
                st.session_state.business_data['forcas'] = forcas
                save_user_data()
            
            fraquezas = st.text_area(
                "‚ö†Ô∏è Pontos que precisa melhorar",
                value=st.session_state.business_data.get('fraquezas', ''),
                height=100,
                placeholder="Ex: Marca nova no mercado, or√ßamento limitado, pouca experi√™ncia..."
            )
            # Auto-save fraquezas
            if fraquezas != st.session_state.business_data.get('fraquezas'):
                st.session_state.business_data['fraquezas'] = fraquezas
                save_user_data()
        
        with col2:
            oportunidades = st.text_area(
                "üéØ Oportunidades no mercado",
                value=st.session_state.business_data.get('oportunidades_swot', ''),
                height=100,
                placeholder="Ex: Mercado crescente, concorrentes com atendimento ruim, poucos especialistas..."
            )
            # Auto-save oportunidades_swot
            if oportunidades != st.session_state.business_data.get('oportunidades_swot'):
                st.session_state.business_data['oportunidades_swot'] = oportunidades
                save_user_data()
            
            ameacas = st.text_area(
                "üö® Riscos externos",
                value=st.session_state.business_data.get('ameacas', ''),
                height=100,
                placeholder="Ex: Entrada de grandes redes, crise econ√¥mica, mudan√ßas na legisla√ß√£o..."
            )
            # Auto-save ameacas
            if ameacas != st.session_state.business_data.get('ameacas'):
                st.session_state.business_data['ameacas'] = ameacas
                save_user_data()
        
        st.markdown("---")
        
        col3, col4 = st.columns(2)
        
        with col3:
            diferenciais_competitivos = st.multiselect(
                "Seus principais diferenciais competitivos",
                ["Pre√ßos competitivos", "Atendimento personalizado", "Tecnologia avan√ßada", 
                 "Variedade de produtos", "Rapidez na entrega", "Localiza√ß√£o privilegiada",
                 "Especializa√ß√£o t√©cnica", "Parcerias estrat√©gicas", "Hor√°rio diferenciado"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('diferenciais_competitivos', []),
                    ["Pre√ßos competitivos", "Atendimento personalizado", "Tecnologia avan√ßada", 
                     "Variedade de produtos", "Rapidez na entrega", "Localiza√ß√£o privilegiada",
                     "Especializa√ß√£o t√©cnica", "Parcerias estrat√©gicas", "Hor√°rio diferenciado"],
                    ["Atendimento personalizado"]
                )
            )
            # Auto-save diferenciais_competitivos
            if diferenciais_competitivos != st.session_state.business_data.get('diferenciais_competitivos'):
                st.session_state.business_data['diferenciais_competitivos'] = diferenciais_competitivos
                save_user_data()
        
        with col4:
            estrategia_posicionamento = st.text_area(
                "Estrat√©gia de posicionamento",
                value=st.session_state.business_data.get('estrategia_posicionamento', ''),
                height=120,
                placeholder="Como voc√™ pretende se posicionar no mercado em rela√ß√£o aos concorrentes?"
            )
            # Auto-save estrategia_posicionamento
            if estrategia_posicionamento != st.session_state.business_data.get('estrategia_posicionamento'):
                st.session_state.business_data['estrategia_posicionamento'] = estrategia_posicionamento
                save_user_data()
    
    # Store all data
    st.session_state.business_data.update({
        'num_concorrentes': num_concorrentes,
        'nivel_concorrencia': nivel_concorrencia,
        'tipos_concorrentes': tipos_concorrentes,
        'barreiras_competitivas': barreiras_competitivas,
        'forcas': forcas,
        'fraquezas': fraquezas,
        'oportunidades_swot': oportunidades,
        'ameacas': ameacas,
        'diferenciais_competitivos': diferenciais_competitivos,
        'estrategia_posicionamento': estrategia_posicionamento
    })
    
    # Auto-save
    save_user_data()
    
    st.markdown("---")
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step4"):
            st.session_state.step = 3
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step4"):
            st.session_state.step = 5
            st.rerun()

def show_step_5():
    """Etapa 5: Produtos e Servi√ßos"""
    st.header("5Ô∏è‚É£ Produtos e Servi√ßos")
    st.markdown("**FASE 5: PRODUTOS** - Configure produtos, fornecedores e margens")
    
    # Tabs para organizar produtos e servi√ßos
    tab1, tab2, tab3 = st.tabs(["üëì Produtos Principais", "üîß Servi√ßos", "üí∞ Estrat√©gia de Pre√ßos"])
    
    with tab1:
        st.subheader("üëì Cat√°logo de Produtos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Categorias de Produtos**")
            
            categorias_produtos = st.multiselect(
                "Produtos que pretende vender",
                ["√ìculos de grau", "√ìculos de sol", "Lentes de contato", "Arma√ß√µes", 
                 "Lentes oft√°lmicas", "√ìculos infantis", "√ìculos de prote√ß√£o", "Acess√≥rios"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('categorias_produtos', []),
                    ["√ìculos de grau", "√ìculos de sol", "Lentes de contato", "Arma√ß√µes", 
                     "Lentes oft√°lmicas", "√ìculos infantis", "√ìculos de prote√ß√£o", "Acess√≥rios"],
                    ["√ìculos de grau", "√ìculos de sol"]
                )
            )
            # Auto-save categorias_produtos
            if categorias_produtos != st.session_state.business_data.get('categorias_produtos'):
                st.session_state.business_data['categorias_produtos'] = categorias_produtos
                save_user_data()
            
            marcas_trabalhar = st.text_area(
                "Marcas que pretende trabalhar",
                value=st.session_state.business_data.get('marcas_trabalhar', ''),
                height=100,
                placeholder="Ex: Ray-Ban, Oakley, Chilli Beans, Atitude, Prada..."
            )
            # Auto-save marcas_trabalhar
            if marcas_trabalhar != st.session_state.business_data.get('marcas_trabalhar'):
                st.session_state.business_data['marcas_trabalhar'] = marcas_trabalhar
                save_user_data()
            
            faixa_preco_produtos = st.selectbox(
                "Faixa de pre√ßo principal dos produtos",
                ["Econ√¥mica (R$ 50-200)", "Intermedi√°ria (R$ 200-500)", "Premium (R$ 500-1000)", "Luxo (R$ 1000+)", "Mista"],
                index=["Econ√¥mica (R$ 50-200)", "Intermedi√°ria (R$ 200-500)", "Premium (R$ 500-1000)", "Luxo (R$ 1000+)", "Mista"].index(
                    st.session_state.business_data.get('faixa_preco_produtos', 'Intermedi√°ria (R$ 200-500)')
                )
            )
            # Auto-save faixa_preco_produtos
            if faixa_preco_produtos != st.session_state.business_data.get('faixa_preco_produtos'):
                st.session_state.business_data['faixa_preco_produtos'] = faixa_preco_produtos
                save_user_data()
        
        with col2:
            st.markdown("**Fornecedores e Parcerias**")
            
            tipos_fornecedores = st.multiselect(
                "Tipos de fornecedores",
                ["Distribuidores nacionais", "Importadores", "Fabricantes diretos", "Representantes regionais", 
                 "Marketplace B2B", "Cooperativas de compra"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('tipos_fornecedores', []),
                    ["Distribuidores nacionais", "Importadores", "Fabricantes diretos", "Representantes regionais", 
                     "Marketplace B2B", "Cooperativas de compra"],
                    ["Distribuidores nacionais"]
                )
            )
            # Auto-save tipos_fornecedores
            if tipos_fornecedores != st.session_state.business_data.get('tipos_fornecedores'):
                st.session_state.business_data['tipos_fornecedores'] = tipos_fornecedores
                save_user_data()
            
            criterios_fornecedores = st.multiselect(
                "Crit√©rios para escolha de fornecedores",
                ["Pre√ßo competitivo", "Qualidade dos produtos", "Prazo de entrega", "Condi√ß√µes de pagamento", 
                 "Suporte t√©cnico", "Variedade de produtos", "Exclusividade territorial"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('criterios_fornecedores', []),
                    ["Pre√ßo competitivo", "Qualidade dos produtos", "Prazo de entrega", "Condi√ß√µes de pagamento", 
                     "Suporte t√©cnico", "Variedade de produtos", "Exclusividade territorial"],
                    ["Pre√ßo competitivo", "Qualidade dos produtos"]
                )
            )
            # Auto-save criterios_fornecedores
            if criterios_fornecedores != st.session_state.business_data.get('criterios_fornecedores'):
                st.session_state.business_data['criterios_fornecedores'] = criterios_fornecedores
                save_user_data()
            
            estoque_inicial = st.number_input(
                "Investimento inicial em estoque (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('estoque_inicial', 15000)),
                step=1000.0,
                format="%.0f"
            )
            # Auto-save estoque_inicial
            if estoque_inicial != st.session_state.business_data.get('estoque_inicial'):
                st.session_state.business_data['estoque_inicial'] = estoque_inicial
                save_user_data()
            st.caption(f"üí∞ {format_currency(estoque_inicial)}")
    
    with tab2:
        st.subheader("üîß Servi√ßos Oferecidos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Servi√ßos Principais**")
            
            servicos_oferecidos = st.multiselect(
                "Servi√ßos que pretende oferecer",
                ["Exame de vista", "Montagem de √≥culos", "Ajustes e reparos", "Limpeza e manuten√ß√£o", 
                 "Consultoria em √≥culos", "Entrega domiciliar", "Garantia estendida", "Troca de lentes"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('servicos_oferecidos', []),
                    ["Exame de vista", "Montagem de √≥culos", "Ajustes e reparos", "Limpeza e manuten√ß√£o", 
                     "Consultoria em √≥culos", "Entrega domiciliar", "Garantia estendida", "Troca de lentes"],
                    ["Montagem de √≥culos", "Ajustes e reparos"]
                )
            )
            # Auto-save servicos_oferecidos
            if servicos_oferecidos != st.session_state.business_data.get('servicos_oferecidos'):
                st.session_state.business_data['servicos_oferecidos'] = servicos_oferecidos
                save_user_data()
            
            if "Exame de vista" in servicos_oferecidos:
                parcerias_medicas = st.text_area(
                    "Parcerias com oftalmologistas",
                    value=st.session_state.business_data.get('parcerias_medicas', ''),
                    height=80,
                    placeholder="Descreva como pretende oferecer exames de vista..."
                )
                # Auto-save parcerias_medicas
                if parcerias_medicas != st.session_state.business_data.get('parcerias_medicas'):
                    st.session_state.business_data['parcerias_medicas'] = parcerias_medicas
                    save_user_data()
        
        with col2:
            st.markdown("**Diferenciais nos Servi√ßos**")
            
            diferenciais_servicos = st.multiselect(
                "Diferenciais que oferecer√°",
                ["Atendimento personalizado", "Servi√ßo 24h/emerg√™ncia", "Garantia vital√≠cia de ajustes", 
                 "Programa de fidelidade", "Parcelamento facilitado", "Troca sem custos", "Consultoria especializada"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('diferenciais_servicos', []),
                    ["Atendimento personalizado", "Servi√ßo 24h/emerg√™ncia", "Garantia vital√≠cia de ajustes", 
                     "Programa de fidelidade", "Parcelamento facilitado", "Troca sem custos", "Consultoria especializada"],
                    ["Atendimento personalizado"]
                )
            )
            # Auto-save diferenciais_servicos
            if diferenciais_servicos != st.session_state.business_data.get('diferenciais_servicos'):
                st.session_state.business_data['diferenciais_servicos'] = diferenciais_servicos
                save_user_data()
            
            tempo_entrega = st.selectbox(
                "Tempo de entrega prometido",
                ["Mesmo dia", "24 horas", "2-3 dias", "1 semana", "Conforme complexidade"],
                index=["Mesmo dia", "24 horas", "2-3 dias", "1 semana", "Conforme complexidade"].index(
                    st.session_state.business_data.get('tempo_entrega', '2-3 dias')
                )
            )
            # Auto-save tempo_entrega
            if tempo_entrega != st.session_state.business_data.get('tempo_entrega'):
                st.session_state.business_data['tempo_entrega'] = tempo_entrega
                save_user_data()
    
    with tab3:
        st.subheader("üí∞ Estrat√©gia de Pre√ßos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Pol√≠tica de Pre√ßos**")
            
            estrategia_precificacao = st.selectbox(
                "Estrat√©gia de precifica√ß√£o",
                ["Pre√ßos competitivos", "Premium/diferencia√ß√£o", "Penetra√ß√£o (pre√ßos baixos)", "Pre√ßos psicol√≥gicos", "Valor percebido"],
                index=["Pre√ßos competitivos", "Premium/diferencia√ß√£o", "Penetra√ß√£o (pre√ßos baixos)", "Pre√ßos psicol√≥gicos", "Valor percebido"].index(
                    st.session_state.business_data.get('estrategia_precificacao', 'Pre√ßos competitivos')
                )
            )
            # Auto-save estrategia_precificacao
            if estrategia_precificacao != st.session_state.business_data.get('estrategia_precificacao'):
                st.session_state.business_data['estrategia_precificacao'] = estrategia_precificacao
                save_user_data()
            
            margem_produtos = st.slider(
                "Margem de lucro m√©dia nos produtos (%)",
                min_value=10,
                max_value=900,
                value=int(st.session_state.business_data.get('margem_produtos', 100)),
                step=10
            )
            # Auto-save margem_produtos
            if margem_produtos != st.session_state.business_data.get('margem_produtos'):
                st.session_state.business_data['margem_produtos'] = margem_produtos
                save_user_data()
            st.caption(f"Margem: {margem_produtos}%")
            
            formas_pagamento = st.multiselect(
                "Formas de pagamento aceitas",
                ["Dinheiro", "PIX", "Cart√£o d√©bito", "Cart√£o cr√©dito", "Cart√£o credi√°rio", "Boleto", "Financiamento pr√≥prio"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('formas_pagamento', []),
                    ["Dinheiro", "PIX", "Cart√£o d√©bito", "Cart√£o cr√©dito", "Cart√£o credi√°rio", "Boleto", "Financiamento pr√≥prio"],
                    ["Dinheiro", "PIX", "Cart√£o d√©bito", "Cart√£o cr√©dito"]
                )
            )
            # Auto-save formas_pagamento
            if formas_pagamento != st.session_state.business_data.get('formas_pagamento'):
                st.session_state.business_data['formas_pagamento'] = formas_pagamento
                save_user_data()
        
        with col2:
            st.markdown("**Pol√≠ticas Comerciais**")
            
            parcelamento_maximo = st.selectbox(
                "Parcelamento m√°ximo no cart√£o",
                ["√Ä vista apenas", "3x", "6x", "10x", "12x", "18x", "24x"],
                index=["√Ä vista apenas", "3x", "6x", "10x", "12x", "18x", "24x"].index(
                    st.session_state.business_data.get('parcelamento_maximo', '10x')
                )
            )
            # Auto-save parcelamento_maximo
            if parcelamento_maximo != st.session_state.business_data.get('parcelamento_maximo'):
                st.session_state.business_data['parcelamento_maximo'] = parcelamento_maximo
                save_user_data()
            
            desconto_avista = st.slider(
                "Desconto para pagamento √† vista (%)",
                min_value=0,
                max_value=20,
                value=int(st.session_state.business_data.get('desconto_avista', 5)),
                step=1
            )
            # Auto-save desconto_avista
            if desconto_avista != st.session_state.business_data.get('desconto_avista'):
                st.session_state.business_data['desconto_avista'] = desconto_avista
                save_user_data()
            st.caption(f"Desconto: {desconto_avista}%")
            
            politica_garantia = st.text_area(
                "Pol√≠tica de garantia e trocas",
                value=st.session_state.business_data.get('politica_garantia', ''),
                height=100,
                placeholder="Ex: 30 dias para troca, garantia de 1 ano contra defeitos..."
            )
            # Auto-save politica_garantia
            if politica_garantia != st.session_state.business_data.get('politica_garantia'):
                st.session_state.business_data['politica_garantia'] = politica_garantia
                save_user_data()
        
        st.markdown("---")
        st.subheader("üí≥ Condi√ß√µes de Pagamento e Recebimento")
        st.markdown("*Configure os percentuais de vendas √† vista vs prazo e prazos de recebimento*")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Divis√£o de Recebimentos**")
            
            percentual_avista = st.slider(
                "Vendas √† vista (%)",
                min_value=0,
                max_value=100,
                value=int(st.session_state.business_data.get('percentual_avista', 70)),
                step=5,
                help="Percentual das vendas que recebe no mesmo m√™s"
            )
            # Auto-save percentual_avista
            if percentual_avista != st.session_state.business_data.get('percentual_avista'):
                st.session_state.business_data['percentual_avista'] = percentual_avista
                save_user_data()
            
            percentual_prazo = 100 - percentual_avista
            st.info(f"**Vendas a prazo: {percentual_prazo}%**")
            
            st.markdown("**Prazos de Recebimento**")
            
            prazo_options = [0, 15, 30, 45, 60, 90]
            prazo_labels = ["Na hora! (√Ä vista)", "15 dias", "30 dias", "45 dias", "60 dias", "90 dias"]
            
            # Mapear valor salvo para √≠ndice
            current_prazo = st.session_state.business_data.get('prazo_medio_recebimento', 30)
            try:
                current_index = prazo_options.index(current_prazo)
            except ValueError:
                current_index = 2  # Default para 30 dias
            
            prazo_medio_recebimento = st.selectbox(
                "Prazo m√©dio de recebimento (vendas a prazo)",
                options=prazo_options,
                format_func=lambda x: prazo_labels[prazo_options.index(x)],
                index=current_index,
                help="Quantos dias em m√©dia para receber vendas a prazo"
            )
            # Auto-save prazo_medio_recebimento
            if prazo_medio_recebimento != st.session_state.business_data.get('prazo_medio_recebimento'):
                st.session_state.business_data['prazo_medio_recebimento'] = prazo_medio_recebimento
                save_user_data()
        
        with col2:
            st.markdown("**Modalidades de Recebimento**")
            
            # Explicar a diferen√ßa entre venda parcelada e recebimento
            st.info("**üí° Importante:** Cliente pode parcelar em 3x, mas voc√™ pode receber antecipado!")
            
            st.markdown("**Cen√°rios de Recebimento:**")
            
            if prazo_medio_recebimento == 0:
                st.success("üöÄ **Na Hora! (√Ä vista)**")
                st.write("‚Ä¢ Cliente: Paga √† vista (dinheiro/PIX/d√©bito)")
                st.write("‚Ä¢ Voc√™: Recebe na hora, sem intermedi√°rios")
                st.write("‚Ä¢ Financeira: Sem taxas")
                st.write("‚Ä¢ Fluxo de caixa: Instant√¢neo, sem risco")
            elif prazo_medio_recebimento <= 30:
                st.success("‚úÖ **Recebimento Antecipado (D+1 a D+30)**")
                st.write("‚Ä¢ Cliente: Paga em 3x no cart√£o")
                st.write("‚Ä¢ Voc√™: Recebe tudo em at√© 30 dias")
                st.write("‚Ä¢ Financeira: Desconta taxa (3-5%)")
                st.write("‚Ä¢ Fluxo de caixa: R√°pido")
            elif prazo_medio_recebimento <= 60:
                st.warning("‚ö†Ô∏è **Recebimento Parcelado (30-60 dias)**")
                st.write("‚Ä¢ Cliente: Paga em 3x no cart√£o")
                st.write("‚Ä¢ Voc√™: Recebe parcelado conforme cliente paga")
                st.write("‚Ä¢ Financeira: Taxa menor (1-3%)")
                st.write("‚Ä¢ Fluxo de caixa: Moderado")
            else:
                st.error("üö® **Recebimento Direto (60+ dias)**")
                st.write("‚Ä¢ Cliente: Paga diretamente √† voc√™")
                st.write("‚Ä¢ Voc√™: Assume risco de inadimpl√™ncia")
                st.write("‚Ä¢ Financeira: Sem taxas")
                st.write("‚Ä¢ Fluxo de caixa: Lento, maior risco")
            
            # Taxa da financeira configur√°vel
            st.markdown("**üí≥ Taxa da Financeira (Edit√°vel):**")
            
            # Taxa da financeira baseada nas taxas reais do Mercado Pago
            st.markdown("**üí≥ Taxas do Mercado Pago (2024):**")
            
            # Op√ß√µes de recebimento baseadas nas taxas reais
            opcao_recebimento = st.selectbox(
                "Modalidade de recebimento",
                [
                    "PIX - Na hora (0%)",
                    "D√©bito - Na hora (1,99%)",
                    "Cr√©dito √† vista - Na hora (4,98%)",
                    "Cr√©dito 2x-12x - Na hora (5,31%)",
                    "Cr√©dito √† vista - 14 dias (3,79%)",
                    "Cr√©dito 2x-12x - 14 dias (4,36%)",
                    "Cr√©dito √† vista - 30 dias (3,03%)",
                    "Cr√©dito 2x-12x - 30 dias (3,60%)"
                ],
                index=0
            )
            
            # Mapear taxas baseadas na sele√ß√£o
            taxas_mercado_pago = {
                "PIX - Na hora (0%)": 0.0,
                "D√©bito - Na hora (1,99%)": 1.99,
                "Cr√©dito √† vista - Na hora (4,98%)": 4.98,
                "Cr√©dito 2x-12x - Na hora (5,31%)": 5.31,
                "Cr√©dito √† vista - 14 dias (3,79%)": 3.79,
                "Cr√©dito 2x-12x - 14 dias (4,36%)": 4.36,
                "Cr√©dito √† vista - 30 dias (3,03%)": 3.03,
                "Cr√©dito 2x-12x - 30 dias (3,60%)": 3.60
            }
            
            taxa_selecionada = taxas_mercado_pago[opcao_recebimento]
            
            # Salvar configura√ß√£o
            st.session_state.business_data['opcao_recebimento_mp'] = opcao_recebimento
            st.session_state.business_data['taxa_mercado_pago'] = taxa_selecionada
            save_user_data()
            
            # Mostrar detalhes da taxa selecionada
            if taxa_selecionada == 0:
                st.success("**PIX:** Recebimento gratuito e instant√¢neo")
                st.write("‚Ä¢ **Taxa: 0%** - sem custos")
                st.write("‚Ä¢ Recebimento imediato")
                st.write("‚Ä¢ Sem risco de chargeback")
            elif "Na hora" in opcao_recebimento:
                st.info("**Recebimento Imediato:** Taxa mais alta, mas dinheiro na conta na hora")
                st.write(f"‚Ä¢ **Taxa: {taxa_selecionada}%**")
                exemplo_desconto = 1000 * (taxa_selecionada / 100)
                st.write(f"‚Ä¢ Exemplo: R$ 1.000 ‚Üí voc√™ recebe R$ {1000 - exemplo_desconto:,.2f}")
                st.write("‚Ä¢ Dinheiro dispon√≠vel em segundos")
            else:
                st.warning("**Recebimento a Prazo:** Taxa menor, mas aguarda prazo para receber")
                st.write(f"‚Ä¢ **Taxa: {taxa_selecionada}%**")
                exemplo_desconto = 1000 * (taxa_selecionada / 100)
                st.write(f"‚Ä¢ Exemplo: R$ 1.000 ‚Üí voc√™ recebe R$ {1000 - exemplo_desconto:,.2f}")
                prazo = "14 dias" if "14 dias" in opcao_recebimento else "30 dias"
                st.write(f"‚Ä¢ Recebimento em {prazo}")
            
            # Configura√ß√£o customizada (opcional)
            st.markdown("**üîß Configura√ß√£o Personalizada:**")
            usar_customizada = st.checkbox("Usar taxa customizada diferente do Mercado Pago")
            
            if usar_customizada:
                taxa_customizada = st.number_input(
                    "Taxa customizada (%)",
                    min_value=0.0,
                    max_value=15.0,
                    value=taxa_selecionada,
                    step=0.01,
                    format="%.2f",
                    help="Caso use outra operadora ou tenha condi√ß√µes especiais"
                )
                st.session_state.business_data['taxa_customizada'] = taxa_customizada
                st.session_state.business_data['usar_taxa_customizada'] = True
                save_user_data()
                
                st.write(f"‚Ä¢ **Taxa customizada: {taxa_customizada}%**")
                exemplo_desconto = 1000 * (taxa_customizada / 100)
                st.write(f"‚Ä¢ Exemplo: R$ 1.000 ‚Üí voc√™ recebe R$ {1000 - exemplo_desconto:,.2f}")
            else:
                st.session_state.business_data['usar_taxa_customizada'] = False
                save_user_data()
            
            # Mostrar formas de pagamento aceitas
            st.markdown("**Formas de Pagamento:**")
            for forma in formas_pagamento:
                if forma == "Dinheiro":
                    st.write(f"üíµ {forma} ‚Üí Recebe na hora ({percentual_avista}%)")
                elif forma in ["PIX", "D√©bito"]:
                    st.write(f"üí≥ {forma} ‚Üí Recebe D+1 ({percentual_avista}%)")
                else:
                    st.write(f"üí∞ {forma} ‚Üí Recebe conforme configurado ({percentual_prazo}%)")
            
        st.markdown("---")
        st.info(f"**üí° Resumo:** {percentual_avista}% √† vista (recebe no m√™s) + {percentual_prazo}% a prazo (recebe em {prazo_medio_recebimento} dias)")
    
    # Store all data including payment conditions and configured fees
    st.session_state.business_data.update({
        'categorias_produtos': categorias_produtos,
        'marcas_trabalhar': marcas_trabalhar,
        'faixa_preco_produtos': faixa_preco_produtos,
        'tipos_fornecedores': tipos_fornecedores,
        'criterios_fornecedores': criterios_fornecedores,
        'estoque_inicial': estoque_inicial,
        'servicos_oferecidos': servicos_oferecidos,
        'diferenciais_servicos': diferenciais_servicos,
        'tempo_entrega': tempo_entrega,
        'estrategia_precificacao': estrategia_precificacao,
        'margem_produtos': margem_produtos,
        'formas_pagamento': formas_pagamento,
        'parcelamento_maximo': parcelamento_maximo,
        'desconto_avista': desconto_avista,
        'politica_garantia': politica_garantia,
        'percentual_avista': percentual_avista,
        'prazo_medio_recebimento': prazo_medio_recebimento
    })
    
    # Auto-save
    save_user_data()
    
    # Valores calculados para outras etapas (sem interface visual)
    diaria_optometrista = st.session_state.business_data.get('diaria_optometrista', 150.0)
    dias_optometrista_mes = st.session_state.business_data.get('dias_optometrista_mes', 4)
    custo_optometrista_mensal = diaria_optometrista * dias_optometrista_mes
    meta_oculos_mes = st.session_state.business_data.get('meta_oculos_mes', 80)
    custo_exame_por_oculos = custo_optometrista_mensal / meta_oculos_mes if meta_oculos_mes > 0 else 0
    
    # Custos b√°sicos para c√°lculos (sem interface visual)
    custo_materiais_fisicos = 89.80  # Soma dos materiais b√°sicos
    custo_total_com_exame_visual = custo_materiais_fisicos + custo_exame_por_oculos
    
    # Armazenar valores para outras etapas
    st.session_state.business_data.update({
        'custo_exame_por_oculos': custo_exame_por_oculos,
        'custo_materiais_fisicos': custo_materiais_fisicos,
        'custo_total_com_exame_visual': custo_total_com_exame_visual
    })
    save_user_data()
    
    st.markdown("---")
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step5"):
            st.session_state.step = 4
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step5"):
            st.session_state.step = 6
            st.rerun()

# Additional step functions will be implemented similarly...
def show_step_6():
    """Etapa 6: Estrat√©gia de Marketing"""
    st.header("6Ô∏è‚É£ Estrat√©gia de Marketing")
    st.markdown("**FASE 6: MARKETING** - Defina como atrair e manter clientes")
    
    # Tabs para organizar estrat√©gia de marketing
    tab1, tab2, tab3 = st.tabs(["üì¢ Estrat√©gia Geral", "üéØ Canais de Marketing", "üí° Campanhas e Promo√ß√µes"])
    
    with tab1:
        st.subheader("üì¢ Posicionamento e Marca")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Identidade da Marca**")
            
            proposta_valor = st.text_area(
                "Proposta de valor (o que oferece de √∫nico)",
                value=st.session_state.business_data.get('proposta_valor', ''),
                height=100,
                placeholder="Ex: √ìculos de qualidade com atendimento personalizado e pre√ßos justos..."
            )
            # Auto-save proposta_valor
            if proposta_valor != st.session_state.business_data.get('proposta_valor'):
                st.session_state.business_data['proposta_valor'] = proposta_valor
                save_user_data()
            
            publico_alvo_marketing = st.multiselect(
                "P√∫blico-alvo priorit√°rio para marketing",
                ["Jovens (18-30)", "Adultos (30-50)", "Idosos (50+)", "Crian√ßas/Pais", "Profissionais", "Estudantes"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('publico_alvo_marketing', []),
                    ["Jovens (18-30)", "Adultos (30-50)", "Idosos (50+)", "Crian√ßas/Pais", "Profissionais", "Estudantes"],
                    ["Adultos (30-50)"]
                )
            )
            # Auto-save publico_alvo_marketing
            if publico_alvo_marketing != st.session_state.business_data.get('publico_alvo_marketing'):
                st.session_state.business_data['publico_alvo_marketing'] = publico_alvo_marketing
                save_user_data()
            
            tom_comunicacao = st.selectbox(
                "Tom de comunica√ß√£o",
                ["Profissional e t√©cnico", "Amig√°vel e pr√≥ximo", "Moderno e descontra√≠do", "Elegante e sofisticado", "Familiar e caloroso"],
                index=["Profissional e t√©cnico", "Amig√°vel e pr√≥ximo", "Moderno e descontra√≠do", "Elegante e sofisticado", "Familiar e caloroso"].index(
                    st.session_state.business_data.get('tom_comunicacao', 'Amig√°vel e pr√≥ximo')
                )
            )
            # Auto-save tom_comunicacao
            if tom_comunicacao != st.session_state.business_data.get('tom_comunicacao'):
                st.session_state.business_data['tom_comunicacao'] = tom_comunicacao
                save_user_data()
        
        with col2:
            st.markdown("**Objetivos de Marketing**")
            
            objetivos_marketing = st.multiselect(
                "Principais objetivos",
                ["Aumentar conhecimento da marca", "Gerar leads qualificados", "Aumentar vendas", "Fidelizar clientes", 
                 "Melhorar reputa√ß√£o", "Expandir base de clientes", "Posicionar como refer√™ncia"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('objetivos_marketing', []),
                    ["Aumentar conhecimento da marca", "Gerar leads qualificados", "Aumentar vendas", "Fidelizar clientes", 
                     "Melhorar reputa√ß√£o", "Expandir base de clientes", "Posicionar como refer√™ncia"],
                    ["Aumentar vendas", "Fidelizar clientes"]
                )
            )
            # Auto-save objetivos_marketing
            if objetivos_marketing != st.session_state.business_data.get('objetivos_marketing'):
                st.session_state.business_data['objetivos_marketing'] = objetivos_marketing
                save_user_data()
            
            orcamento_marketing = st.number_input(
                "Or√ßamento mensal para marketing (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('orcamento_marketing', 1000)),
                step=100.0,
                format="%.0f"
            )
            # Auto-save orcamento_marketing
            if orcamento_marketing != st.session_state.business_data.get('orcamento_marketing'):
                st.session_state.business_data['orcamento_marketing'] = orcamento_marketing
                save_user_data()
            st.caption(f"üí∞ {format_currency(orcamento_marketing)}/m√™s")
            
            estrategias_diferenciacao = st.multiselect(
                "Como se diferenciar√° dos concorrentes",
                ["Pre√ßos mais baixos", "Melhor atendimento", "Maior variedade", "Tecnologia avan√ßada", 
                 "Rapidez na entrega", "Localiza√ß√£o conveniente", "Parcerias exclusivas", "Garantias estendidas"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('estrategias_diferenciacao', []),
                    ["Pre√ßos mais baixos", "Melhor atendimento", "Maior variedade", "Tecnologia avan√ßada", 
                     "Rapidez na entrega", "Localiza√ß√£o conveniente", "Parcerias exclusivas", "Garantias estendidas"],
                    ["Melhor atendimento"]
                )
            )
            # Auto-save estrategias_diferenciacao
            if estrategias_diferenciacao != st.session_state.business_data.get('estrategias_diferenciacao'):
                st.session_state.business_data['estrategias_diferenciacao'] = estrategias_diferenciacao
                save_user_data()
    
    with tab2:
        st.subheader("üéØ Canais de Marketing e Divulga√ß√£o")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Marketing Digital**")
            
            canais_digitais = st.multiselect(
                "Canais digitais que utilizar√°",
                ["Facebook", "Instagram", "WhatsApp Business", "Google Ads", "Google Meu Neg√≥cio", 
                 "Site pr√≥prio", "YouTube", "TikTok", "Email marketing"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('canais_digitais', []),
                    ["Facebook", "Instagram", "WhatsApp Business", "Google Ads", "Google Meu Neg√≥cio", 
                     "Site pr√≥prio", "YouTube", "TikTok", "Email marketing"],
                    ["Facebook", "Instagram", "WhatsApp Business"]
                )
            )
            # Auto-save canais_digitais
            if canais_digitais != st.session_state.business_data.get('canais_digitais'):
                st.session_state.business_data['canais_digitais'] = canais_digitais
                save_user_data()
            
            frequencia_posts = st.selectbox(
                "Frequ√™ncia de postagens nas redes sociais",
                ["Diariamente", "3-4 vezes por semana", "1-2 vezes por semana", "Esporadicamente"],
                index=["Diariamente", "3-4 vezes por semana", "1-2 vezes por semana", "Esporadicamente"].index(
                    st.session_state.business_data.get('frequencia_posts', '3-4 vezes por semana')
                )
            )
            # Auto-save frequencia_posts
            if frequencia_posts != st.session_state.business_data.get('frequencia_posts'):
                st.session_state.business_data['frequencia_posts'] = frequencia_posts
                save_user_data()
            
            tipos_conteudo = st.multiselect(
                "Tipos de conte√∫do para redes sociais",
                ["Produtos em destaque", "Dicas de cuidados", "Tend√™ncias de moda", "Depoimentos de clientes", 
                 "Bastidores da √≥tica", "Promo√ß√µes", "Educativo sobre vis√£o", "Antes e depois"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('tipos_conteudo', []),
                    ["Produtos em destaque", "Dicas de cuidados", "Tend√™ncias de moda", "Depoimentos de clientes", 
                     "Bastidores da √≥tica", "Promo√ß√µes", "Educativo sobre vis√£o", "Antes e depois"],
                    ["Produtos em destaque", "Promo√ß√µes"]
                )
            )
            # Auto-save tipos_conteudo
            if tipos_conteudo != st.session_state.business_data.get('tipos_conteudo'):
                st.session_state.business_data['tipos_conteudo'] = tipos_conteudo
                save_user_data()
        
        with col2:
            st.markdown("**Marketing Tradicional**")
            
            canais_tradicionais = st.multiselect(
                "Canais tradicionais que utilizar√°",
                ["Panfletos", "Cart√µes de visita", "Banner na loja", "An√∫ncios em jornal local", 
                 "R√°dio local", "Parcerias com m√©dicos", "Indica√ß√µes boca a boca", "Eventos locais"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('canais_tradicionais', []),
                    ["Panfletos", "Cart√µes de visita", "Banner na loja", "An√∫ncios em jornal local", 
                     "R√°dio local", "Parcerias com m√©dicos", "Indica√ß√µes boca a boca", "Eventos locais"],
                    ["Cart√µes de visita", "Indica√ß√µes boca a boca"]
                )
            )
            # Auto-save canais_tradicionais
            if canais_tradicionais != st.session_state.business_data.get('canais_tradicionais'):
                st.session_state.business_data['canais_tradicionais'] = canais_tradicionais
                save_user_data()
            
            parcerias_marketing = st.text_area(
                "Parcerias estrat√©gicas para marketing",
                value=st.session_state.business_data.get('parcerias_marketing', ''),
                height=100,
                placeholder="Ex: Oftalmologistas, cl√≠nicas, escolas, empresas locais..."
            )
            # Auto-save parcerias_marketing
            if parcerias_marketing != st.session_state.business_data.get('parcerias_marketing'):
                st.session_state.business_data['parcerias_marketing'] = parcerias_marketing
                save_user_data()
            
            programa_indicacoes = st.selectbox(
                "Programa de indica√ß√µes",
                ["N√£o pretendo ter", "Desconto para quem indica", "Desconto para ambos", "Sistema de pontos", "Brindes especiais"],
                index=["N√£o pretendo ter", "Desconto para quem indica", "Desconto para ambos", "Sistema de pontos", "Brindes especiais"].index(
                    st.session_state.business_data.get('programa_indicacoes', 'Desconto para ambos')
                )
            )
            # Auto-save programa_indicacoes
            if programa_indicacoes != st.session_state.business_data.get('programa_indicacoes'):
                st.session_state.business_data['programa_indicacoes'] = programa_indicacoes
                save_user_data()
    
    with tab3:
        st.subheader("üí° Campanhas e Estrat√©gias Promocionais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Promo√ß√µes Sazonais**")
            
            campanhas_sazonais = st.multiselect(
                "Campanhas sazonais planejadas",
                ["Volta √†s aulas", "Dia das M√£es", "Dia dos Pais", "Black Friday", "Natal", 
                 "F√©rias escolares", "Dia da Vis√£o", "Anivers√°rio da loja"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('campanhas_sazonais', []),
                    ["Volta √†s aulas", "Dia das M√£es", "Dia dos Pais", "Black Friday", "Natal", 
                     "F√©rias escolares", "Dia da Vis√£o", "Anivers√°rio da loja"],
                    ["Volta √†s aulas", "Black Friday"]
                )
            )
            # Auto-save campanhas_sazonais
            if campanhas_sazonais != st.session_state.business_data.get('campanhas_sazonais'):
                st.session_state.business_data['campanhas_sazonais'] = campanhas_sazonais
                save_user_data()
            
            tipos_promocoes = st.multiselect(
                "Tipos de promo√ß√µes que oferecer√°",
                ["Desconto percentual", "2¬™ unidade com desconto", "Frete gr√°tis", "Brinde", 
                 "Parcelamento sem juros", "Cashback", "Troca garantida", "Combo promocional"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('tipos_promocoes', []),
                    ["Desconto percentual", "2¬™ unidade com desconto", "Frete gr√°tis", "Brinde", 
                     "Parcelamento sem juros", "Cashback", "Troca garantida", "Combo promocional"],
                    ["Desconto percentual", "Parcelamento sem juros"]
                )
            )
            # Auto-save tipos_promocoes
            if tipos_promocoes != st.session_state.business_data.get('tipos_promocoes'):
                st.session_state.business_data['tipos_promocoes'] = tipos_promocoes
                save_user_data()
        
        with col2:
            st.markdown("**Fideliza√ß√£o de Clientes**")
            
            estrategias_fidelizacao = st.multiselect(
                "Estrat√©gias de fideliza√ß√£o",
                ["Programa de pontos", "Desconto para clientes antigos", "Anivers√°rio do cliente", 
                 "Newsletter exclusiva", "Pr√©-venda de novidades", "Atendimento VIP", "Evento exclusivo"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('estrategias_fidelizacao', []),
                    ["Programa de pontos", "Desconto para clientes antigos", "Anivers√°rio do cliente", 
                     "Newsletter exclusiva", "Pr√©-venda de novidades", "Atendimento VIP", "Evento exclusivo"],
                    ["Anivers√°rio do cliente"]
                )
            )
            # Auto-save estrategias_fidelizacao
            if estrategias_fidelizacao != st.session_state.business_data.get('estrategias_fidelizacao'):
                st.session_state.business_data['estrategias_fidelizacao'] = estrategias_fidelizacao
                save_user_data()
            
            metricas_acompanhar = st.multiselect(
                "M√©tricas que acompanhar√°",
                ["N√∫mero de seguidores", "Engajamento nas redes", "Convers√µes de vendas", "CAC (Custo de Aquisi√ß√£o)", 
                 "LTV (Valor do cliente)", "Taxa de reten√ß√£o", "NPS (Satisfa√ß√£o)", "ROI do marketing"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('metricas_acompanhar', []),
                    ["N√∫mero de seguidores", "Engajamento nas redes", "Convers√µes de vendas", "CAC (Custo de Aquisi√ß√£o)", 
                     "LTV (Valor do cliente)", "Taxa de reten√ß√£o", "NPS (Satisfa√ß√£o)", "ROI do marketing"],
                    ["Convers√µes de vendas", "NPS (Satisfa√ß√£o)"]
                )
            )
            # Auto-save metricas_acompanhar
            if metricas_acompanhar != st.session_state.business_data.get('metricas_acompanhar'):
                st.session_state.business_data['metricas_acompanhar'] = metricas_acompanhar
                save_user_data()
            
            plano_lancamento = st.text_area(
                "Plano para lan√ßamento/inaugura√ß√£o",
                value=st.session_state.business_data.get('plano_lancamento', ''),
                height=100,
                placeholder="Ex: Evento de inaugura√ß√£o, promo√ß√µes especiais, parcerias para divulga√ß√£o..."
            )
            # Auto-save plano_lancamento
            if plano_lancamento != st.session_state.business_data.get('plano_lancamento'):
                st.session_state.business_data['plano_lancamento'] = plano_lancamento
                save_user_data()
    
    # Store all data
    st.session_state.business_data.update({
        'proposta_valor': proposta_valor,
        'publico_alvo_marketing': publico_alvo_marketing,
        'tom_comunicacao': tom_comunicacao,
        'objetivos_marketing': objetivos_marketing,
        'orcamento_marketing': orcamento_marketing,
        'estrategias_diferenciacao': estrategias_diferenciacao,
        'canais_digitais': canais_digitais,
        'frequencia_posts': frequencia_posts,
        'tipos_conteudo': tipos_conteudo,
        'canais_tradicionais': canais_tradicionais,
        'parcerias_marketing': parcerias_marketing,
        'programa_indicacoes': programa_indicacoes,
        'campanhas_sazonais': campanhas_sazonais,
        'tipos_promocoes': tipos_promocoes,
        'estrategias_fidelizacao': estrategias_fidelizacao,
        'metricas_acompanhar': metricas_acompanhar,
        'plano_lancamento': plano_lancamento
    })
    
    # Auto-save
    save_user_data()
    
    st.markdown("---")
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step6"):
            st.session_state.step = 5
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step6"):
            st.session_state.step = 7
            st.rerun()

def show_step_7():
    """Etapa 7: Plano Operacional"""
    st.header("7Ô∏è‚É£ Plano Operacional")
    st.markdown("**FASE 7: OPERA√á√ïES** - Defina como sua √≥tica funcionar√° no dia a dia")
    
    # Tabs para organizar plano operacional
    tab1, tab2, tab3 = st.tabs(["üè™ Estrutura da Loja", "‚öôÔ∏è Processos Operacionais", "üìã Gest√£o e Controles"])
    
    with tab1:
        st.subheader("üè™ Layout e Infraestrutura")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Layout da Loja**")
            
            layout_areas = st.multiselect(
                "√Åreas que ter√° na loja",
                ["√Årea de atendimento", "Exposi√ß√£o de arma√ß√µes", "Exposi√ß√£o de √≥culos de sol", "√Årea de ajustes", 
                 "Estoque", "Caixa", "√Årea de espera", "Consult√≥rio/Exames", "Escrit√≥rio"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('layout_areas', []),
                    ["√Årea de atendimento", "Exposi√ß√£o de arma√ß√µes", "Exposi√ß√£o de √≥culos de sol", "√Årea de ajustes", 
                     "Estoque", "Caixa", "√Årea de espera", "Consult√≥rio/Exames", "Escrit√≥rio"],
                    ["√Årea de atendimento", "Exposi√ß√£o de arma√ß√µes", "Caixa"]
                )
            )
            # Auto-save layout_areas
            if layout_areas != st.session_state.business_data.get('layout_areas'):
                st.session_state.business_data['layout_areas'] = layout_areas
                save_user_data()
            
            equipamentos_necessarios = st.multiselect(
                "Equipamentos necess√°rios",
                ["Computador/PDV", "Impressora", "Leitor de cart√£o", "Balan√ßa de precis√£o", 
                 "Kit de ajustes", "Expositor de arma√ß√µes", "Vitrine com seguran√ßa", "Sistema de seguran√ßa"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('equipamentos_necessarios', []),
                    ["Computador/PDV", "Impressora", "Leitor de cart√£o", "Balan√ßa de precis√£o", 
                     "Kit de ajustes", "Expositor de arma√ß√µes", "Vitrine com seguran√ßa", "Sistema de seguran√ßa"],
                    ["Computador/PDV", "Kit de ajustes"]
                )
            )
            # Auto-save equipamentos_necessarios
            if equipamentos_necessarios != st.session_state.business_data.get('equipamentos_necessarios'):
                st.session_state.business_data['equipamentos_necessarios'] = equipamentos_necessarios
                save_user_data()
            
            investimento_equipamentos = st.number_input(
                "Investimento em equipamentos (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('investimento_equipamentos', 10000)),
                step=1000.0,
                format="%.0f"
            )
            # Auto-save investimento_equipamentos
            if investimento_equipamentos != st.session_state.business_data.get('investimento_equipamentos'):
                st.session_state.business_data['investimento_equipamentos'] = investimento_equipamentos
                save_user_data()
            st.caption(f"üí∞ {format_currency(investimento_equipamentos)}")
        
        with col2:
            st.markdown("**Funcionamento**")
            
            horario_funcionamento = st.text_input(
                "Hor√°rio de funcionamento",
                value=st.session_state.business_data.get('horario_funcionamento', ''),
                placeholder="Ex: Segunda a Sexta 8h √†s 18h, S√°bado 8h √†s 12h"
            )
            # Auto-save horario_funcionamento
            if horario_funcionamento != st.session_state.business_data.get('horario_funcionamento'):
                st.session_state.business_data['horario_funcionamento'] = horario_funcionamento
                save_user_data()
            
            dias_funcionamento = st.multiselect(
                "Dias de funcionamento",
                ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado", "Domingo"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('dias_funcionamento', []),
                    ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado", "Domingo"],
                    ["Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado"]
                )
            )
            # Auto-save dias_funcionamento
            if dias_funcionamento != st.session_state.business_data.get('dias_funcionamento'):
                st.session_state.business_data['dias_funcionamento'] = dias_funcionamento
                save_user_data()
            
            capacidade_atendimento = st.number_input(
                "Capacidade de atendimento (clientes/dia)",
                min_value=1,
                value=int(st.session_state.business_data.get('capacidade_atendimento', 20)),
                step=5
            )
            # Auto-save capacidade_atendimento
            if capacidade_atendimento != st.session_state.business_data.get('capacidade_atendimento'):
                st.session_state.business_data['capacidade_atendimento'] = capacidade_atendimento
                save_user_data()
            
            sistema_gestao = st.selectbox(
                "Sistema de gest√£o que utilizar√°",
                ["Planilhas Excel", "Software espec√≠fico para √≥ticas", "Sistema ERP", "Software customizado", "Ainda n√£o definido"],
                index=["Planilhas Excel", "Software espec√≠fico para √≥ticas", "Sistema ERP", "Software customizado", "Ainda n√£o definido"].index(
                    st.session_state.business_data.get('sistema_gestao', 'Software espec√≠fico para √≥ticas')
                )
            )
            # Auto-save sistema_gestao
            if sistema_gestao != st.session_state.business_data.get('sistema_gestao'):
                st.session_state.business_data['sistema_gestao'] = sistema_gestao
                save_user_data()
    
    with tab2:
        st.subheader("‚öôÔ∏è Fluxos de Trabalho")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Processo de Atendimento**")
            
            fluxo_atendimento = st.text_area(
                "Descreva o fluxo de atendimento ao cliente",
                value=st.session_state.business_data.get('fluxo_atendimento', ''),
                height=120,
                placeholder="Ex: 1. Recep√ß√£o e identifica√ß√£o da necessidade\n2. An√°lise da receita\n3. Orienta√ß√£o sobre produtos..."
            )
            # Auto-save fluxo_atendimento
            if fluxo_atendimento != st.session_state.business_data.get('fluxo_atendimento'):
                st.session_state.business_data['fluxo_atendimento'] = fluxo_atendimento
                save_user_data()
            
            tempo_medio_atendimento = st.selectbox(
                "Tempo m√©dio de atendimento por cliente",
                ["15-20 minutos", "20-30 minutos", "30-45 minutos", "45-60 minutos", "Mais de 1 hora"],
                index=["15-20 minutos", "20-30 minutos", "30-45 minutos", "45-60 minutos", "Mais de 1 hora"].index(
                    st.session_state.business_data.get('tempo_medio_atendimento', '30-45 minutos')
                )
            )
            # Auto-save tempo_medio_atendimento
            if tempo_medio_atendimento != st.session_state.business_data.get('tempo_medio_atendimento'):
                st.session_state.business_data['tempo_medio_atendimento'] = tempo_medio_atendimento
                save_user_data()
            
            politicas_atendimento = st.multiselect(
                "Pol√≠ticas de atendimento",
                ["Atendimento por ordem de chegada", "Agendamento obrigat√≥rio", "Agendamento opcional", 
                 "Prioridade para idosos", "Atendimento domiciliar", "Televendas", "WhatsApp"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('politicas_atendimento', []),
                    ["Atendimento por ordem de chegada", "Agendamento obrigat√≥rio", "Agendamento opcional", 
                     "Prioridade para idosos", "Atendimento domiciliar", "Televendas", "WhatsApp"],
                    ["Atendimento por ordem de chegada", "WhatsApp"]
                )
            )
            # Auto-save politicas_atendimento
            if politicas_atendimento != st.session_state.business_data.get('politicas_atendimento'):
                st.session_state.business_data['politicas_atendimento'] = politicas_atendimento
                save_user_data()
        
        with col2:
            st.markdown("**Gest√£o de Estoque**")
            
            controle_estoque = st.selectbox(
                "M√©todo de controle de estoque",
                ["Manual/Planilhas", "Sistema automatizado", "C√≥digo de barras", "RFID", "Controle misto"],
                index=["Manual/Planilhas", "Sistema automatizado", "C√≥digo de barras", "RFID", "Controle misto"].index(
                    st.session_state.business_data.get('controle_estoque', 'Sistema automatizado')
                )
            )
            # Auto-save controle_estoque
            if controle_estoque != st.session_state.business_data.get('controle_estoque'):
                st.session_state.business_data['controle_estoque'] = controle_estoque
                save_user_data()
            
            giro_estoque_planejado = st.selectbox(
                "Giro de estoque planejado",
                ["1-2 vezes por ano", "3-4 vezes por ano", "5-6 vezes por ano", "Mais de 6 vezes por ano"],
                index=["1-2 vezes por ano", "3-4 vezes por ano", "5-6 vezes por ano", "Mais de 6 vezes por ano"].index(
                    st.session_state.business_data.get('giro_estoque_planejado', '3-4 vezes por ano')
                )
            )
            # Auto-save giro_estoque_planejado
            if giro_estoque_planejado != st.session_state.business_data.get('giro_estoque_planejado'):
                st.session_state.business_data['giro_estoque_planejado'] = giro_estoque_planejado
                save_user_data()
            
            politicas_compra = st.text_area(
                "Pol√≠ticas de compra e reposi√ß√£o",
                value=st.session_state.business_data.get('politicas_compra', ''),
                height=100,
                placeholder="Ex: Compras mensais, estoque m√≠nimo de 30 dias, an√°lise ABC..."
            )
            # Auto-save politicas_compra
            if politicas_compra != st.session_state.business_data.get('politicas_compra'):
                st.session_state.business_data['politicas_compra'] = politicas_compra
                save_user_data()
    
    with tab3:
        st.subheader("üìã Controles e Indicadores")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Indicadores de Performance**")
            
            kpis_acompanhar = st.multiselect(
                "KPIs que acompanhar√°",
                ["Faturamento di√°rio", "Ticket m√©dio", "Convers√£o de vendas", "Satisfa√ß√£o do cliente", 
                 "Giro de estoque", "Margem de lucro", "Custo por cliente", "Taxa de retorno"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('kpis_acompanhar', []),
                    ["Faturamento di√°rio", "Ticket m√©dio", "Convers√£o de vendas", "Satisfa√ß√£o do cliente", 
                     "Giro de estoque", "Margem de lucro", "Custo por cliente", "Taxa de retorno"],
                    ["Faturamento di√°rio", "Ticket m√©dio", "Satisfa√ß√£o do cliente"]
                )
            )
            # Auto-save kpis_acompanhar
            if kpis_acompanhar != st.session_state.business_data.get('kpis_acompanhar'):
                st.session_state.business_data['kpis_acompanhar'] = kpis_acompanhar
                save_user_data()
            
            frequencia_relatorios = st.selectbox(
                "Frequ√™ncia dos relat√≥rios gerenciais",
                ["Di√°rio", "Semanal", "Quinzenal", "Mensal", "Conforme necessidade"],
                index=["Di√°rio", "Semanal", "Quinzenal", "Mensal", "Conforme necessidade"].index(
                    st.session_state.business_data.get('frequencia_relatorios', 'Semanal')
                )
            )
            # Auto-save frequencia_relatorios
            if frequencia_relatorios != st.session_state.business_data.get('frequencia_relatorios'):
                st.session_state.business_data['frequencia_relatorios'] = frequencia_relatorios
                save_user_data()
            
            # Sincroniza√ß√£o com proje√ß√µes financeiras
            valor_projecao = st.session_state.business_data.get('vendas_mes_1', None)
            valor_atual_meta = st.session_state.business_data.get('metas_mensais', None)
            
            if valor_projecao:
                col_sync1, col_sync2 = st.columns([3, 1])
                with col_sync1:
                    if valor_projecao != valor_atual_meta:
                        st.warning(f"Valor das Proje√ß√µes Financeiras: {format_currency(valor_projecao)} (diferente da meta atual)")
                    else:
                        st.success(f"Sincronizado com Proje√ß√µes Financeiras: {format_currency(valor_projecao)}")
                
                with col_sync2:
                    if st.button("üîÑ Sincronizar", help="Atualizar com valor das Proje√ß√µes Financeiras"):
                        st.session_state.business_data['metas_mensais'] = valor_projecao
                        save_user_data()
                        st.rerun()
            
            valor_atual = st.session_state.business_data.get('metas_mensais', valor_projecao if valor_projecao else 20831)
            
            metas_mensais = st.number_input(
                "Meta de faturamento mensal (R$)",
                min_value=0.0,
                value=float(valor_atual),
                step=1000.0,
                format="%.0f"
            )
            # Auto-save metas_mensais
            if metas_mensais != st.session_state.business_data.get('metas_mensais'):
                st.session_state.business_data['metas_mensais'] = metas_mensais
                save_user_data()
            st.caption(f"üí∞ {format_currency(metas_mensais)}/m√™s")
        
        with col2:
            st.markdown("**Controles Operacionais**")
            
            controles_qualidade = st.multiselect(
                "Controles de qualidade implementados",
                ["Checklist de atendimento", "Pesquisa de satisfa√ß√£o", "Controle de prazos", 
                 "Verifica√ß√£o dupla de receitas", "Testes de equipamentos", "Auditorias internas"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('controles_qualidade', []),
                    ["Checklist de atendimento", "Pesquisa de satisfa√ß√£o", "Controle de prazos", 
                     "Verifica√ß√£o dupla de receitas", "Testes de equipamentos", "Auditorias internas"],
                    ["Pesquisa de satisfa√ß√£o", "Controle de prazos"]
                )
            )
            # Auto-save controles_qualidade
            if controles_qualidade != st.session_state.business_data.get('controles_qualidade'):
                st.session_state.business_data['controles_qualidade'] = controles_qualidade
                save_user_data()
            
            backup_dados = st.selectbox(
                "Pol√≠tica de backup de dados",
                ["Backup di√°rio autom√°tico", "Backup semanal", "Backup mensal", "Backup em nuvem", "N√£o planejado ainda"],
                index=["Backup di√°rio autom√°tico", "Backup semanal", "Backup mensal", "Backup em nuvem", "N√£o planejado ainda"].index(
                    st.session_state.business_data.get('backup_dados', 'Backup em nuvem')
                )
            )
            # Auto-save backup_dados
            if backup_dados != st.session_state.business_data.get('backup_dados'):
                st.session_state.business_data['backup_dados'] = backup_dados
                save_user_data()
            
            plano_contingencia = st.text_area(
                "Plano de conting√™ncia/emerg√™ncia",
                value=st.session_state.business_data.get('plano_contingencia', ''),
                height=100,
                placeholder="Ex: Procedimentos em caso de falha do sistema, falta de energia, aus√™ncia de funcion√°rios..."
            )
            # Auto-save plano_contingencia
            if plano_contingencia != st.session_state.business_data.get('plano_contingencia'):
                st.session_state.business_data['plano_contingencia'] = plano_contingencia
                save_user_data()
    
    # Store all data
    st.session_state.business_data.update({
        'layout_areas': layout_areas,
        'equipamentos_necessarios': equipamentos_necessarios,
        'investimento_equipamentos': investimento_equipamentos,
        'horario_funcionamento': horario_funcionamento,
        'dias_funcionamento': dias_funcionamento,
        'capacidade_atendimento': capacidade_atendimento,
        'sistema_gestao': sistema_gestao,
        'fluxo_atendimento': fluxo_atendimento,
        'tempo_medio_atendimento': tempo_medio_atendimento,
        'politicas_atendimento': politicas_atendimento,
        'controle_estoque': controle_estoque,
        'giro_estoque_planejado': giro_estoque_planejado,
        'politicas_compra': politicas_compra,
        'kpis_acompanhar': kpis_acompanhar,
        'frequencia_relatorios': frequencia_relatorios,
        'metas_mensais': metas_mensais,
        'controles_qualidade': controles_qualidade,
        'backup_dados': backup_dados,
        'plano_contingencia': plano_contingencia
    })
    
    # Auto-save
    save_user_data()
    
    st.markdown("---")
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step7"):
            st.session_state.step = 6
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step7"):
            st.session_state.step = 8
            st.rerun()

def show_step_8():
    """Etapa 8: Gest√£o de Pessoas"""
    st.header("8Ô∏è‚É£ Gest√£o de Pessoas")
    st.markdown("**FASE 8: PESSOAS** - Planeje sua equipe e gest√£o de recursos humanos")
    
    # Tabs para organizar gest√£o de pessoas
    tab1, tab2, tab3, tab4 = st.tabs(["üë• Estrutura da Equipe", "üìã Pessoas e Parceiros", "üéØ Sistema de Capta√ß√£o", "üí∞ Custos Trabalhistas"])
    
    with tab1:
        st.subheader("üë• Planejamento da Equipe")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Cargos e Fun√ß√µes**")
            
            num_funcionarios = st.number_input(
                "N√∫mero total de funcion√°rios (incluindo voc√™)",
                min_value=0,
                value=int(st.session_state.business_data.get('num_funcionarios', 1)),
                step=1,
                help="Para come√ßar apenas aos s√°bados, voc√™ pode usar 0 e trabalhar s√≥ com comissionistas"
            )
            # Auto-save num_funcionarios
            if num_funcionarios != st.session_state.business_data.get('num_funcionarios'):
                st.session_state.business_data['num_funcionarios'] = num_funcionarios
                save_user_data()
            
            cargos_necessarios = st.multiselect(
                "Cargos que pretende ter na equipe",
                ["Propriet√°rio/Gerente", "Vendedor/Atendente", "T√©cnico em √≥ptica", "Recepcionista", 
                 "Auxiliar administrativo", "T√©cnico em lentes", "Oftalmologista parceiro", "Limpeza/Seguran√ßa"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('cargos_necessarios', []),
                    ["Propriet√°rio/Gerente", "Vendedor/Atendente", "T√©cnico em √≥ptica", "Recepcionista", 
                     "Auxiliar administrativo", "T√©cnico em lentes", "Oftalmologista parceiro", "Limpeza/Seguran√ßa"],
                    ["Propriet√°rio/Gerente", "Vendedor/Atendente"]
                )
            )
            # Auto-save cargos_necessarios
            if cargos_necessarios != st.session_state.business_data.get('cargos_necessarios'):
                st.session_state.business_data['cargos_necessarios'] = cargos_necessarios
                save_user_data()
            
            perfil_funcionarios = st.text_area(
                "Perfil desejado dos funcion√°rios",
                value=st.session_state.business_data.get('perfil_funcionarios', ''),
                height=100,
                placeholder="Ex: Experi√™ncia em vendas, comunicativo, conhecimento em √≥ptica..."
            )
            # Auto-save perfil_funcionarios
            if perfil_funcionarios != st.session_state.business_data.get('perfil_funcionarios'):
                st.session_state.business_data['perfil_funcionarios'] = perfil_funcionarios
                save_user_data()
            
            estrategia_contratacao = st.selectbox(
                "Estrat√©gia de contrata√ß√£o",
                ["Contrata√ß√£o imediata", "Contrata√ß√£o gradual", "Terceiriza√ß√£o", "Parcerias", "Fam√≠lia/Conhecidos"],
                index=["Contrata√ß√£o imediata", "Contrata√ß√£o gradual", "Terceiriza√ß√£o", "Parcerias", "Fam√≠lia/Conhecidos"].index(
                    st.session_state.business_data.get('estrategia_contratacao', 'Contrata√ß√£o gradual')
                )
            )
            # Auto-save estrategia_contratacao
            if estrategia_contratacao != st.session_state.business_data.get('estrategia_contratacao'):
                st.session_state.business_data['estrategia_contratacao'] = estrategia_contratacao
                save_user_data()
        
        with col2:
            st.markdown("**Organiza√ß√£o da Equipe**")
            
            jornada_trabalho = st.selectbox(
                "Jornada de trabalho padr√£o",
                ["44h semanais", "40h semanais", "36h semanais", "Meio per√≠odo", "Hor√°rio flex√≠vel"],
                index=["44h semanais", "40h semanais", "36h semanais", "Meio per√≠odo", "Hor√°rio flex√≠vel"].index(
                    st.session_state.business_data.get('jornada_trabalho', '44h semanais')
                )
            )
            # Auto-save jornada_trabalho
            if jornada_trabalho != st.session_state.business_data.get('jornada_trabalho'):
                st.session_state.business_data['jornada_trabalho'] = jornada_trabalho
                save_user_data()
            
            escala_trabalho = st.multiselect(
                "Organiza√ß√£o dos turnos",
                ["Turno √∫nico", "Dois turnos", "Escala de revezamento", "Hor√°rio corrido", "Plant√£o aos s√°bados"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('escala_trabalho', []),
                    ["Turno √∫nico", "Dois turnos", "Escala de revezamento", "Hor√°rio corrido", "Plant√£o aos s√°bados"],
                    ["Turno √∫nico"]
                )
            )
            # Auto-save escala_trabalho
            if escala_trabalho != st.session_state.business_data.get('escala_trabalho'):
                st.session_state.business_data['escala_trabalho'] = escala_trabalho
                save_user_data()
            
            faixa_salarial = st.text_area(
                "Faixa salarial prevista por cargo",
                value=st.session_state.business_data.get('faixa_salarial', ''),
                height=100,
                placeholder="Ex: Vendedor: R$ 1.500-2.000\nT√©cnico: R$ 2.000-2.500"
            )
            # Auto-save faixa_salarial
            if faixa_salarial != st.session_state.business_data.get('faixa_salarial'):
                st.session_state.business_data['faixa_salarial'] = faixa_salarial
                save_user_data()
            
            plano_crescimento_equipe = st.text_area(
                "Plano de crescimento da equipe",
                value=st.session_state.business_data.get('plano_crescimento_equipe', ''),
                height=80,
                placeholder="Como pretende expandir a equipe conforme o neg√≥cio cresce?"
            )
            # Auto-save plano_crescimento_equipe
            if plano_crescimento_equipe != st.session_state.business_data.get('plano_crescimento_equipe'):
                st.session_state.business_data['plano_crescimento_equipe'] = plano_crescimento_equipe
                save_user_data()
    
    with tab2:
        st.subheader("üë• Funcion√°rios Planejados")
        
        # Inicializar lista de funcion√°rios planejados
        if 'funcionarios_planejados' not in st.session_state.business_data:
            st.session_state.business_data['funcionarios_planejados'] = []
        
        # Verificar se existem funcion√°rios do DP e Tributa√ß√£o para sincronizar
        funcionarios_dp = st.session_state.get('funcionarios', [])
        
        if funcionarios_dp and len(st.session_state.business_data['funcionarios_planejados']) == 0:
            st.info("üîÑ **Sincroniza√ß√£o com DP e Tributa√ß√£o**: Encontrados funcion√°rios cadastrados no DP. Deseja sincroniz√°-los?")
            
            col_sync1, col_sync2 = st.columns(2)
            with col_sync1:
                if st.button("‚úÖ Sincronizar do DP e Tributa√ß√£o", type="primary"):
                    funcionarios_sincronizados = []
                    for func in funcionarios_dp:
                        funcionarios_sincronizados.append({
                            'nome': func.get('nome', 'Funcion√°rio'),
                            'cargo': func.get('cargo', 'Vendedor(a)'),
                            'salario': func.get('salario_base', 1518.00),
                            'tipo_contrato': func.get('tipo_contrato', 'CLT'),
                            'data_admissao': func.get('data_admissao', '2024-01-01'),
                            'vale_transporte': func.get('vale_transporte', True),
                            'vale_refeicao': func.get('vale_refeicao', 25.00),
                            'plano_saude': func.get('plano_saude', False),
                            'comissao': func.get('comissao_percentual', 0.0),
                            'escolaridade': func.get('grau_instrucao', 'Ensino M√©dio'),
                            'dependentes': func.get('dependentes', 0)
                        })
                    
                    st.session_state.business_data['funcionarios_planejados'] = funcionarios_sincronizados
                    save_user_data()
                    st.success(f"‚úÖ {len(funcionarios_sincronizados)} funcion√°rio(s) sincronizado(s) do DP!")
                    st.rerun()
            
            with col_sync2:
                if st.button("üîÑ Manter Separado", type="secondary"):
                    st.info("Os dados permanecem separados. Voc√™ pode gerenciar independentemente.")
        
        # Interface para adicionar funcion√°rios planejados
        with st.expander("‚ûï Adicionar Funcion√°rio Planejado"):
            col1, col2 = st.columns(2)
            
            with col1:
                nome_planejado = st.text_input("Nome do funcion√°rio", key="nome_planejado")
                cargo_planejado = st.selectbox(
                    "Cargo planejado",
                    ["Vendedor(a)", "Optometrista", "Gerente", "Recepcionista", "T√©cnico em √ìtica", "Auxiliar Administrativo"],
                    key="cargo_planejado"
                )
                salario_planejado = st.number_input(
                    "Sal√°rio planejado (R$)",
                    min_value=1518.00,
                    value=1600.00,
                    step=100.00,
                    key="salario_planejado"
                )
                tipo_contrato_planejado = st.selectbox(
                    "Tipo de contrato",
                    ["CLT", "MEI", "Prestador de Servi√ßos"],
                    key="tipo_contrato_planejado"
                )
            
            with col2:
                data_admissao_planejada = st.date_input("Data de admiss√£o planejada", key="data_planejada")
                vale_transporte_planejado = st.checkbox("Vale transporte", key="vt_planejado")
                vale_refeicao_planejado = st.number_input(
                    "Vale refei√ß√£o di√°rio (R$)",
                    min_value=0.00,
                    value=25.00,
                    step=5.00,
                    key="vr_planejado"
                )
                plano_saude_planejado = st.checkbox("Plano de sa√∫de", key="plano_planejado")
            
            if st.button("‚ûï Adicionar Funcion√°rio Planejado", type="primary"):
                if nome_planejado:
                    novo_funcionario = {
                        'nome': nome_planejado,
                        'cargo': cargo_planejado,
                        'salario': salario_planejado,
                        'tipo_contrato': tipo_contrato_planejado,
                        'data_admissao': str(data_admissao_planejada),
                        'vale_transporte': vale_transporte_planejado,
                        'vale_refeicao': vale_refeicao_planejado,
                        'plano_saude': plano_saude_planejado,
                        'comissao': 0.0,
                        'escolaridade': 'Ensino M√©dio',
                        'dependentes': 0
                    }
                    st.session_state.business_data['funcionarios_planejados'].append(novo_funcionario)
                    save_user_data()
                    st.success(f"‚úÖ Funcion√°rio {nome_planejado} adicionado com sucesso!")
                    st.rerun()
                else:
                    st.error("‚ö†Ô∏è Por favor, preencha o nome do funcion√°rio.")
        
        # Exibir funcion√°rios planejados
        if st.session_state.business_data['funcionarios_planejados']:
            st.markdown("### üë• Funcion√°rios Planejados Cadastrados")
            
            for i, func in enumerate(st.session_state.business_data['funcionarios_planejados']):
                with st.container():
                    col1, col2, col3 = st.columns([3, 2, 1])
                    
                    with col1:
                        st.markdown(f"**{func['nome']}**")
                        st.caption(f"{func['cargo']} ‚Ä¢ {func['tipo_contrato']} ‚Ä¢ {format_currency(func['salario'])}")
                    
                    with col2:
                        st.markdown(f"**Admiss√£o:** {func['data_admissao']}")
                        beneficios = []
                        if func['vale_transporte']: beneficios.append("VT")
                        if func['vale_refeicao'] > 0: beneficios.append(f"VR R${func['vale_refeicao']:.0f}")
                        if func['plano_saude']: beneficios.append("Plano Sa√∫de")
                        st.caption(f"Benef√≠cios: {', '.join(beneficios) if beneficios else 'Nenhum'}")
                    
                    with col3:
                        if st.button("üóëÔ∏è", key=f"remove_planejado_{i}", help="Remover funcion√°rio"):
                            st.session_state.business_data['funcionarios_planejados'].pop(i)
                            save_user_data()
                            st.rerun()
                    
                    st.divider()
            
            # Resumo de custos
            total_salarios_planejados = sum(func['salario'] for func in st.session_state.business_data['funcionarios_planejados'])
            total_funcionarios_planejados = len(st.session_state.business_data['funcionarios_planejados'])
            
            col_resumo1, col_resumo2, col_resumo3 = st.columns(3)
            
            with col_resumo1:
                st.metric("Total de Funcion√°rios", total_funcionarios_planejados)
            
            with col_resumo2:
                st.metric("Folha Salarial Base", format_currency(total_salarios_planejados))
            
            with col_resumo3:
                # Usar os dados diretamente do session_state
                folha_com_encargos = 0
                
                # Usar dados do session_state
                for func in st.session_state.business_data['funcionarios_planejados']:
                    salario = float(func.get('salario', 0))
                    tipo_contrato = func.get('tipo_contrato', 'CLT')
                    
                    if tipo_contrato == 'CLT':
                        # Calcular encargos detalhados como na aba de custos
                        inss_empresa = salario * 0.20
                        fgts = salario * 0.08
                        ferias = (salario * 1.33) / 12
                        decimo_terceiro = salario / 12
                        outros_encargos = salario * 0.10
                        encargos_total = inss_empresa + fgts + ferias + decimo_terceiro + outros_encargos
                        folha_com_encargos += salario + encargos_total
                    else:
                        # Prestadores sem encargos
                        folha_com_encargos += salario
                
                st.metric("Custo Total Estimado", format_currency(folha_com_encargos))
                
                # Salvar o valor calculado para consist√™ncia entre abas
                st.session_state.business_data['custo_total_estimado'] = folha_com_encargos
                save_user_data()
            
            st.info("üí° **Dica**: Estes funcion√°rios podem ser importados automaticamente para o **DP e Tributa√ß√£o** para c√°lculos detalhados.")
        
        else:
            st.info("üìù Nenhum funcion√°rio planejado cadastrado. Use o formul√°rio acima para adicionar.")
    
    with tab3:
        st.subheader("üìã Pessoas e Parceiros")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Pol√≠ticas Trabalhistas**")
            
            regime_contratacao = st.multiselect(
                "Regimes de contrata√ß√£o que utilizar√°",
                ["CLT", "MEI parceiro", "Presta√ß√£o de servi√ßo", "Est√°gio", "Terceiriza√ß√£o", "Comissionista"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('regime_contratacao', []),
                    ["CLT", "MEI parceiro", "Presta√ß√£o de servi√ßo", "Est√°gio", "Terceiriza√ß√£o", "Comissionista"],
                    ["CLT"]
                )
            )
            # Auto-save regime_contratacao
            if regime_contratacao != st.session_state.business_data.get('regime_contratacao'):
                st.session_state.business_data['regime_contratacao'] = regime_contratacao
                save_user_data()
            
            beneficios_oferecidos = st.multiselect(
                "Benef√≠cios que oferecer√°",
                ["Vale transporte", "Vale alimenta√ß√£o", "Plano de sa√∫de", "Comiss√µes", 
                 "Desconto em produtos", "13¬∫ sal√°rio", "F√©rias", "FGTS"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('beneficios_oferecidos', []),
                    ["Vale transporte", "Vale alimenta√ß√£o", "Plano de sa√∫de", "Comiss√µes", 
                     "Desconto em produtos", "13¬∫ sal√°rio", "F√©rias", "FGTS"],
                    ["Vale transporte", "13¬∫ sal√°rio", "F√©rias", "FGTS"]
                )
            )
            # Auto-save beneficios_oferecidos
            if beneficios_oferecidos != st.session_state.business_data.get('beneficios_oferecidos'):
                st.session_state.business_data['beneficios_oferecidos'] = beneficios_oferecidos
                save_user_data()
            
            politica_comissoes = st.text_area(
                "Pol√≠tica de comiss√µes/metas",
                value=st.session_state.business_data.get('politica_comissoes', ''),
                height=100,
                placeholder="Ex: 3% sobre vendas acima da meta, b√¥nus por satisfa√ß√£o do cliente..."
            )
            # Auto-save politica_comissoes
            if politica_comissoes != st.session_state.business_data.get('politica_comissoes'):
                st.session_state.business_data['politica_comissoes'] = politica_comissoes
                save_user_data()
        
        with col2:
            st.markdown("**Desenvolvimento e Treinamento**")
            
            plano_treinamento = st.multiselect(
                "Treinamentos que oferecer√°",
                ["Atendimento ao cliente", "Conhecimentos em √≥ptica", "Vendas", "Sistema/Software", 
                 "Produtos e marcas", "Ajustes t√©cnicos", "Compliance/Seguran√ßa"],
                default=safe_multiselect_default(
                    st.session_state.business_data.get('plano_treinamento', []),
                    ["Atendimento ao cliente", "Conhecimentos em √≥ptica", "Vendas", "Sistema/Software", 
                     "Produtos e marcas", "Ajustes t√©cnicos", "Compliance/Seguran√ßa"],
                    ["Atendimento ao cliente", "Vendas"]
                )
            )
            # Auto-save plano_treinamento
            if plano_treinamento != st.session_state.business_data.get('plano_treinamento'):
                st.session_state.business_data['plano_treinamento'] = plano_treinamento
                save_user_data()
            
            frequencia_treinamento = st.selectbox(
                "Frequ√™ncia dos treinamentos",
                ["Mensal", "Trimestral", "Semestral", "Anual", "Conforme necessidade"],
                index=["Mensal", "Trimestral", "Semestral", "Anual", "Conforme necessidade"].index(
                    st.session_state.business_data.get('frequencia_treinamento', 'Trimestral')
                )
            )
            # Auto-save frequencia_treinamento
            if frequencia_treinamento != st.session_state.business_data.get('frequencia_treinamento'):
                st.session_state.business_data['frequencia_treinamento'] = frequencia_treinamento
                save_user_data()
            
            avaliacao_desempenho = st.text_area(
                "Sistema de avalia√ß√£o de desempenho",
                value=st.session_state.business_data.get('avaliacao_desempenho', ''),
                height=100,
                placeholder="Como avaliar√° e acompanhar√° o desempenho da equipe?"
            )
            # Auto-save avaliacao_desempenho
            if avaliacao_desempenho != st.session_state.business_data.get('avaliacao_desempenho'):
                st.session_state.business_data['avaliacao_desempenho'] = avaliacao_desempenho
                save_user_data()
    
    with tab3:
        st.subheader("üéØ Sistema de Capta√ß√£o e Comiss√µes")
        st.markdown("Configure comiss√µes diferenciadas por modalidade de venda e tipo de produto")
        
        # Ativar sistema de capta√ß√£o
        usar_sistema_captacao = st.checkbox(
            "Ativar sistema de capta√ß√£o com comiss√µes",
            value=st.session_state.business_data.get('usar_sistema_captacao', False),
            help="Permite configurar comiss√µes diferentes para vendas √† vista e parceladas"
        )
        
        if usar_sistema_captacao != st.session_state.business_data.get('usar_sistema_captacao'):
            st.session_state.business_data['usar_sistema_captacao'] = usar_sistema_captacao
            save_user_data()
        
        if usar_sistema_captacao:
            st.markdown("### üí∞ Configura√ß√£o de Comiss√µes por Modalidade")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üü¢ Vendas √Ä Vista**")
                comissao_avista = st.number_input(
                    "Comiss√£o por venda √† vista (R$)",
                    min_value=0.0,
                    value=float(st.session_state.business_data.get('comissao_avista', 30.0)),
                    step=5.0,
                    format="%.2f",
                    help="Valor fixo pago por cada venda √† vista convertida"
                )
                
                if comissao_avista != st.session_state.business_data.get('comissao_avista'):
                    st.session_state.business_data['comissao_avista'] = comissao_avista
                    save_user_data()
                
                # Tipo de comiss√£o √† vista
                tipo_comissao_avista = st.selectbox(
                    "Tipo de comiss√£o √† vista",
                    ["Valor fixo por venda", "Percentual sobre valor"],
                    index=0 if st.session_state.business_data.get('tipo_comissao_avista', 'Valor fixo por venda') == 'Valor fixo por venda' else 1
                )
                
                if tipo_comissao_avista != st.session_state.business_data.get('tipo_comissao_avista'):
                    st.session_state.business_data['tipo_comissao_avista'] = tipo_comissao_avista
                    save_user_data()
                
                if tipo_comissao_avista == "Percentual sobre valor":
                    percentual_avista = st.number_input(
                        "Percentual sobre vendas √† vista (%)",
                        min_value=0.0,
                        max_value=15.0,
                        value=float(st.session_state.business_data.get('percentual_comissao_avista', 3.0)),
                        step=0.5,
                        format="%.1f"
                    )
                    
                    if percentual_avista != st.session_state.business_data.get('percentual_comissao_avista'):
                        st.session_state.business_data['percentual_comissao_avista'] = percentual_avista
                        save_user_data()
            
            with col2:
                st.markdown("**üü° Vendas Parceladas**")
                comissao_parcelada = st.number_input(
                    "Comiss√£o por venda parcelada (R$)",
                    min_value=0.0,
                    value=float(st.session_state.business_data.get('comissao_parcelada', 20.0)),
                    step=5.0,
                    format="%.2f",
                    help="Valor fixo pago por cada venda parcelada convertida"
                )
                
                if comissao_parcelada != st.session_state.business_data.get('comissao_parcelada'):
                    st.session_state.business_data['comissao_parcelada'] = comissao_parcelada
                    save_user_data()
                
                # Tipo de comiss√£o parcelada
                tipo_comissao_parcelada = st.selectbox(
                    "Tipo de comiss√£o parcelada",
                    ["Valor fixo por venda", "Percentual sobre valor"],
                    index=0 if st.session_state.business_data.get('tipo_comissao_parcelada', 'Valor fixo por venda') == 'Valor fixo por venda' else 1
                )
                
                if tipo_comissao_parcelada != st.session_state.business_data.get('tipo_comissao_parcelada'):
                    st.session_state.business_data['tipo_comissao_parcelada'] = tipo_comissao_parcelada
                    save_user_data()
                
                if tipo_comissao_parcelada == "Percentual sobre valor":
                    percentual_parcelada = st.number_input(
                        "Percentual sobre vendas parceladas (%)",
                        min_value=0.0,
                        max_value=15.0,
                        value=float(st.session_state.business_data.get('percentual_comissao_parcelada', 2.0)),
                        step=0.5,
                        format="%.1f"
                    )
                    
                    if percentual_parcelada != st.session_state.business_data.get('percentual_comissao_parcelada'):
                        st.session_state.business_data['percentual_comissao_parcelada'] = percentual_parcelada
                        save_user_data()
            
            # Configura√ß√µes adicionais
            st.markdown("### üéØ Configura√ß√µes Adicionais do Sistema")
            
            col3, col4 = st.columns(2)
            
            with col3:
                st.markdown("**Comiss√µes por Tipo de Produto**")
                
                usar_comissao_produto = st.checkbox(
                    "Diferenciar comiss√£o por tipo de produto",
                    value=st.session_state.business_data.get('usar_comissao_produto', False)
                )
                
                if usar_comissao_produto != st.session_state.business_data.get('usar_comissao_produto'):
                    st.session_state.business_data['usar_comissao_produto'] = usar_comissao_produto
                    save_user_data()
                
                if usar_comissao_produto:
                    comissao_lentes = st.number_input(
                        "Comiss√£o extra por lentes (R$)",
                        min_value=0.0,
                        value=float(st.session_state.business_data.get('comissao_lentes', 10.0)),
                        step=2.5,
                        format="%.2f"
                    )
                    
                    if comissao_lentes != st.session_state.business_data.get('comissao_lentes'):
                        st.session_state.business_data['comissao_lentes'] = comissao_lentes
                        save_user_data()
                    
                    comissao_armacoes = st.number_input(
                        "Comiss√£o extra por arma√ß√µes (R$)",
                        min_value=0.0,
                        value=float(st.session_state.business_data.get('comissao_armacoes', 5.0)),
                        step=2.5,
                        format="%.2f"
                    )
                    
                    if comissao_armacoes != st.session_state.business_data.get('comissao_armacoes'):
                        st.session_state.business_data['comissao_armacoes'] = comissao_armacoes
                        save_user_data()
            
            with col4:
                st.markdown("**Configura√ß√µes de Pagamento**")
                
                frequencia_pagamento = st.selectbox(
                    "Frequ√™ncia de pagamento das comiss√µes",
                    ["Semanal", "Quinzenal", "Mensal", "Por venda (imediato)"],
                    index=["Semanal", "Quinzenal", "Mensal", "Por venda (imediato)"].index(
                        st.session_state.business_data.get('frequencia_pagamento_comissao', 'Quinzenal')
                    )
                )
                
                if frequencia_pagamento != st.session_state.business_data.get('frequencia_pagamento_comissao'):
                    st.session_state.business_data['frequencia_pagamento_comissao'] = frequencia_pagamento
                    save_user_data()
                
                carencia_pagamento = st.number_input(
                    "Car√™ncia para pagamento (dias)",
                    min_value=0,
                    max_value=30,
                    value=int(st.session_state.business_data.get('carencia_pagamento', 7)),
                    step=1,
                    help="Dias ap√≥s a venda para garantir que n√£o h√° cancelamento"
                )
                
                if carencia_pagamento != st.session_state.business_data.get('carencia_pagamento'):
                    st.session_state.business_data['carencia_pagamento'] = carencia_pagamento
                    save_user_data()
                
                meta_minima = st.number_input(
                    "Meta m√≠nima para receber comiss√£o (vendas/m√™s)",
                    min_value=0,
                    value=int(st.session_state.business_data.get('meta_minima_comissao', 0)),
                    step=1,
                    help="N√∫mero m√≠nimo de vendas no m√™s para receber comiss√£o (0 = sem meta)"
                )
                
                if meta_minima != st.session_state.business_data.get('meta_minima_comissao'):
                    st.session_state.business_data['meta_minima_comissao'] = meta_minima
                    save_user_data()
            
            # Simulador de comiss√µes
            st.markdown("### üìä Simulador de Comiss√µes")
            
            with st.expander("üßÆ Simular Ganhos do Captador"):
                col_sim1, col_sim2, col_sim3 = st.columns(3)
                
                with col_sim1:
                    vendas_avista_sim = st.number_input("Vendas √† vista no m√™s", min_value=0, value=15, step=1)
                    ticket_medio_avista = st.number_input("Ticket m√©dio √† vista (R$)", min_value=0.0, value=450.0, step=50.0)
                
                with col_sim2:
                    vendas_parcelada_sim = st.number_input("Vendas parceladas no m√™s", min_value=0, value=25, step=1)
                    ticket_medio_parcelada = st.number_input("Ticket m√©dio parcelado (R$)", min_value=0.0, value=380.0, step=50.0)
                
                with col_sim3:
                    if usar_comissao_produto:
                        vendas_com_lentes = st.number_input("Vendas com lentes", min_value=0, value=30, step=1)
                        vendas_com_armacoes = st.number_input("Vendas com arma√ß√µes", min_value=0, value=40, step=1)
                
                # Calcular comiss√µes simuladas
                if tipo_comissao_avista == "Valor fixo por venda":
                    total_comissao_avista = vendas_avista_sim * comissao_avista
                else:
                    total_comissao_avista = (vendas_avista_sim * ticket_medio_avista) * (percentual_avista / 100)
                
                if tipo_comissao_parcelada == "Valor fixo por venda":
                    total_comissao_parcelada = vendas_parcelada_sim * comissao_parcelada
                else:
                    total_comissao_parcelada = (vendas_parcelada_sim * ticket_medio_parcelada) * (percentual_parcelada / 100)
                
                total_comissao_produtos = 0
                if usar_comissao_produto:
                    total_comissao_produtos = (vendas_com_lentes * comissao_lentes) + (vendas_com_armacoes * comissao_armacoes)
                
                total_comissao_mensal = total_comissao_avista + total_comissao_parcelada + total_comissao_produtos
                
                st.markdown("**Resultado da Simula√ß√£o:**")
                st.write(f"‚Ä¢ Comiss√£o vendas √† vista: R$ {total_comissao_avista:,.2f}")
                st.write(f"‚Ä¢ Comiss√£o vendas parceladas: R$ {total_comissao_parcelada:,.2f}")
                if usar_comissao_produto:
                    st.write(f"‚Ä¢ Comiss√£o produtos extras: R$ {total_comissao_produtos:,.2f}")
                st.markdown(f"**Total mensal: R$ {total_comissao_mensal:,.2f}**")
                
                # Salvar proje√ß√£o de comiss√µes
                st.session_state.business_data['projecao_comissoes_mensal'] = total_comissao_mensal
                save_user_data()
        
        else:
            st.info("üìã Sistema de capta√ß√£o desativado. Ative para configurar comiss√µes diferenciadas.")
    
    with tab4:
        st.subheader("üí∞ Custos Trabalhistas Calculados Automaticamente")
        
        # Buscar dados dos funcion√°rios planejados
        funcionarios_planejados = st.session_state.business_data.get('funcionarios_planejados', [])
        
        if funcionarios_planejados:
            st.success(f"üìä **Calculando custos baseado em {len(funcionarios_planejados)} funcion√°rios planejados**")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Breakdown por Funcion√°rio:**")
                
                total_salarios_base = 0
                total_encargos = 0
                
                for i, func in enumerate(funcionarios_planejados):
                    nome = func.get('nome', f'Funcion√°rio {i+1}')
                    cargo = func.get('cargo', 'N/A')
                    salario = float(func.get('salario', 0))
                    tipo_contrato = func.get('tipo_contrato', 'CLT')
                    
                    if salario > 0:
                        # Verificar tipo de contrato para aplicar encargos corretos
                        if tipo_contrato == 'CLT':
                            # C√°lculo de encargos CLT
                            inss_empresa = salario * 0.20  # INSS empresa
                            fgts = salario * 0.08          # FGTS
                            ferias = (salario * 1.33) / 12 # F√©rias + 1/3
                            decimo_terceiro = salario / 12  # 13¬∫ sal√°rio
                            outros_encargos = salario * 0.10 # Provis√µes e outros
                            
                            encargos_funcionario = inss_empresa + fgts + ferias + decimo_terceiro + outros_encargos
                            custo_total_funcionario = salario + encargos_funcionario
                            
                            with st.expander(f"üíº {nome} - {cargo} (CLT)"):
                                st.write(f"‚Ä¢ Sal√°rio base: {format_currency(salario)}")
                                st.write(f"‚Ä¢ INSS empresa: {format_currency(inss_empresa)}")
                                st.write(f"‚Ä¢ FGTS: {format_currency(fgts)}")
                                st.write(f"‚Ä¢ F√©rias + 1/3: {format_currency(ferias)}")
                                st.write(f"‚Ä¢ 13¬∫ sal√°rio: {format_currency(decimo_terceiro)}")
                                st.write(f"‚Ä¢ Outros encargos: {format_currency(outros_encargos)}")
                                st.markdown(f"**Custo total: {format_currency(custo_total_funcionario)}**")
                        
                        else:
                            # Prestador de servi√ßos - sem encargos trabalhistas
                            encargos_funcionario = 0
                            custo_total_funcionario = salario
                            
                            with st.expander(f"üíº {nome} - {cargo} (Prestador de Servi√ßos)"):
                                st.write(f"‚Ä¢ Valor do servi√ßo: {format_currency(salario)}")
                                st.write("‚Ä¢ Sem encargos trabalhistas (prestador de servi√ßos)")
                                st.markdown(f"**Custo total: {format_currency(custo_total_funcionario)}**")
                        
                        total_salarios_base += salario
                        total_encargos += encargos_funcionario
            
            with col2:
                st.markdown("**Resumo dos Custos Trabalhistas:**")
                
                # Usar os mesmos totais calculados no loop anterior para consist√™ncia
                folha_total_com_encargos = total_salarios_base + total_encargos
                
                # Separar CLT de Prestadores para an√°lise detalhada
                total_clt = 0
                total_prestadores = 0
                encargos_clt = 0
                
                for func in st.session_state.business_data.get('funcionarios_planejados', []):
                    salario = float(func.get('salario', 0))
                    tipo_contrato = func.get('tipo_contrato', 'CLT')
                    
                    if tipo_contrato == 'CLT':
                        total_clt += salario
                        # Usar exatamente o mesmo c√°lculo do primeiro loop
                        inss_empresa = salario * 0.20
                        fgts = salario * 0.08
                        ferias = (salario * 1.33) / 12
                        decimo_terceiro = salario / 12
                        outros_encargos = salario * 0.10
                        encargos_func = inss_empresa + fgts + ferias + decimo_terceiro + outros_encargos
                        encargos_clt += encargos_func
                    else:
                        total_prestadores += salario
                
                # Verificar se os totais batem
                folha_total_verificacao = total_clt + total_prestadores + encargos_clt
                if abs(folha_total_com_encargos - folha_total_verificacao) > 0.01:
                    # Usar o c√°lculo verificado para garantir consist√™ncia
                    folha_total_com_encargos = folha_total_verificacao
                
                # An√°lise separada
                st.markdown("**üíº Funcion√°rios CLT:**")
                if total_clt > 0:
                    st.metric("Sal√°rios CLT", format_currency(total_clt))
                    st.metric("Encargos CLT", format_currency(encargos_clt), 
                             f"{(encargos_clt/total_clt*100):.1f}% dos sal√°rios")
                else:
                    st.info("Nenhum funcion√°rio CLT")
                
                st.markdown("**ü§ù Prestadores de Servi√ßos:**")
                if total_prestadores > 0:
                    st.metric("Total Prestadores", format_currency(total_prestadores))
                    st.caption("Sem encargos trabalhistas")
                else:
                    st.info("Nenhum prestador de servi√ßos")
                
                st.markdown("---")
                st.metric("üíº **Custo Total Mensal**", format_currency(folha_total_com_encargos))
                
                # Proje√ß√£o anual
                folha_anual = folha_total_com_encargos * 12
                st.metric("üìÖ Proje√ß√£o Anual", format_currency(folha_anual))
                
                # An√°lise de impacto no faturamento
                vendas_mes_1 = st.session_state.business_data.get('vendas_mes_1', 25000)
                if vendas_mes_1 > 0:
                    percentual_faturamento = (folha_total_com_encargos / vendas_mes_1) * 100
                    st.info(f"üìà **A folha representa {percentual_faturamento:.1f}% do faturamento mensal**")
                    
                    if percentual_faturamento > 30:
                        st.warning("‚ö†Ô∏è Folha alta (>30% do faturamento). Considere otimizar.")
                    elif percentual_faturamento < 15:
                        st.success("‚úÖ Folha equilibrada (<15% do faturamento)")
                    else:
                        st.info("‚ÑπÔ∏è Folha dentro da m√©dia (15-30% do faturamento)")
                
                # Salvar dados calculados automaticamente
                st.session_state.business_data.update({
                    'folha_total_com_encargos': folha_total_com_encargos,
                    'folha_anual': folha_anual,
                    'total_salarios_clt': total_clt,
                    'total_prestadores': total_prestadores,
                    'total_encargos_clt': encargos_clt,
                    'total_salarios_base': total_salarios_base,
                    'total_encargos': total_encargos
                })
                save_user_data()
        
        else:
            st.info("üìù **Primeiro planeje sua equipe na aba 'Estrutura da Equipe'**")
            st.write("Depois os custos trabalhistas ser√£o calculados automaticamente aqui.")
            
            # Calculadora simples para refer√™ncia
            with st.expander("üßÆ Calculadora de Refer√™ncia (apenas para simular)"):
                st.markdown("**Use para entender custos antes de planejar a equipe:**")
                
                salario_referencia = st.number_input(
                    "Sal√°rio para simular (R$)",
                    min_value=1518.0,  # Sal√°rio m√≠nimo 2025
                    value=2000.0,
                    step=100.0,
                    format="%.0f",
                    help="Este √© apenas um exemplo para voc√™ entender os custos"
                )
                
                if salario_referencia > 0:
                    # C√°lculo dos encargos
                    inss_empresa = salario_referencia * 0.20
                    fgts = salario_referencia * 0.08
                    ferias = (salario_referencia * 1.33) / 12
                    decimo_terceiro = salario_referencia / 12
                    outros_encargos = salario_referencia * 0.10
                    
                    encargos_total = inss_empresa + fgts + ferias + decimo_terceiro + outros_encargos
                    custo_total = salario_referencia + encargos_total
                    percentual = (encargos_total / salario_referencia) * 100
                    
                    st.write(f"‚Ä¢ Sal√°rio: {format_currency(salario_referencia)}")
                    st.write(f"‚Ä¢ Encargos: {format_currency(encargos_total)} ({percentual:.1f}%)")
                    st.write(f"‚Ä¢ **Custo total: {format_currency(custo_total)}**")
                    st.caption("üí° Esta √© apenas uma simula√ß√£o. Os valores reais vir√£o dos funcion√°rios planejados.")
    
    # Store all data
    st.session_state.business_data.update({
        'num_funcionarios': num_funcionarios,
        'cargos_necessarios': cargos_necessarios,
        'perfil_funcionarios': perfil_funcionarios,
        'estrategia_contratacao': estrategia_contratacao,
        'jornada_trabalho': jornada_trabalho,
        'escala_trabalho': escala_trabalho,
        'faixa_salarial': faixa_salarial,
        'plano_crescimento_equipe': plano_crescimento_equipe,
        'regime_contratacao': regime_contratacao,
        'beneficios_oferecidos': beneficios_oferecidos,
        'politica_comissoes': politica_comissoes,
        'plano_treinamento': plano_treinamento,
        'frequencia_treinamento': frequencia_treinamento,
        'avaliacao_desempenho': avaliacao_desempenho
    })
    
    # Auto-save
    save_user_data()
    
    st.markdown("---")
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step8"):
            st.session_state.step = 7
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step8"):
            st.session_state.step = 9
            st.rerun()

def show_step_9():
    """Etapa 9: Investimento Inicial"""
    st.header("9Ô∏è‚É£ Investimento Inicial")
    st.markdown("**FASE 9: INVESTIMENTO** - Calcule todos os custos de abertura")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üí∞ Custos de Instala√ß√£o")
        
        # Usar valor do sum√°rio executivo se dispon√≠vel
        custos_reforma_obj = st.session_state.business_data.get('custos_reforma', {})
        reforma_automatica = custos_reforma_obj.get('custo_total_com_adicional', 0) if custos_reforma_obj else 0
        
        if reforma_automatica > 0:
            st.info(f"üí° Valor autom√°tico do Sum√°rio Executivo: {format_currency(reforma_automatica)}")
            # Persistir estado do checkbox
            checkbox_state = st.session_state.business_data.get('usar_reforma_auto', True)
            usar_automatico = st.checkbox("Usar valor calculado automaticamente", value=checkbox_state, key="usar_reforma_auto")
            
            # Salvar estado do checkbox
            if usar_automatico != st.session_state.business_data.get('usar_reforma_auto'):
                st.session_state.business_data['usar_reforma_auto'] = usar_automatico
                save_user_data()
            
            if usar_automatico:
                reforma_loja = reforma_automatica
                st.metric("Reforma/adequa√ß√£o (autom√°tica)", format_currency(reforma_loja))
            else:
                reforma_loja = st.number_input(
                    "Reforma/adequa√ß√£o da loja (R$) - Manual",
                    min_value=0.0,
                    value=float(st.session_state.business_data.get('reforma_loja_manual', reforma_automatica)),
                    step=1000.0,
                    format="%.0f",
                    key="reforma_loja_manual_input"
                )
                # Salvar valor manual separadamente
                if reforma_loja != st.session_state.business_data.get('reforma_loja_manual'):
                    st.session_state.business_data['reforma_loja_manual'] = reforma_loja
        else:
            st.warning("‚ö†Ô∏è Configure a reforma no Sum√°rio Executivo (Etapa 1) para c√°lculo autom√°tico")
            reforma_loja = st.number_input(
                "Reforma/adequa√ß√£o da loja (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('reforma_loja', 15000)),
                step=1000.0,
                format="%.0f"
            )
        
        if reforma_loja != st.session_state.business_data.get('reforma_loja'):
            st.session_state.business_data['reforma_loja'] = reforma_loja
            save_user_data()
        
        # Usar valor do plano operacional se dispon√≠vel
        equipamentos_automatico = st.session_state.business_data.get('investimento_equipamentos', 0)
        
        if equipamentos_automatico > 0:
            st.info(f"üí° Valor do Plano Operacional: {format_currency(equipamentos_automatico)}")
            # Persistir estado do checkbox
            checkbox_equip_state = st.session_state.business_data.get('usar_equip_auto', True)
            usar_equip_auto = st.checkbox("Usar valor do Plano Operacional", value=checkbox_equip_state, key="usar_equip_auto")
            
            # Salvar estado do checkbox
            if usar_equip_auto != st.session_state.business_data.get('usar_equip_auto'):
                st.session_state.business_data['usar_equip_auto'] = usar_equip_auto
                save_user_data()
            
            if usar_equip_auto:
                equipamentos_total = equipamentos_automatico
                st.metric("Equipamentos (autom√°tico)", format_currency(equipamentos_total))
            else:
                equipamentos_total = st.number_input(
                    "Equipamentos e mobili√°rio (R$) - Manual",
                    min_value=0.0,
                    value=float(st.session_state.business_data.get('equipamentos_total_manual', equipamentos_automatico)),
                    step=1000.0,
                    format="%.0f",
                    key="equipamentos_total_manual_input"
                )
                # Salvar valor manual separadamente
                if equipamentos_total != st.session_state.business_data.get('equipamentos_total_manual'):
                    st.session_state.business_data['equipamentos_total_manual'] = equipamentos_total
        else:
            equipamentos_total = st.number_input(
                "Equipamentos e mobili√°rio (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('equipamentos_total', 12000)),
                step=1000.0,
                format="%.0f"
            )
        
        if equipamentos_total != st.session_state.business_data.get('equipamentos_total'):
            st.session_state.business_data['equipamentos_total'] = equipamentos_total
            save_user_data()
        
        # Estoque inicial - vem da etapa Produtos e Servi√ßos
        estoque_automatico = st.session_state.business_data.get('estoque_inicial', 0)
        # Verifica se existe no context da etapa atual para evitar conflito
        estoque_atual_contexto = float(st.session_state.business_data.get('estoque_inicial_investimento', 0))
        
        # Se j√° foi definido no contexto do investimento, usa esse valor
        if estoque_atual_contexto > 0 and estoque_atual_contexto != estoque_automatico:
            estoque_automatico = estoque_atual_contexto
        
        if estoque_automatico > 0:
            st.info(f"üí° Valor da etapa Produtos e Servi√ßos: {format_currency(estoque_automatico)}")
            # Persistir estado do checkbox
            checkbox_estoque_state = st.session_state.business_data.get('usar_estoque_auto', True)
            usar_estoque_auto = st.checkbox("Usar valor da etapa Produtos e Servi√ßos", value=checkbox_estoque_state, key="usar_estoque_auto")
            
            # Salvar estado do checkbox
            if usar_estoque_auto != st.session_state.business_data.get('usar_estoque_auto'):
                st.session_state.business_data['usar_estoque_auto'] = usar_estoque_auto
                save_user_data()
            
            if usar_estoque_auto:
                estoque_inicial = estoque_automatico
                st.metric("Estoque inicial (autom√°tico)", format_currency(estoque_inicial))
            else:
                estoque_inicial = st.number_input(
                    "Estoque inicial (R$) - Manual",
                    min_value=0.0,
                    value=float(st.session_state.business_data.get('estoque_inicial_manual', estoque_automatico)),
                    step=1000.0,
                    format="%.0f",
                    key="estoque_inicial_manual_input"
                )
                # Salvar valor manual separadamente
                if estoque_inicial != st.session_state.business_data.get('estoque_inicial_manual'):
                    st.session_state.business_data['estoque_inicial_manual'] = estoque_inicial
        else:
            estoque_inicial = st.number_input(
                "Estoque inicial (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('estoque_inicial', 25000)),
                step=1000.0,
                format="%.0f"
            )
        
        if estoque_inicial != st.session_state.business_data.get('estoque_inicial'):
            st.session_state.business_data['estoque_inicial'] = estoque_inicial
            save_user_data()
        
        # Capital de giro - calcular automaticamente baseado no faturamento
        objetivo_faturamento = st.session_state.business_data.get('objetivo_faturamento', 0)
        capital_giro_automatico = objetivo_faturamento * 3 if objetivo_faturamento > 0 else 0  # 3 meses
        
        if capital_giro_automatico > 0:
            st.info(f"üí° Sugest√£o: 3 meses de faturamento = {format_currency(capital_giro_automatico)}")
            # Persistir estado do checkbox
            checkbox_capital_state = st.session_state.business_data.get('usar_capital_auto', True)
            usar_capital_auto = st.checkbox("Usar 3 meses de faturamento objetivo", value=checkbox_capital_state, key="usar_capital_auto")
            
            # Salvar estado do checkbox
            if usar_capital_auto != st.session_state.business_data.get('usar_capital_auto'):
                st.session_state.business_data['usar_capital_auto'] = usar_capital_auto
                save_user_data()
            
            if usar_capital_auto:
                capital_giro = capital_giro_automatico
                st.metric("Capital de giro (autom√°tico)", format_currency(capital_giro))
            else:
                capital_giro = st.number_input(
                    "Capital de giro (3-6 meses) (R$) - Manual",
                    min_value=0.0,
                    value=float(st.session_state.business_data.get('capital_giro_manual', capital_giro_automatico)),
                    step=1000.0,
                    format="%.0f",
                    key="capital_giro_manual_input"
                )
                # Salvar valor manual separadamente
                if capital_giro != st.session_state.business_data.get('capital_giro_manual'):
                    st.session_state.business_data['capital_giro_manual'] = capital_giro
        else:
            capital_giro = st.number_input(
                "Capital de giro (3-6 meses) (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('capital_giro', 18000)),
                step=1000.0,
                format="%.0f"
            )
        
        if capital_giro != st.session_state.business_data.get('capital_giro'):
            st.session_state.business_data['capital_giro'] = capital_giro
            save_user_data()
    
    with col2:
        st.subheader("üìä Custos Legais e Marketing")
        
        # Abertura da empresa - pode vir do plano operacional
        abertura_automatica = st.session_state.business_data.get('custos_licencas', 0)
        if abertura_automatica == 0:
            abertura_automatica = st.session_state.business_data.get('licencas_alvara', 0)
        
        if abertura_automatica > 0:
            st.info(f"üí° Valor do Plano Operacional: {format_currency(abertura_automatica)}")
            # Persistir estado do checkbox
            checkbox_abertura_state = st.session_state.business_data.get('usar_abertura_auto', True)
            usar_abertura_auto = st.checkbox("Usar valor do Plano Operacional", value=checkbox_abertura_state, key="usar_abertura_auto")
            
            # Salvar estado do checkbox
            if usar_abertura_auto != st.session_state.business_data.get('usar_abertura_auto'):
                st.session_state.business_data['usar_abertura_auto'] = usar_abertura_auto
                save_user_data()
            
            if usar_abertura_auto:
                abertura_empresa = abertura_automatica
                st.metric("Abertura/licen√ßas (autom√°tica)", format_currency(abertura_empresa))
            else:
                abertura_empresa = st.number_input(
                    "Abertura da empresa/licen√ßas (R$) - Manual",
                    min_value=0.0,
                    value=float(st.session_state.business_data.get('abertura_empresa_manual', abertura_automatica)),
                    step=500.0,
                    format="%.0f",
                    key="abertura_empresa_manual_input"
                )
                # Salvar valor manual separadamente
                if abertura_empresa != st.session_state.business_data.get('abertura_empresa_manual'):
                    st.session_state.business_data['abertura_empresa_manual'] = abertura_empresa
        else:
            abertura_empresa = st.number_input(
                "Abertura da empresa/licen√ßas (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('abertura_empresa', 3000)),
                step=500.0,
                format="%.0f"
            )
        
        if abertura_empresa != st.session_state.business_data.get('abertura_empresa'):
            st.session_state.business_data['abertura_empresa'] = abertura_empresa
            save_user_data()
        
        # Marketing de lan√ßamento - pode vir da estrat√©gia de marketing
        marketing_automatico = st.session_state.business_data.get('orcamento_marketing_inicial', 0)
        if marketing_automatico == 0:
            marketing_automatico = st.session_state.business_data.get('investimento_marketing_lancamento', 0)
        
        if marketing_automatico > 0:
            st.info(f"üí° Valor da Estrat√©gia de Marketing: {format_currency(marketing_automatico)}")
            # Persistir estado do checkbox
            checkbox_marketing_state = st.session_state.business_data.get('usar_marketing_auto', True)
            usar_marketing_auto = st.checkbox("Usar valor da Estrat√©gia de Marketing", value=checkbox_marketing_state, key="usar_marketing_auto")
            
            # Salvar estado do checkbox
            if usar_marketing_auto != st.session_state.business_data.get('usar_marketing_auto'):
                st.session_state.business_data['usar_marketing_auto'] = usar_marketing_auto
                save_user_data()
            
            if usar_marketing_auto:
                marketing_lancamento = marketing_automatico
                st.metric("Marketing (autom√°tico)", format_currency(marketing_lancamento))
            else:
                marketing_lancamento = st.number_input(
                    "Marketing de lan√ßamento (R$) - Manual",
                    min_value=0.0,
                    value=float(st.session_state.business_data.get('marketing_lancamento_manual', marketing_automatico)),
                    step=500.0,
                    format="%.0f",
                    key="marketing_lancamento_manual_input"
                )
                # Salvar valor manual separadamente
                if marketing_lancamento != st.session_state.business_data.get('marketing_lancamento_manual'):
                    st.session_state.business_data['marketing_lancamento_manual'] = marketing_lancamento
        else:
            marketing_lancamento = st.number_input(
                "Marketing de lan√ßamento (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('marketing_lancamento', 2000)),
                step=500.0,
                format="%.0f"
            )
        
        if marketing_lancamento != st.session_state.business_data.get('marketing_lancamento'):
            st.session_state.business_data['marketing_lancamento'] = marketing_lancamento
            save_user_data()
        
        seguros_iniciais = st.number_input(
            "Seguros e garantias (R$)",
            min_value=0.0,
            value=float(st.session_state.business_data.get('seguros_iniciais', 1500)),
            step=500.0,
            format="%.0f"
        )
        if seguros_iniciais != st.session_state.business_data.get('seguros_iniciais'):
            st.session_state.business_data['seguros_iniciais'] = seguros_iniciais
            save_user_data()
        
        contingencia = st.number_input(
            "Reserva de conting√™ncia (R$)",
            min_value=0.0,
            value=float(st.session_state.business_data.get('contingencia', 5000)),
            step=1000.0,
            format="%.0f"
        )
        if contingencia != st.session_state.business_data.get('contingencia'):
            st.session_state.business_data['contingencia'] = contingencia
            save_user_data()
    
    # Usar valores finais corretos (manual ou autom√°tico)
    reforma_final = reforma_loja
    equipamentos_final = equipamentos_total  
    estoque_final = estoque_inicial
    capital_final = capital_giro
    abertura_final = abertura_empresa
    marketing_final = marketing_lancamento
    
    # C√°lculo total
    investimento_total = reforma_final + equipamentos_final + estoque_final + capital_final + abertura_final + marketing_final + seguros_iniciais + contingencia
    
    st.markdown("---")
    st.subheader("üíØ Resumo do Investimento")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Investimento Fixo", format_currency(reforma_loja + equipamentos_total))
        st.metric("Investimento Vari√°vel", format_currency(estoque_inicial + capital_giro))
    
    with col2:
        st.metric("Custos Iniciais", format_currency(abertura_empresa + marketing_lancamento + seguros_iniciais))
        st.metric("Conting√™ncia", format_currency(contingencia))
    
    with col3:
        st.metric("**INVESTIMENTO TOTAL**", format_currency(investimento_total), delta=None)
        
        # Explica√ß√£o simples em reais
        if investimento_total > 0:
            valor_fixo = reforma_loja + equipamentos_total
            valor_estoque = estoque_inicial
            st.caption(f"üí° Dinheiro para reforma/equipamentos: {format_currency(valor_fixo)}")
            st.caption(f"üí° Dinheiro para produtos na loja: {format_currency(valor_estoque)}")
    
    # Store total
    st.session_state.business_data['investimento_total'] = investimento_total
    save_user_data()
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step9"):
            st.session_state.step = 8
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step9"):
            st.session_state.step = 10
            st.rerun()

def show_step_10():
    """Etapa 10: Proje√ß√µes Financeiras"""
    st.header("üìä Etapa 10: Proje√ß√µes Financeiras")
    st.markdown("**FASE 3: FINAN√áAS** - Calcule receitas, custos e lucratividade")
    
    # Import pandas no in√≠cio da fun√ß√£o
    import pandas as pd
    
    # Carregar dados salvos
    vendas_mes_1 = st.session_state.business_data.get('vendas_mes_1', 20831)
    crescimento_mensal = st.session_state.business_data.get('crescimento_mensal', 2.0)
    ticket_medio = st.session_state.business_data.get('ticket_medio', 180)
    
    # Abas para organizar o conte√∫do
    tab1, tab2, tab3, tab4 = st.tabs(["üí∞ Receitas", "üí∏ Custos", "üìä DRE M√™s a M√™s", "üí∏ Fluxo de Caixa"])
    
    with tab1:
        st.subheader("üí∞ Proje√ß√£o de Receitas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            vendas_mes_1 = st.number_input(
                "Vendas no primeiro m√™s (R$)",
                min_value=1000.0,
                value=float(vendas_mes_1),
                step=500.0,
                format="%.0f"
            )
            if vendas_mes_1 != st.session_state.business_data.get('vendas_mes_1'):
                st.session_state.business_data['vendas_mes_1'] = vendas_mes_1
                save_user_data()
            
            crescimento_mensal = st.slider(
                "Crescimento mensal (%)",
                min_value=0.0,
                max_value=10.0,
                value=float(crescimento_mensal),
                step=0.5
            )
            if crescimento_mensal != st.session_state.business_data.get('crescimento_mensal'):
                st.session_state.business_data['crescimento_mensal'] = crescimento_mensal
                save_user_data()
        
        with col2:
            ticket_medio = st.number_input(
                "Ticket m√©dio (R$)",
                min_value=50.0,
                value=max(50.0, float(ticket_medio)),
                step=10.0,
                format="%.0f"
            )
            if ticket_medio != st.session_state.business_data.get('ticket_medio'):
                st.session_state.business_data['ticket_medio'] = ticket_medio
                save_user_data()
            
            vendas_quantidade = vendas_mes_1 / ticket_medio if ticket_medio > 0 else 0
            st.metric("Vendas por m√™s", f"{vendas_quantidade:.0f} unidades")
        
        # Proje√ß√£o anual
        receita_anual = vendas_mes_1 * 12 * (1 + crescimento_mensal/100 * 6)  # Crescimento m√©dio
        st.session_state.business_data['receita_anual'] = receita_anual
        st.metric("Receita Anual Projetada", format_currency(receita_anual))
        
        # An√°lise de sazonalidade
        st.markdown("### üìà An√°lise de Sazonalidade")
        col_saz1, col_saz2 = st.columns(2)
        
        with col_saz1:
            meses_alta = st.multiselect(
                "Meses de alta temporada",
                ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
                 "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
                default=st.session_state.business_data.get('meses_alta', ["Janeiro", "Fevereiro", "Dezembro"])
            )
            if meses_alta != st.session_state.business_data.get('meses_alta'):
                st.session_state.business_data['meses_alta'] = meses_alta
                save_user_data()
        
        with col_saz2:
            incremento_alta = st.slider(
                "Incremento na alta temporada (%)",
                min_value=0,
                max_value=50,
                value=st.session_state.business_data.get('incremento_alta', 25),
                step=5
            )
            if incremento_alta != st.session_state.business_data.get('incremento_alta'):
                st.session_state.business_data['incremento_alta'] = incremento_alta
                save_user_data()
        
        # Proje√ß√£o com sazonalidade
        receita_com_sazonalidade = 0
        for mes in range(12):
            mes_nome = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
                       "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"][mes]
            
            if mes == 0:
                receita_mes = vendas_mes_1
            else:
                receita_mes = vendas_mes_1 * (1 + crescimento_mensal/100) ** mes
            
            if mes_nome in meses_alta:
                receita_mes *= (1 + incremento_alta/100)
            
            receita_com_sazonalidade += receita_mes
        
        st.session_state.business_data['receita_com_sazonalidade'] = receita_com_sazonalidade
        st.metric("Receita Anual com Sazonalidade", format_currency(receita_com_sazonalidade))
    
    with tab2:
        st.subheader("üí∏ Estrutura de Custos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Custos Fixos Mensais**")
            
            # Calcular custos separados por tipo
            folha_clt_total = 0
            servicos_prestadores_total = 0
            
            if hasattr(st.session_state, 'funcionarios') and st.session_state.funcionarios:
                for func in st.session_state.funcionarios:
                    if func['tipo_contrato'] == 'CLT':
                        folha_clt_total += func['salario_base'] * 1.68  # CLT com encargos
                    else:
                        servicos_prestadores_total += func['salario_base']  # MEI/Prestador
            
            # Calcular aluguel sugerido baseado no plano operacional
            area_loja = st.session_state.business_data.get('area_loja', 0)
            cidade = st.session_state.business_data.get('cidade', '')
            aluguel_sugerido = 3500  # valor padr√£o
            if area_loja > 0:
                # Estimativa baseada na √°rea e localiza√ß√£o
                preco_m2 = {"S√£o Paulo": 80, "Rio de Janeiro": 70, "Fortaleza": 35, "Salvador": 40}.get(cidade, 50)
                aluguel_sugerido = area_loja * preco_m2
            
            # Auto-aplicar valores integrados se ainda n√£o foram definidos
            if folha_clt_total > 0 and st.session_state.business_data.get('salarios_clt', 0) <= 0:
                st.session_state.business_data['salarios_clt'] = folha_clt_total
                save_user_data()
            
            if servicos_prestadores_total > 0 and st.session_state.business_data.get('total_optometrista', 0) <= 0:
                st.session_state.business_data['total_optometrista'] = servicos_prestadores_total
                save_user_data()
            
            # Para aluguel, s√≥ aplicar sugest√£o se nunca foi definido (None)
            if area_loja > 0 and 'aluguel' not in st.session_state.business_data:
                st.session_state.business_data['aluguel'] = aluguel_sugerido
                save_user_data()
            
            # Usar dados salvos, incluindo zero se foi explicitamente definido
            aluguel_salvo = st.session_state.business_data.get('aluguel', None)
            if aluguel_salvo is not None:
                aluguel_default = aluguel_salvo  # Usar valor salvo (incluindo zero)
            else:
                aluguel_default = aluguel_sugerido  # Usar sugest√£o apenas se nunca foi salvo
            
            # Priorizar sempre o valor calculado do DP se dispon√≠vel para CLT
            if folha_clt_total > 0:
                salarios_clt_default = folha_clt_total
                if st.session_state.business_data.get('salarios_clt', 0) != folha_clt_total:
                    st.session_state.business_data['salarios_clt'] = folha_clt_total
                    save_user_data()
            else:
                salarios_clt_salvo = st.session_state.business_data.get('salarios_clt', 0)
                salarios_clt_default = salarios_clt_salvo  # Usar valor salvo, mesmo se for zero
            
            # Priorizar sempre o valor calculado do DP se dispon√≠vel para prestadores
            if servicos_prestadores_total > 0:
                servicos_default = servicos_prestadores_total
                if st.session_state.business_data.get('total_optometrista', 0) != servicos_prestadores_total:
                    st.session_state.business_data['total_optometrista'] = servicos_prestadores_total
                    save_user_data()
            else:
                servicos_salvo = st.session_state.business_data.get('total_optometrista', 0)
                servicos_default = servicos_salvo  # Usar valor salvo, mesmo se for zero
            
            # Sistema flex√≠vel de aluguel: mensal ou di√°ria
            st.markdown("**üíº Configura√ß√£o de Aluguel**")
            col_alug1, col_alug2 = st.columns([1, 2])
            
            with col_alug1:
                tipo_aluguel = st.selectbox(
                    "Tipo de Aluguel",
                    ["Mensal", "Di√°ria"],
                    index=0 if st.session_state.business_data.get('tipo_aluguel', 'Mensal') == 'Mensal' else 1,
                    help="Para interior: use di√°ria. Para ponto fixo: use mensal"
                )
                if tipo_aluguel != st.session_state.business_data.get('tipo_aluguel'):
                    st.session_state.business_data['tipo_aluguel'] = tipo_aluguel
                    save_user_data()
            
            with col_alug2:
                if tipo_aluguel == "Mensal":
                    aluguel_valor = st.number_input(
                        "Aluguel mensal (R$)",
                        min_value=0.0,
                        value=float(aluguel_default),
                        step=100.0,
                        format="%.0f",
                        help=f"Sugest√£o baseada na √°rea: {format_currency(aluguel_sugerido)}" if area_loja > 0 else "Valor para ponto fixo"
                    )
                    aluguel_mensal = aluguel_valor
                else:
                    # Aluguel por di√°ria - layout vertical para evitar colunas aninhadas
                    aluguel_diaria = st.number_input(
                        "Valor da di√°ria (R$)",
                        min_value=0.0,
                        value=float(st.session_state.business_data.get('aluguel_diaria', 150)),
                        step=10.0,
                        format="%.0f",
                        help="Valor da di√°ria da sala/espa√ßo no interior"
                    )
                    if aluguel_diaria != st.session_state.business_data.get('aluguel_diaria'):
                        st.session_state.business_data['aluguel_diaria'] = aluguel_diaria
                        save_user_data()
                    
                    # Predefini√ß√µes para facilitar a configura√ß√£o
                    frequencia_opcoes = {
                        "Apenas s√°bados (4 dias/m√™s)": 4,
                        "S√°bados + domingos (8 dias/m√™s)": 8,
                        "Finais de semana + feriados (10 dias/m√™s)": 10,
                        "Dias √∫teis (22 dias/m√™s)": 22,
                        "Personalizado": 0
                    }
                    
                    frequencia_selecionada = st.selectbox(
                        "Frequ√™ncia de trabalho",
                        list(frequencia_opcoes.keys()),
                        index=0,  # Default: apenas s√°bados
                        help="Escolha uma op√ß√£o comum ou personalize"
                    )
                    
                    if frequencia_selecionada == "Personalizado":
                        dias_mes = st.number_input(
                            "Dias por m√™s",
                            min_value=1,
                            max_value=31,
                            value=int(st.session_state.business_data.get('dias_mes_diaria', 4)),
                            help="Digite o n√∫mero exato de dias"
                        )
                    else:
                        dias_mes = frequencia_opcoes[frequencia_selecionada]
                        st.info(f"üìÖ {frequencia_selecionada}")
                    
                    if dias_mes != st.session_state.business_data.get('dias_mes_diaria'):
                        st.session_state.business_data['dias_mes_diaria'] = dias_mes
                        st.session_state.business_data['frequencia_trabalho'] = frequencia_selecionada
                        save_user_data()
                    
                    aluguel_mensal = aluguel_diaria * dias_mes
                    st.info(f"üí° **{dias_mes} dias √ó {format_currency(aluguel_diaria)} = {format_currency(aluguel_mensal)}/m√™s**")
            
            # Salvar o aluguel final calculado
            if aluguel_mensal != st.session_state.business_data.get('aluguel'):
                st.session_state.business_data['aluguel'] = aluguel_mensal
                save_user_data()
                
            # Calculadora de combust√≠vel para trabalho no interior  
            if tipo_aluguel == "Di√°ria":
                st.markdown("**‚õΩ Calculadora de Combust√≠vel (Interior)**")
                with st.expander("üöó Configurar custos de deslocamento", expanded=False):
                    
                    distancia_km = st.number_input(
                        "Dist√¢ncia (km ida/volta)",
                        min_value=0.0,
                        value=float(st.session_state.business_data.get('distancia_km', 0)),
                        step=10.0,
                        help="Dist√¢ncia total ida e volta at√© o local"
                    )
                    if distancia_km != st.session_state.business_data.get('distancia_km'):
                        st.session_state.business_data['distancia_km'] = distancia_km
                        save_user_data()
                    
                    preco_combustivel = st.number_input(
                        "Pre√ßo combust√≠vel (R$/L)",
                        min_value=0.0,
                        value=float(st.session_state.business_data.get('preco_combustivel', 5.50)),
                        step=0.10,
                        format="%.2f",
                        help="Pre√ßo atual do combust√≠vel na regi√£o"
                    )
                    if preco_combustivel != st.session_state.business_data.get('preco_combustivel'):
                        st.session_state.business_data['preco_combustivel'] = preco_combustivel
                        save_user_data()
                    
                    autonomia_km_l = st.number_input(
                        "Autonomia (km/L)",
                        min_value=1.0,
                        value=float(st.session_state.business_data.get('autonomia_km_l', 12.0)),
                        step=0.5,
                        help="Quantos km seu ve√≠culo faz por litro"
                    )
                    if autonomia_km_l != st.session_state.business_data.get('autonomia_km_l'):
                        st.session_state.business_data['autonomia_km_l'] = autonomia_km_l
                        save_user_data()
                    
                    # Calcular custos de combust√≠vel
                    if distancia_km > 0 and preco_combustivel > 0 and autonomia_km_l > 0:
                        dias_mes_combustivel = st.session_state.business_data.get('dias_mes_diaria', 4)
                        litros_necessarios = distancia_km / autonomia_km_l
                        custo_combustivel_dia = litros_necessarios * preco_combustivel
                        custo_combustivel_mes = custo_combustivel_dia * dias_mes_combustivel
                        
                        st.session_state.business_data['custo_combustivel_mensal'] = custo_combustivel_mes
                        save_user_data()
                        
                        st.metric(
                            "üí∞ Combust√≠vel por dia",
                            format_currency(custo_combustivel_dia),
                            f"{litros_necessarios:.1f}L necess√°rios"
                        )
                        st.metric(
                            "üí∞ Combust√≠vel mensal",
                            format_currency(custo_combustivel_mes),
                            f"Para {dias_mes_combustivel} dias"
                        )
                        
                        # Adicionar ao custo total mensal
                        custo_total_com_combustivel = aluguel_mensal + custo_combustivel_mes
                        
                        # Mostrar detalhamento espec√≠fico para frequ√™ncia de trabalho
                        frequencia_texto = st.session_state.business_data.get('frequencia_trabalho', 'Apenas s√°bados (4 dias/m√™s)')
                        st.warning(f"**Custo total mensal: {format_currency(custo_total_com_combustivel)}**")
                        st.info(f"**Baseado em:** {frequencia_texto} + Combust√≠vel {format_currency(custo_combustivel_mes)}")
                    else:
                        custo_combustivel_mes = 0
                        st.session_state.business_data['custo_combustivel_mensal'] = 0
                        save_user_data()
            else:
                # Para aluguel mensal, zerar custos de combust√≠vel
                st.session_state.business_data['custo_combustivel_mensal'] = 0
                save_user_data()
            
            # Campo de sal√°rios CLT separado (pode ser zero no in√≠cio)
            if folha_clt_total > 0:
                help_text_clt = f"‚úÖ Valor integrado do DP: {format_currency(folha_clt_total)} - Funcion√°rios CLT com encargos"
            else:
                help_text_clt = "üí° Pode deixar zero para come√ßar apenas com comissionistas - contrate CLT quando tiver caixa"
            
            salarios_clt = st.number_input(
                "Folha CLT (sal√°rios + encargos) (R$)",
                min_value=0.0,
                value=float(salarios_clt_default),
                step=100.0,
                format="%.0f",
                help=help_text_clt,
                key="salarios_clt_input"
            )
            
            if salarios_clt != st.session_state.business_data.get('salarios_clt'):
                st.session_state.business_data['salarios_clt'] = salarios_clt
                save_user_data()
            
            # Se√ß√£o de Despesas Operacionais - Servi√ßos Profissionais por Di√°ria
            st.markdown("**üë©‚Äç‚öïÔ∏è Servi√ßos Profissionais por Di√°ria**")
            
            # Configura√ß√£o do optometrista por di√°ria
            col_opt1, col_opt2 = st.columns(2)
            
            with col_opt1:
                diaria_optometrista = st.number_input(
                    "Di√°ria Optometrista (R$)",
                    min_value=0.0,
                    value=float(st.session_state.business_data.get('diaria_optometrista', 150.0)),
                    step=10.0,
                    format="%.0f",
                    help="Valor da di√°ria do optometrista (despesa operacional)"
                )
                if diaria_optometrista != st.session_state.business_data.get('diaria_optometrista'):
                    st.session_state.business_data['diaria_optometrista'] = diaria_optometrista
                    save_user_data()
            
            with col_opt2:
                dias_optometrista_mes = st.number_input(
                    "Dias optometrista/m√™s",
                    min_value=0,
                    value=int(st.session_state.business_data.get('dias_optometrista_mes', 4)),
                    step=1,
                    help="Quantos dias por m√™s o optometrista trabalha"
                )
                if dias_optometrista_mes != st.session_state.business_data.get('dias_optometrista_mes'):
                    st.session_state.business_data['dias_optometrista_mes'] = dias_optometrista_mes
                    save_user_data()
            
            # C√°lculo autom√°tico do custo mensal do optometrista
            custo_optometrista_mensal = diaria_optometrista * dias_optometrista_mes
            st.session_state.business_data['custo_optometrista_mensal'] = custo_optometrista_mensal
            save_user_data()
            
            if custo_optometrista_mensal > 0:
                st.info(f"üí∞ **Custo Optometrista:** {dias_optometrista_mes} dias √ó {format_currency(diaria_optometrista)} = **{format_currency(custo_optometrista_mensal)}/m√™s**")
            

            
            # Mostrar breakdown se h√° funcion√°rios
            if folha_clt_total > 0 or servicos_prestadores_total > 0:
                funcionarios_clt = [f for f in st.session_state.funcionarios if f['tipo_contrato'] == 'CLT']
                funcionarios_prestadores = [f for f in st.session_state.funcionarios if f['tipo_contrato'] != 'CLT']
                
                if funcionarios_clt:
                    st.caption(f"üë• CLT: {len(funcionarios_clt)} funcion√°rios = {format_currency(folha_clt_total)}")
                if funcionarios_prestadores:
                    st.caption(f"ü§ù Prestadores: {len(funcionarios_prestadores)} pessoas = {format_currency(servicos_prestadores_total)}")
            
            # Calcular totais separados para clareza cont√°bil
            total_folha_clt = salarios_clt
            total_optometrista = custo_optometrista_mensal
            
            # Salvar apenas optometrista para Sistema Integrado (campo 0)
            st.session_state.business_data['0'] = total_optometrista
            
            # Total geral de pessoal (CLT + Optometrista)
            total_pessoal = total_folha_clt + total_optometrista
            st.session_state.business_data['salarios_total'] = total_pessoal
            
            # Separar despesas operacionais
            st.session_state.business_data['despesas_servicos_profissionais'] = total_optometrista
            
            # Painel de Auditoria de Duplicidades
            st.markdown("---")
            st.markdown("### üîç Auditoria de Duplicidades de Custos")
            
            with st.expander("‚ö†Ô∏è Verificar poss√≠veis duplicidades", expanded=False):
                st.markdown("**An√°lise de Sobreposi√ß√µes Detectadas:**")
                
                duplicidades_encontradas = []
                
                # Verificar se optometrista est√° em dois lugares
                if custo_optometrista_mensal > 0 and servicos_prestadores_total > 0:
                    # Verificar se h√° optometrista no DP tamb√©m
                    funcionarios_dp = st.session_state.get('funcionarios', [])
                    optometrista_no_dp = any('optometrista' in str(f.get('cargo', '')).lower() for f in funcionarios_dp)
                    
                    if optometrista_no_dp:
                        duplicidades_encontradas.append({
                            'tipo': 'Optometrista duplicado',
                            'descricao': f'Optometrista aparece tanto em Servi√ßos Profissionais (R$ {custo_optometrista_mensal:.0f}) quanto no DP',
                            'solucao': 'Remover optometrista do DP e manter apenas em Servi√ßos Profissionais por di√°ria'
                        })
                
                # Verificar duplicidade de aluguel
                aluguel_etapa10 = st.session_state.business_data.get('aluguel', 0)
                outros_fixos = st.session_state.business_data.get('outros_fixos', 0)
                if aluguel_etapa10 > 0 and outros_fixos > 2000:  # Se outros fixos muito alto, pode incluir aluguel
                    duplicidades_encontradas.append({
                        'tipo': 'Poss√≠vel aluguel duplicado',
                        'descricao': f'Aluguel: R$ {aluguel_etapa10:.0f} + Outros fixos muito alto: R$ {outros_fixos:.0f}',
                        'solucao': 'Verificar se outros fixos n√£o incluem aluguel novamente'
                    })
                

                
                # Verificar se marketing est√° duplicado
                orcamento_marketing = st.session_state.business_data.get('orcamento_marketing', 0)
                marketing_outros = st.session_state.business_data.get('marketing', 0)
                if orcamento_marketing > 0 and marketing_outros > 0:
                    duplicidades_encontradas.append({
                        'tipo': 'Marketing duplicado',
                        'descricao': f'Or√ßamento Marketing: R$ {orcamento_marketing:.0f} + Marketing outros: R$ {marketing_outros:.0f}',
                        'solucao': 'Usar apenas um campo para marketing total'
                    })
                
                # Exibir resultados
                if duplicidades_encontradas:
                    st.error(f"üö® **{len(duplicidades_encontradas)} poss√≠veis duplicidades encontradas:**")
                    
                    for i, dup in enumerate(duplicidades_encontradas, 1):
                        st.markdown(f"""
                        **{i}. {dup['tipo']}**
                        - **Problema:** {dup['descricao']}
                        - **Solu√ß√£o:** {dup['solucao']}
                        """)
                        
                        # Bot√£o de corre√ß√£o autom√°tica para optometrista
                        if dup['tipo'] == 'Optometrista duplicado':
                            if st.button(f"üîß Corrigir automaticamente - {dup['tipo']}", key=f"fix_dup_{i}"):
                                # Remover optometrista do DP
                                funcionarios_limpos = [f for f in st.session_state.funcionarios 
                                                     if 'optometrista' not in str(f.get('cargo', '')).lower()]
                                st.session_state.funcionarios = funcionarios_limpos
                                st.success("‚úÖ Optometrista removido do DP - mantido apenas em Servi√ßos Profissionais")
                                st.rerun()
                else:
                    st.success("‚úÖ **Nenhuma duplicidade detectada na estrutura atual**")
                
                # Resumo consolidado dos custos
                st.markdown("---")
                st.markdown("**üìä Resumo Consolidado dos Custos (sem duplicidades):**")
                
                custo_consolidado = {
                    'Aluguel': aluguel_etapa10,
                    'Folha CLT': total_folha_clt,
                    'Optometrista (di√°rias)': total_optometrista,
                    'Outros Custos Fixos': st.session_state.business_data.get('outros_fixos', 0),
                    'Marketing': max(orcamento_marketing, marketing_outros),  # Pegar o maior, n√£o somar
                }
                
                total_consolidado = sum(custo_consolidado.values())
                
                for categoria, valor in custo_consolidado.items():
                    if valor > 0:
                        percentual = (valor / total_consolidado * 100) if total_consolidado > 0 else 0
                        st.markdown(f"‚Ä¢ **{categoria}:** {format_currency(valor)} ({percentual:.1f}%)")
                
                st.markdown(f"**üìç Total Mensal:** {format_currency(total_consolidado)}")
                st.markdown(f"**üìç Total Anual:** {format_currency(total_consolidado * 12)}")
            
            # Painel de integra√ß√£o de dados (apenas se houver dados integrados v√°lidos)
            dados_integrados_validos = []
            
            if folha_clt_total > 0 or servicos_prestadores_total > 0:
                dados_integrados_validos.append("folha")
            if area_loja > 0 and aluguel_sugerido > 0:
                dados_integrados_validos.append("operacional")
            if st.session_state.business_data.get('investimento_total', 0) > 0:
                dados_integrados_validos.append("investimento")
            
            if dados_integrados_validos:
                with st.expander("üìä Dados Integrados do Plano", expanded=False):
                    if folha_clt_total > 0 or servicos_prestadores_total > 0:
                        total_funcionarios = folha_clt_total + servicos_prestadores_total
                        st.success(f"‚úÖ Folha de pagamento integrada: {format_currency(total_funcionarios)}")
                        st.write(f"   {len(st.session_state.funcionarios)} funcion√°rios do DP")
                        
                        if folha_clt_total > 0:
                            funcionarios_clt = [f for f in st.session_state.funcionarios if f['tipo_contrato'] == 'CLT']
                            st.write(f"   üìã CLT: {len(funcionarios_clt)} funcion√°rios = {format_currency(folha_clt_total)}")
                            for func in funcionarios_clt:
                                custo_total = func['salario_base'] * 1.68
                                st.write(f"      ‚Ä¢ {func['nome']} ({func['cargo']}): {format_currency(custo_total)}")
                        
                        if servicos_prestadores_total > 0:
                            funcionarios_prestadores = [f for f in st.session_state.funcionarios if f['tipo_contrato'] != 'CLT']
                            st.write(f"   ü§ù Prestadores: {len(funcionarios_prestadores)} pessoas = {format_currency(servicos_prestadores_total)}")
                            for func in funcionarios_prestadores:
                                st.write(f"      ‚Ä¢ {func['nome']} ({func['cargo']}): {format_currency(func['salario_base'])}")
                    
                    if area_loja > 0 and aluguel_sugerido > 0:
                        st.success(f"‚úÖ Dados operacionais: {area_loja}m¬≤ em {cidade}")
                        st.write(f"   Aluguel sugerido: {format_currency(aluguel_sugerido)}")
                    
                    investimento_total = st.session_state.business_data.get('investimento_total', 0)
                    if investimento_total > 0:
                        st.success(f"‚úÖ Investimento inicial: {format_currency(investimento_total)}")
                        depreciacao_calc = investimento_total * 0.3 / 120
                        st.write(f"   Deprecia√ß√£o mensal: {format_currency(depreciacao_calc)}")
            else:
                st.info("üí° Complete o DP, Investimento Inicial ou Plano Operacional para ver dados integrados aqui.")
            

            
            # Bot√£o para for√ßar atualiza√ß√£o
            if st.button("Atualizar Custos das Etapas Anteriores", help="For√ßa atualiza√ß√£o com dados do DP, Investimento e Operacional"):
                valores_atualizados = []
                
                # For√ßar atualiza√ß√£o da folha de sal√°rios
                if folha_clt_total > 0 or servicos_prestadores_total > 0:
                    total_folha = folha_clt_total + servicos_prestadores_total
                    st.session_state.business_data['salarios_total'] = total_folha
                    valores_atualizados.append(f"Folha de sal√°rios: {format_currency(total_folha)} (DP)")
                
                # For√ßar atualiza√ß√£o do aluguel
                if area_loja > 0 and cidade:
                    st.session_state.business_data['aluguel'] = aluguel_sugerido
                    valores_atualizados.append(f"Aluguel: {format_currency(aluguel_sugerido)} ({area_loja}m¬≤ em {cidade})")
                
                # Calcular deprecia√ß√£o do investimento
                investimento_total = st.session_state.business_data.get('investimento_total', 0)
                if investimento_total > 0:
                    depreciacao_mensal = investimento_total * 0.3 / 120
                    st.session_state.business_data['depreciacao_mensal'] = depreciacao_mensal
                    valores_atualizados.append(f"Deprecia√ß√£o: {format_currency(depreciacao_mensal)} (investimento)")
                
                if valores_atualizados:
                    save_user_data()
                    st.success("Custos atualizados: " + " | ".join(valores_atualizados))
                    st.rerun()
                else:
                    st.warning("Complete o DP, Investimento Inicial ou Plano Operacional primeiro.")
            

            
            # Calcular outros custos fixos incluindo combust√≠vel e captador
            custo_combustivel_mensal = st.session_state.business_data.get('custo_combustivel_mensal', 0)
            
            # Calcular custo do captador e for√ßar atualiza√ß√£o
            custo_captador_calculado = calcular_custo_captador_mensal()
            if custo_captador_calculado > 0:
                st.session_state.business_data['custo_captador_mensal_calculado'] = custo_captador_calculado
            
            outros_fixos_base = st.session_state.business_data.get('outros_fixos_base', 0)
            
            # Bot√£o para atualizar custos das etapas anteriores
            if st.button("üîÑ Atualizar Custos das Etapas Anteriores", use_container_width=True):
                custo_captador_calculado = calcular_custo_captador_mensal()
                st.session_state.business_data['custo_captador_mensal_calculado'] = custo_captador_calculado
                save_user_data()
                st.success(f"Custo do captador atualizado: {format_currency(custo_captador_calculado)}")
                st.rerun()
            
            if custo_combustivel_mensal > 0 or custo_captador_calculado > 0:
                # Mostrar breakdown quando h√° custos adicionais
                num_cols = 2 + (1 if custo_combustivel_mensal > 0 else 0) + (1 if custo_captador_calculado > 0 else 0)
                cols = st.columns([2] + [1] * (num_cols - 1))
                
                with cols[0]:
                    outros_fixos_input = st.number_input(
                        "Outros custos fixos (R$)",
                        min_value=0.0,
                        value=float(outros_fixos_base),
                        step=100.0,
                        format="%.0f",
                        help="Energia, telefone, internet, seguros"
                    )
                    if outros_fixos_input != outros_fixos_base:
                        st.session_state.business_data['outros_fixos_base'] = outros_fixos_input
                        save_user_data()
                
                col_idx = 1
                if custo_combustivel_mensal > 0:
                    with cols[col_idx]:
                        st.metric(
                            "üöó Combust√≠vel",
                            format_currency(custo_combustivel_mensal),
                            "Interior"
                        )
                    col_idx += 1
                
                if custo_captador_calculado > 0:
                    with cols[col_idx]:
                        st.metric(
                            "üë• Captador",
                            format_currency(custo_captador_calculado),
                            "Gest√£o de Pessoas"
                        )
                        
                        # Mostrar mem√≥ria de c√°lculo
                        if st.button("üîç Mem√≥ria de C√°lculo", key="memoria_captador"):
                            memoria = st.session_state.business_data.get('memoria_calculo_captador', 'C√°lculo n√£o dispon√≠vel')
                            st.code(memoria)
                
                # Apenas outros custos base (n√£o incluir combust√≠vel aqui pois ser√° mostrado separado)
                outros_fixos = outros_fixos_input
                breakdown_parts = [f"Base {format_currency(outros_fixos_input)}"]
                if custo_combustivel_mensal > 0:
                    breakdown_parts.append(f"Combust√≠vel {format_currency(custo_combustivel_mensal)}")
                if custo_captador_calculado > 0:
                    breakdown_parts.append(f"Captador {format_currency(custo_captador_calculado)}")
                
                breakdown_text = f"**Total: {format_currency(outros_fixos)}** = " + " + ".join(breakdown_parts)
                st.info(breakdown_text)
            else:
                # Modo normal sem custos adicionais
                outros_fixos = st.number_input(
                    "Outros custos fixos (R$)",
                    min_value=0.0,
                    value=float(outros_fixos_base),
                    step=100.0,
                    format="%.0f",
                    help="Energia, telefone, internet, seguros"
                )
                if outros_fixos != outros_fixos_base:
                    st.session_state.business_data['outros_fixos_base'] = outros_fixos
                    save_user_data()
            
            # Salvar apenas o combust√≠vel como outros custos
            outros_fixos_final = custo_combustivel_mensal  # Apenas R$ 575,11
            
            if outros_fixos_final != st.session_state.business_data.get('outros_fixos'):
                st.session_state.business_data['outros_fixos'] = outros_fixos_final
                save_user_data()
            
            # Incluir custo do captador nos custos fixos
            custo_captador_mensal = calcular_custo_captador_mensal()
            
            custos_fixos_total = aluguel_mensal + salarios_clt + total_optometrista + custo_captador_mensal + outros_fixos_final
            st.metric("Total Custos Fixos", format_currency(custos_fixos_total))
            
            # Mostrar breakdown dos custos fixos incluindo captador
            if st.checkbox("üìä Mostrar detalhamento dos custos fixos"):
                st.markdown("**Detalhamento dos Custos Fixos:**")
                st.write(f"‚Ä¢ Aluguel: {format_currency(aluguel_mensal)}")
                st.write(f"‚Ä¢ Folha CLT: {format_currency(salarios_clt)}")
                st.write(f"‚Ä¢ Optometrista: {format_currency(total_optometrista)}")
                st.write(f"‚Ä¢ **Captador: {format_currency(custo_captador_mensal)}**")
                st.write(f"‚Ä¢ Outros custos: {format_currency(outros_fixos_final)}")
                st.write(f"**Total: {format_currency(custos_fixos_total)}**")
        
        with col2:
            st.markdown("**Custos Vari√°veis (%)**")
            
            # Calcular CMV automaticamente baseado nos custos reais da precifica√ß√£o
            custo_materiais_fisicos = st.session_state.business_data.get('custo_materiais_fisicos', 89.80)
            ticket_medio = st.session_state.business_data.get('ticket_medio', 180)
            
            if ticket_medio > 0:
                cmv_percentual = (custo_materiais_fisicos / ticket_medio) * 100
            else:
                cmv_percentual = 45.0  # fallback
            
            st.session_state.business_data['cmv_percentual'] = cmv_percentual
            save_user_data()
            
            st.success(f"‚úÖ **CMV calculado automaticamente**: {cmv_percentual:.1f}% baseado nos custos reais")
            st.caption(f"Baseado em: R$ {custo_materiais_fisicos:.2f} (custo) √∑ R$ {ticket_medio:.2f} (ticket m√©dio)")
            
            # Valida√ß√£o cr√≠tica de impostos baseada no regime tribut√°rio
            tipo_empresa = st.session_state.business_data.get('tipo_empresa', 'MEI')
            objetivo_faturamento = st.session_state.business_data.get('objetivo_faturamento', 0)
            receita_anual = objetivo_faturamento * 12
            
            # Calcular al√≠quota correta baseada na legisla√ß√£o brasileira atual
            from tax_calculator import TaxCalculator
            calc = TaxCalculator()
            
            impostos_sugerido = 6.0  # Default fallback
            
            if tipo_empresa == 'MEI':
                impostos_sugerido = 0.3  # MEI paga valor fixo, n√£o percentual sobre receita
                st.info("üí° **MEI**: Voc√™ paga R$ 76,90 fixo por m√™s conforme legisla√ß√£o 2025")
            elif tipo_empresa in ['Microempresa', 'Empresa de Pequeno Porte']:
                # Calcular conforme tabela oficial do Simples Nacional
                resultado_simples = calc.calculate_simples_nacional(receita_anual, "Anexo I - Com√©rcio")
                impostos_sugerido = resultado_simples['aliquota_efetiva']
                
                st.info(f"üí° **{tipo_empresa}**: Conforme Simples Nacional Anexo I, voc√™ paga {impostos_sugerido:.1f}% (al√≠quota oficial para R$ {receita_anual:,.0f}/ano)")
                st.caption("üìã Base legal: Lei Complementar n¬∫ 123/2006 - Simples Nacional")
            elif tipo_empresa in ['Ltda', 'Outro']:
                impostos_sugerido = 13.33
                st.warning(f"üí° **Lucro Presumido**: Conforme legisla√ß√£o, empresas normais pagam cerca de {impostos_sugerido}% (confirme com contador)")
            
            # Usar automaticamente o valor correto da legisla√ß√£o
            impostos_percentual = impostos_sugerido
            st.session_state.business_data['impostos_percentual'] = impostos_percentual
            save_user_data()
            
            st.success(f"‚úÖ **Impostos aplicados automaticamente**: {impostos_percentual:.1f}% conforme legisla√ß√£o brasileira")
            
            comissoes_percentual = st.slider(
                "Comiss√µes (%)",
                min_value=0.0,
                max_value=15.0,
                value=float(st.session_state.business_data.get('comissoes_percentual', 3.0)),
                step=0.5
            )
            if comissoes_percentual != st.session_state.business_data.get('comissoes_percentual'):
                st.session_state.business_data['comissoes_percentual'] = comissoes_percentual
                save_user_data()
            
            outros_variaveis_percentual = st.slider(
                "Outros custos vari√°veis (%)",
                min_value=0.0,
                max_value=10.0,
                value=float(st.session_state.business_data.get('outros_variaveis_percentual', 2.0)),
                step=0.5
            )
            if outros_variaveis_percentual != st.session_state.business_data.get('outros_variaveis_percentual'):
                st.session_state.business_data['outros_variaveis_percentual'] = outros_variaveis_percentual
                save_user_data()
            
            total_variaveis_perc = cmv_percentual + impostos_percentual + comissoes_percentual + outros_variaveis_percentual
            st.metric("Total Custos Vari√°veis", f"{total_variaveis_perc:.1f}%")
        
        # Configura√ß√£o detalhada de despesas operacionais
        st.markdown("### üè¢ Despesas Operacionais Detalhadas")
        st.markdown("Configure cada despesa individualmente para c√°lculos precisos")
        
        col_desp1, col_desp2, col_desp3 = st.columns(3)
        
        with col_desp1:
            st.markdown("**Utilidades e Infraestrutura**")
            
            energia_agua = st.number_input(
                "Energia + √Ågua (R$/m√™s)",
                min_value=0.0,
                max_value=2000.0,
                value=float(st.session_state.business_data.get('energia_agua', 800)),
                step=50.0,
                help="Conta de luz + √°gua + g√°s"
            )
            if energia_agua != st.session_state.business_data.get('energia_agua'):
                st.session_state.business_data['energia_agua'] = energia_agua
                save_user_data()
            
            telefone_internet = st.number_input(
                "Telefone + Internet (R$/m√™s)",
                min_value=0.0,
                max_value=800.0,
                value=float(st.session_state.business_data.get('telefone_internet', 350)),
                step=25.0,
                help="Telefone fixo + internet + celular"
            )
            if telefone_internet != st.session_state.business_data.get('telefone_internet'):
                st.session_state.business_data['telefone_internet'] = telefone_internet
                save_user_data()
            
            material_escritorio = st.number_input(
                "Material de Escrit√≥rio (R$/m√™s)",
                min_value=0.0,
                max_value=500.0,
                value=float(st.session_state.business_data.get('material_escritorio', 200)),
                step=25.0,
                help="Papelaria, toner, material de limpeza"
            )
            if material_escritorio != st.session_state.business_data.get('material_escritorio'):
                st.session_state.business_data['material_escritorio'] = material_escritorio
                save_user_data()
        
        with col_desp2:
            st.markdown("**Servi√ßos Profissionais**")
            
            contabilidade = st.number_input(
                "Contabilidade (R$/m√™s)",
                min_value=0.0,
                max_value=2000.0,
                value=float(st.session_state.business_data.get('contabilidade', 800)),
                step=50.0,
                help="Contador + assessoria fiscal"
            )
            if contabilidade != st.session_state.business_data.get('contabilidade'):
                st.session_state.business_data['contabilidade'] = contabilidade
                save_user_data()
            
            # Optometrista removido - agora est√° em Servi√ßos Profissionais por Di√°ria
            
            limpeza_seguranca = st.number_input(
                "Limpeza + Seguran√ßa (R$/m√™s)",
                min_value=0.0,
                max_value=1500.0,
                value=float(st.session_state.business_data.get('limpeza_seguranca', 600)),
                step=50.0,
                help="Empresa de limpeza + seguran√ßa"
            )
            if limpeza_seguranca != st.session_state.business_data.get('limpeza_seguranca'):
                st.session_state.business_data['limpeza_seguranca'] = limpeza_seguranca
                save_user_data()
        
        with col_desp3:
            st.markdown("**Seguros e Manuten√ß√£o**")
            
            seguros = st.number_input(
                "Seguros (R$/m√™s)",
                min_value=0.0,
                max_value=1000.0,
                value=float(st.session_state.business_data.get('seguros', 400)),
                step=25.0,
                help="Seguro do estabelecimento + equipamentos"
            )
            if seguros != st.session_state.business_data.get('seguros'):
                st.session_state.business_data['seguros'] = seguros
                save_user_data()
            
            manutencao_equipamentos = st.number_input(
                "Manuten√ß√£o Equipamentos (R$/m√™s)",
                min_value=0.0,
                max_value=800.0,
                value=float(st.session_state.business_data.get('manutencao_equipamentos', 300)),
                step=25.0,
                help="Manuten√ß√£o de equipamentos √≥pticos"
            )
            if manutencao_equipamentos != st.session_state.business_data.get('manutencao_equipamentos'):
                st.session_state.business_data['manutencao_equipamentos'] = manutencao_equipamentos
                save_user_data()
            
            marketing_publicidade = st.number_input(
                "Marketing + Publicidade (R$/m√™s)",
                min_value=0.0,
                max_value=2000.0,
                value=float(st.session_state.business_data.get('marketing_publicidade', 500)),
                step=50.0,
                help="Redes sociais + an√∫ncios + material gr√°fico"
            )
            if marketing_publicidade != st.session_state.business_data.get('marketing_publicidade'):
                st.session_state.business_data['marketing_publicidade'] = marketing_publicidade
                save_user_data()
        
        # Resumo das despesas operacionais (sem optometrista - agora est√° em Servi√ßos Profissionais)
        total_despesas_detalhadas = (energia_agua + telefone_internet + material_escritorio + 
                                   contabilidade + limpeza_seguranca + 
                                   seguros + manutencao_equipamentos + marketing_publicidade)
        
        st.markdown("**üìä Resumo das Despesas Operacionais:**")
        col_res1, col_res2, col_res3 = st.columns(3)
        
        with col_res1:
            st.metric("Utilidades", format_currency(energia_agua + telefone_internet + material_escritorio))
        
        with col_res2:
            st.metric("Servi√ßos Profissionais", format_currency(contabilidade + limpeza_seguranca))
        
        with col_res3:
            st.metric("Seguros + Manuten√ß√£o + Marketing", format_currency(seguros + manutencao_equipamentos + marketing_publicidade))
        
        st.metric("**Total Despesas Operacionais**", format_currency(total_despesas_detalhadas))
        
        # Sistema de Rateio por √ìculos Vendidos
        st.markdown("---")
        st.markdown("### üéØ Rateio de Custos por √ìculos Vendidos")
        st.markdown("Calcule quanto cada custo fixo representa por √≥culos vendido")
        
        # Pegar meta de √≥culos vendidos por m√™s
        ticket_medio = st.session_state.business_data.get('ticket_medio', 180)
        vendas_mes_1 = st.session_state.business_data.get('vendas_mes_1', 20831)
        oculos_por_mes = int(vendas_mes_1 / ticket_medio) if ticket_medio > 0 else 100
        
        col_rateio1, col_rateio2 = st.columns([1, 1])
        
        with col_rateio1:
            st.markdown("**Meta de √ìculos por M√™s**")
            oculos_meta = st.number_input(
                "√ìculos vendidos por m√™s",
                min_value=10,
                max_value=1000,
                value=oculos_por_mes,
                step=5,
                help="Quantos √≥culos voc√™ pretende vender por m√™s"
            )
            if oculos_meta != st.session_state.business_data.get('oculos_meta_mes'):
                st.session_state.business_data['oculos_meta_mes'] = oculos_meta
                save_user_data()
            
            st.metric("Faturamento por √≥culos", format_currency(ticket_medio))
        
        with col_rateio2:
            st.markdown("**Custos Rateados por √ìculos**")
            
            # Calcular custos totais fixos
            aluguel_valor = st.session_state.business_data.get('aluguel', 3500)
            folha_clt = st.session_state.business_data.get('salarios_clt', 0)
            
            # Obter dados do optometrista dos Servi√ßos Profissionais por Di√°ria
            custo_optometrista_mensal = st.session_state.business_data.get('custo_optometrista_mensal', 0)
            
            # Incluir combust√≠vel no c√°lculo de custos fixos totais
            custo_combustivel_mensal = st.session_state.business_data.get('custo_combustivel_mensal', 0)
            
            # Calcular custo do captador baseado nas configura√ß√µes da Gest√£o de Pessoas
            custo_captador_mensal = calcular_custo_captador_mensal()
            
            custos_fixos_totais = (aluguel_valor + folha_clt + total_despesas_detalhadas + custo_optometrista_mensal + custo_combustivel_mensal + custo_captador_mensal)
            
            if oculos_meta > 0:
                # Rateio por √≥culos
                aluguel_por_oculos = aluguel_valor / oculos_meta
                optometrista_por_oculos = custo_optometrista_mensal / oculos_meta
                combustivel_por_oculos = custo_combustivel_mensal / oculos_meta
                captador_por_oculos = custo_captador_mensal / oculos_meta
                despesas_por_oculos = total_despesas_detalhadas / oculos_meta
                total_fixo_por_oculos = custos_fixos_totais / oculos_meta
                
                st.metric("Aluguel por √≥culos", format_currency(aluguel_por_oculos))
                st.metric("Optometrista por √≥culos", format_currency(optometrista_por_oculos))
                st.metric("Combust√≠vel por √≥culos", format_currency(combustivel_por_oculos))
                st.metric("Captador por √≥culos", format_currency(captador_por_oculos))
                st.metric("Despesas por √≥culos", format_currency(despesas_por_oculos))
                st.metric("**Total fixo por √≥culos**", format_currency(total_fixo_por_oculos))
                
                # Salvar para uso no sistema
                st.session_state.business_data['custo_fixo_por_oculos'] = total_fixo_por_oculos
                save_user_data()
            else:
                st.warning("Configure a meta de √≥culos para ver o rateio")
        
        # Card visual do rateio com custos diretos inclu√≠dos
        if oculos_meta > 0:
            # Obter custos diretos da precifica√ß√£o (Composi√ß√£o do Produto)
            custo_materiais_fisicos = st.session_state.business_data.get('custo_materiais_fisicos', 89.80)
            
            # Custos totais por √≥culos = Custos fixos (rateio) + Custos diretos (materiais)
            custo_total_por_oculos = total_fixo_por_oculos + custo_materiais_fisicos
            margem_real = ticket_medio - custo_total_por_oculos
            percentual_margem_real = (margem_real / ticket_medio) * 100 if ticket_medio > 0 else 0
            
            cor_margem = "green" if percentual_margem_real > 40 else "orange" if percentual_margem_real > 25 else "red"
            

        
        # Configura√ß√£o de Termos de Pagamento aos Fornecedores
        st.markdown("### üí≥ Termos de Pagamento aos Fornecedores")
        st.markdown("Configure como voc√™ paga seus fornecedores para c√°lculos precisos de fluxo de caixa")
        
        col_pag1, col_pag2, col_pag3 = st.columns(3)
        
        with col_pag1:
            forma_pagamento = st.selectbox(
                "Forma de Pagamento Principal",
                ["√Ä Vista", "30 dias", "45 dias", "60 dias", "Parcelado (30/60)", "Parcelado (30/60/90)", "Personalizado"],
                index=["√Ä Vista", "30 dias", "45 dias", "60 dias", "Parcelado (30/60)", "Parcelado (30/60/90)", "Personalizado"].index(
                    st.session_state.business_data.get('forma_pagamento_fornecedor', 'Parcelado (30/60)')
                ),
                help="Como voc√™ paga seus fornecedores (ATAK, Brasil Lentes, GOLD, DSMHD)"
            )
            if forma_pagamento != st.session_state.business_data.get('forma_pagamento_fornecedor'):
                st.session_state.business_data['forma_pagamento_fornecedor'] = forma_pagamento
                save_user_data()
        
        with col_pag2:
            # Configurar percentuais baseado na forma selecionada
            if forma_pagamento == "√Ä Vista":
                percentual_mes_atual = 100.0
                percentual_mes_seguinte = 0.0
                percentual_terceiro_mes = 0.0
            elif forma_pagamento == "30 dias":
                percentual_mes_atual = 0.0
                percentual_mes_seguinte = 100.0
                percentual_terceiro_mes = 0.0
            elif forma_pagamento == "45 dias":
                percentual_mes_atual = 0.0
                percentual_mes_seguinte = 50.0
                percentual_terceiro_mes = 50.0
            elif forma_pagamento == "60 dias":
                percentual_mes_atual = 0.0
                percentual_mes_seguinte = 0.0
                percentual_terceiro_mes = 100.0
            elif forma_pagamento == "Parcelado (30/60)":
                percentual_mes_atual = 0.0
                percentual_mes_seguinte = 80.0
                percentual_terceiro_mes = 20.0
            elif forma_pagamento == "Parcelado (30/60/90)":
                percentual_mes_atual = 0.0
                percentual_mes_seguinte = 60.0
                percentual_terceiro_mes = 40.0
            else:  # Personalizado
                percentual_mes_atual = st.slider(
                    "% Pago no M√™s Atual",
                    min_value=0.0,
                    max_value=100.0,
                    value=float(st.session_state.business_data.get('pct_pagamento_mes_atual', 20.0)),
                    step=5.0
                )
                if percentual_mes_atual != st.session_state.business_data.get('pct_pagamento_mes_atual'):
                    st.session_state.business_data['pct_pagamento_mes_atual'] = percentual_mes_atual
                    save_user_data()
            
            if forma_pagamento != "Personalizado":
                st.session_state.business_data['pct_pagamento_mes_atual'] = percentual_mes_atual
        
        with col_pag3:
            if forma_pagamento == "Personalizado":
                percentual_mes_seguinte = st.slider(
                    "% Pago no M√™s Seguinte",
                    min_value=0.0,
                    max_value=100.0 - percentual_mes_atual,
                    value=min(float(st.session_state.business_data.get('pct_pagamento_mes_seguinte', 60.0)), 100.0 - percentual_mes_atual),
                    step=5.0
                )
                percentual_terceiro_mes = 100.0 - percentual_mes_atual - percentual_mes_seguinte
                
                st.session_state.business_data['pct_pagamento_mes_seguinte'] = percentual_mes_seguinte
                st.session_state.business_data['pct_pagamento_terceiro_mes'] = percentual_terceiro_mes
                save_user_data()
            else:
                # Para formas pr√©-definidas, salvar os valores calculados
                st.session_state.business_data['pct_pagamento_mes_seguinte'] = percentual_mes_seguinte
                st.session_state.business_data['pct_pagamento_terceiro_mes'] = percentual_terceiro_mes
            
            # Mostrar distribui√ß√£o atual
            st.info(f"""
            **Distribui√ß√£o de Pagamentos:**
            ‚Ä¢ M√™s atual: {percentual_mes_atual:.0f}%
            ‚Ä¢ M√™s seguinte: {percentual_mes_seguinte:.0f}%
            ‚Ä¢ Terceiro m√™s: {percentual_terceiro_mes:.0f}%
            """)
        
        # Desconto para pagamento √† vista
        if forma_pagamento != "√Ä Vista":
            desconto_avista = st.slider(
                "Desconto por Pagamento √† Vista (%)",
                min_value=0.0,
                max_value=10.0,
                value=float(st.session_state.business_data.get('desconto_avista_fornecedor', 2.5)),
                step=0.5,
                help="Desconto oferecido pelo fornecedor para pagamento √† vista"
            )
            if desconto_avista != st.session_state.business_data.get('desconto_avista_fornecedor'):
                st.session_state.business_data['desconto_avista_fornecedor'] = desconto_avista
                save_user_data()
        else:
            desconto_avista = float(st.session_state.business_data.get('desconto_avista_fornecedor', 2.5))
        
        # Impacto no fluxo de caixa
        st.markdown("**üí° Impacto no Fluxo de Caixa:**")
        exemplo_compra = 10000
        valor_mes_atual = exemplo_compra * (percentual_mes_atual / 100)
        valor_mes_seguinte = exemplo_compra * (percentual_mes_seguinte / 100)
        valor_terceiro_mes = exemplo_compra * (percentual_terceiro_mes / 100)
        
        if forma_pagamento == "√Ä Vista" and desconto_avista > 0:
            valor_com_desconto = exemplo_compra * (1 - desconto_avista / 100)
            st.success(f"Exemplo: Compra de R$ {exemplo_compra:,.2f} ‚Üí Paga R$ {valor_com_desconto:,.2f} (desconto de {desconto_avista}%)")
        else:
            st.info(f"""
            Exemplo: Compra de R$ {exemplo_compra:,.2f}
            ‚Ä¢ M√™s atual: R$ {valor_mes_atual:,.2f}
            ‚Ä¢ M√™s seguinte: R$ {valor_mes_seguinte:,.2f}
            ‚Ä¢ Terceiro m√™s: R$ {valor_terceiro_mes:,.2f}
            """)
            if desconto_avista > 0:
                economia_anual = exemplo_compra * 12 * (desconto_avista / 100)
                st.warning(f"Oportunidade perdida: R$ {economia_anual:,.2f}/ano se pagasse √† vista")
        
        # Atualizar outros_fixos com o total calculado
        outros_fixos = total_despesas_detalhadas - 0  # Subtrair para n√£o duplicar
        if outros_fixos < 0:
            outros_fixos = 0
        
        # Salvar percentuais para c√°lculos
        st.session_state.business_data.update({
            'cmv_percentual': cmv_percentual,
            'impostos_percentual': impostos_percentual,
            'comissoes_percentual': comissoes_percentual,
            'outros_variaveis_percentual': outros_variaveis_percentual,
            'aluguel': aluguel_mensal,
            'salarios_clt': salarios_clt,
            'total_optometrista': total_optometrista,
            'salarios_total': salarios_clt + total_optometrista,

            'outros_fixos': outros_fixos,
            'total_despesas_operacionais': total_despesas_detalhadas
        })
        
        # An√°lise de ponto de equil√≠brio
        st.markdown("### ‚öñÔ∏è An√°lise de Ponto de Equil√≠brio")
        col_eq1, col_eq2, col_eq3 = st.columns(3)
        
        margem_contribuicao_perc = 100 - total_variaveis_perc
        ponto_equilibrio_valor = custos_fixos_total / (margem_contribuicao_perc / 100) if margem_contribuicao_perc > 0 else 0
        ponto_equilibrio_unidades = ponto_equilibrio_valor / ticket_medio if ticket_medio > 0 else 0
        
        with col_eq1:
            st.metric("Margem de Contribui√ß√£o", f"{margem_contribuicao_perc:.1f}%")
        
        with col_eq2:
            st.metric("Ponto de Equil√≠brio", format_currency(ponto_equilibrio_valor))
        
        with col_eq3:
            st.metric("Vendas Necess√°rias", f"{ponto_equilibrio_unidades:.0f} unidades/m√™s")
        
        # Bot√£o para explicar a origem do c√°lculo
        col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
        with col_btn2:
            if st.button("üìñ De onde vem esse valor do ponto de equil√≠brio?", key="explain_equilibrio_main"):
                st.info(f"""
                üí° **Voc√™ precisa vender {format_currency(ponto_equilibrio_valor)} por m√™s**
                
                **F√≥rmula:** Custos Fixos √∑ Margem de Contribui√ß√£o = Vendas Necess√°rias
                
                **Custos Fixos Totais: {format_currency(custos_fixos_total)}**
                ‚Ä¢ Aluguel: {format_currency(aluguel_mensal)}
                ‚Ä¢ Folha CLT: {format_currency(salarios_clt)}
                ‚Ä¢ Servi√ßos terceirizados: {format_currency(total_optometrista)}
                ‚Ä¢ Servi√ßos terceiros: {format_currency(0)}
                ‚Ä¢ Outros custos: {format_currency(outros_fixos)}
                
                **Margem de Contribui√ß√£o: {margem_contribuicao_perc:.1f}%**
                ‚Ä¢ Custos vari√°veis: {total_variaveis_perc:.1f}%
                ‚Ä¢ Sobra para custos fixos: {margem_contribuicao_perc:.1f}%
                
                **C√°lculo:** {format_currency(custos_fixos_total)} √∑ {margem_contribuicao_perc:.1f}% = {format_currency(ponto_equilibrio_valor)}
                
                **Em resumo:** De cada R$ 100 vendidos, sobram R$ {margem_contribuicao_perc:.0f} para custos fixos. Como seus custos fixos s√£o {format_currency(custos_fixos_total)}, voc√™ precisa vender {format_currency(ponto_equilibrio_valor)} para empatar.
                """)
        
        # Salvar dados calculados
        st.session_state.business_data.update({
            'margem_contribuicao_perc': margem_contribuicao_perc,
            'ponto_equilibrio_valor': ponto_equilibrio_valor,
            'ponto_equilibrio_unidades': ponto_equilibrio_unidades
        })
    
    with tab3:
        st.subheader("üìä DRE Projetado M√™s a M√™s")
        
        # Calcular DRE m√™s a m√™s
        dre_mensal = []
        
        for mes in range(1, 13):
            if mes == 1:
                receita_mes = vendas_mes_1
            else:
                receita_mes = dre_mensal[mes-2]['receita_bruta'] * (1 + crescimento_mensal/100)
            
            # Custos vari√°veis detalhados
            cmv_valor = receita_mes * (cmv_percentual / 100)
            impostos_valor = receita_mes * (impostos_percentual / 100)
            comissoes_valor = receita_mes * (comissoes_percentual / 100)
            
            # Taxas financeiras baseadas na configura√ß√£o da Etapa 5
            usar_customizada = st.session_state.business_data.get('usar_taxa_customizada', False)
            if usar_customizada:
                taxa_financeira_percent = st.session_state.business_data.get('taxa_customizada', 4.3) / 100
            else:
                taxa_financeira_percent = st.session_state.business_data.get('taxa_mercado_pago', 4.3) / 100
            
            # Aplicar taxa financeira baseada no percentual de vendas a prazo
            percentual_prazo = (100 - st.session_state.business_data.get('percentual_avista', 70)) / 100
            taxas_financeiras_valor = receita_mes * percentual_prazo * taxa_financeira_percent
            
            # Calcular comiss√µes do captador baseadas nas configura√ß√µes
            comissoes_captador_valor = 0
            if st.session_state.business_data.get('usar_sistema_captacao', False):
                # Estimar n√∫mero de vendas baseado no ticket m√©dio
                ticket_medio_estimado = st.session_state.business_data.get('ticket_medio', 180)
                if ticket_medio_estimado > 0:
                    total_vendas_mes = receita_mes / ticket_medio_estimado
                    
                    # Vendas √† vista e parceladas
                    percentual_avista = st.session_state.business_data.get('percentual_avista', 70) / 100
                    vendas_avista = total_vendas_mes * percentual_avista
                    vendas_parceladas = total_vendas_mes * (1 - percentual_avista)
                    
                    # Calcular comiss√µes por modalidade
                    tipo_comissao_avista = st.session_state.business_data.get('tipo_comissao_avista', 'Valor fixo por venda')
                    tipo_comissao_parcelada = st.session_state.business_data.get('tipo_comissao_parcelada', 'Valor fixo por venda')
                    
                    # Comiss√£o vendas √† vista
                    if tipo_comissao_avista == "Valor fixo por venda":
                        comissao_avista_total = vendas_avista * st.session_state.business_data.get('comissao_avista', 30.0)
                    else:
                        receita_avista = receita_mes * percentual_avista
                        comissao_avista_total = receita_avista * (st.session_state.business_data.get('percentual_comissao_avista', 3.0) / 100)
                    
                    # Comiss√£o vendas parceladas
                    if tipo_comissao_parcelada == "Valor fixo por venda":
                        comissao_parcelada_total = vendas_parceladas * st.session_state.business_data.get('comissao_parcelada', 20.0)
                    else:
                        receita_parcelada = receita_mes * (1 - percentual_avista)
                        comissao_parcelada_total = receita_parcelada * (st.session_state.business_data.get('percentual_comissao_parcelada', 2.0) / 100)
                    
                    # Comiss√µes por produto (se habilitado)
                    comissao_produtos_total = 0
                    if st.session_state.business_data.get('usar_comissao_produto', False):
                        # Estimar 75% das vendas incluem lentes, 90% incluem arma√ß√µes
                        vendas_com_lentes = total_vendas_mes * 0.75
                        vendas_com_armacoes = total_vendas_mes * 0.90
                        
                        comissao_produtos_total = (
                            vendas_com_lentes * st.session_state.business_data.get('comissao_lentes', 10.0) +
                            vendas_com_armacoes * st.session_state.business_data.get('comissao_armacoes', 5.0)
                        )
                    
                    comissoes_captador_valor = comissao_avista_total + comissao_parcelada_total + comissao_produtos_total
            
            outros_var_valor = receita_mes * (outros_variaveis_percentual / 100)
            
            custos_variaveis_total = cmv_valor + impostos_valor + comissoes_valor + taxas_financeiras_valor + comissoes_captador_valor + outros_var_valor
            margem_contribuicao = receita_mes - custos_variaveis_total
            
            # Custos fixos detalhados
            aluguel_mes = aluguel_mensal
            salarios_mes = salarios_clt + total_optometrista
            servicos_mes = 0
            outros_fixos_mes = outros_fixos
            depreciacao_mes = (st.session_state.business_data.get('reforma_loja', 15000) + 
                             st.session_state.business_data.get('equipamentos_total', 12000)) * 0.05 / 12
            
            custos_fixos_total_mes = aluguel_mes + salarios_mes + servicos_mes + outros_fixos_mes + depreciacao_mes
            lucro_operacional_mes = margem_contribuicao - custos_fixos_total_mes
            
            dre_mensal.append({
                'mes': mes,
                'receita_bruta': receita_mes,
                'cmv': cmv_valor,
                'impostos': impostos_valor,
                'comissoes': comissoes_valor,
                'taxas_financeiras': taxas_financeiras_valor,
                'comissoes_captador': comissoes_captador_valor,
                'outros_variaveis': outros_var_valor,
                'custos_variaveis_total': custos_variaveis_total,
                'margem_contribuicao': margem_contribuicao,
                'aluguel': aluguel_mes,
                'salarios': salarios_mes,
                'servicos': servicos_mes,
                'outros_fixos': outros_fixos_mes,
                'depreciacao': depreciacao_mes,
                'custos_fixos_total': custos_fixos_total_mes,
                'lucro_operacional': lucro_operacional_mes
            })
        
        # Mostrar tabela DRE
        st.markdown("### DRE Detalhado M√™s a M√™s")
        
        df_dre = pd.DataFrame([
            {
                'Item': 'Receita Bruta',
                **{f'M√™s {i+1}': f"R$ {dre['receita_bruta']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['receita_bruta'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '(-) CMV',
                **{f'M√™s {i+1}': f"R$ {dre['cmv']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['cmv'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '(-) Impostos',
                **{f'M√™s {i+1}': f"R$ {dre['impostos']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['impostos'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '(-) Taxas Financeiras',
                **{f'M√™s {i+1}': f"R$ {dre['taxas_financeiras']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['taxas_financeiras'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '(-) Comiss√µes',
                **{f'M√™s {i+1}': f"R$ {dre['comissoes']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['comissoes'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '(-) Comiss√µes Captador',
                **{f'M√™s {i+1}': f"R$ {dre['comissoes_captador']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['comissoes_captador'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '= Margem de Contribui√ß√£o',
                **{f'M√™s {i+1}': f"R$ {dre['margem_contribuicao']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['margem_contribuicao'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '(-) Aluguel',
                **{f'M√™s {i+1}': f"R$ {dre['aluguel']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['aluguel'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '(-) Sal√°rios',
                **{f'M√™s {i+1}': f"R$ {dre['salarios']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['salarios'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '(-) Deprecia√ß√£o',
                **{f'M√™s {i+1}': f"R$ {dre['depreciacao']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['depreciacao'] for dre in dre_mensal):,.0f}"
            },
            {
                'Item': '= LUCRO OPERACIONAL',
                **{f'M√™s {i+1}': f"R$ {dre['lucro_operacional']:,.0f}" for i, dre in enumerate(dre_mensal)},
                'Total Anual': f"R$ {sum(dre['lucro_operacional'] for dre in dre_mensal):,.0f}"
            }
        ])
        
        st.dataframe(df_dre, use_container_width=True)
        
        # Breakdown detalhado por linha
        st.markdown("### üîç Breakdown Detalhado")
        
        linha_selecionada = st.selectbox(
            "Selecione uma linha para ver a composi√ß√£o detalhada:",
            ["Receita Bruta", "CMV", "Impostos", "Taxas Financeiras", "Comiss√µes", "Comiss√µes Captador", "Sal√°rios", "Outros Custos Fixos"]
        )
        
        if linha_selecionada == "Receita Bruta":
            st.markdown("**Composi√ß√£o da Receita Bruta:**")
            st.write(f"‚Ä¢ Vendas m√™s 1: R$ {vendas_mes_1:,.2f}")
            st.write(f"‚Ä¢ Crescimento mensal: {crescimento_mensal}%")
            st.write(f"‚Ä¢ Ticket m√©dio: R$ {ticket_medio:,.2f}")
            st.write(f"‚Ä¢ Vendas por m√™s: {vendas_mes_1/ticket_medio:.0f} unidades")
        
        elif linha_selecionada == "CMV":
            st.markdown("**Composi√ß√£o do CMV:**")
            st.write(f"‚Ä¢ Percentual sobre receita: {cmv_percentual}%")
            st.write("‚Ä¢ Inclui: Custo das lentes, arma√ß√µes, materiais")
            st.write("‚Ä¢ Base: Pre√ßos de fornecedores (ATAK, Brasil Lentes, GOLD)")
        
        elif linha_selecionada == "Impostos":
            st.markdown("**Composi√ß√£o dos Impostos:**")
            regime_tributario = st.session_state.business_data.get('regime_tributario', 'Simples Nacional')
            st.write(f"‚Ä¢ Regime tribut√°rio: {regime_tributario}")
            st.write(f"‚Ä¢ Al√≠quota m√©dia: {impostos_percentual}%")
            if regime_tributario == "Simples Nacional":
                st.write("‚Ä¢ Inclui: IRPJ, CSLL, PIS, COFINS, ICMS, CPP, ISS")
        
        elif linha_selecionada == "Taxas Financeiras":
            st.markdown("**Composi√ß√£o das Taxas Financeiras:**")
            usar_customizada = st.session_state.business_data.get('usar_taxa_customizada', False)
            if usar_customizada:
                taxa_percentual = st.session_state.business_data.get('taxa_customizada', 4.3)
                st.write(f"‚Ä¢ Taxa customizada: {taxa_percentual}%")
            else:
                taxa_percentual = st.session_state.business_data.get('taxa_mercado_pago', 4.3)
                opcao_mp = st.session_state.business_data.get('opcao_recebimento_mp', 'Cr√©dito √† vista - 14 dias (3,79%)')
                st.write(f"‚Ä¢ Mercado Pago: {opcao_mp}")
                st.write(f"‚Ä¢ Taxa aplicada: {taxa_percentual}%")
            
            percentual_prazo = (100 - st.session_state.business_data.get('percentual_avista', 70))
            percentual_avista = st.session_state.business_data.get('percentual_avista', 70)
            st.write(f"‚Ä¢ Vendas √† vista: {percentual_avista}% (taxa 0%)")
            st.write(f"‚Ä¢ Vendas a prazo: {percentual_prazo}% (com taxa)")
            valor_taxas_mensal = vendas_mes_1 * (percentual_prazo / 100) * (taxa_percentual / 100)
            st.write(f"‚Ä¢ Valor m√©dio mensal: R$ {valor_taxas_mensal:,.2f}")
            st.write(f"‚Ä¢ F√≥rmula: Receita √ó {percentual_prazo}% √ó {taxa_percentual}%")
        
        elif linha_selecionada == "Comiss√µes":
            st.markdown("**Composi√ß√£o das Comiss√µes:**")
            st.write(f"‚Ä¢ Percentual sobre vendas: {comissoes_percentual}%")
            st.write("‚Ä¢ Comiss√µes de vendedores sobre receita bruta")
            st.write("‚Ä¢ Inclui: Comiss√£o de vendas, pr√™mios por meta")
            st.write("‚Ä¢ Base de c√°lculo: Receita bruta mensal")
            valor_comissao_mensal = vendas_mes_1 * (comissoes_percentual / 100)
            st.write(f"‚Ä¢ Valor m√©dio mensal: R$ {valor_comissao_mensal:,.2f}")
        
        elif linha_selecionada == "Comiss√µes Captador":
            st.markdown("**Composi√ß√£o das Comiss√µes do Captador:**")
            
            if st.session_state.business_data.get('usar_sistema_captacao', False):
                # Calcular exemplo com dados do primeiro m√™s
                ticket_medio_calc = st.session_state.business_data.get('ticket_medio', 180)
                percentual_avista = st.session_state.business_data.get('percentual_avista', 70)
                
                total_vendas_exemplo = vendas_mes_1 / ticket_medio_calc
                vendas_avista_exemplo = total_vendas_exemplo * (percentual_avista / 100)
                vendas_parcelada_exemplo = total_vendas_exemplo * ((100 - percentual_avista) / 100)
                
                # Comiss√µes configuradas
                comissao_avista_config = st.session_state.business_data.get('comissao_avista', 30.0)
                comissao_parcelada_config = st.session_state.business_data.get('comissao_parcelada', 20.0)
                tipo_avista = st.session_state.business_data.get('tipo_comissao_avista', 'Valor fixo por venda')
                tipo_parcelada = st.session_state.business_data.get('tipo_comissao_parcelada', 'Valor fixo por venda')
                
                st.write(f"‚Ä¢ Sistema de capta√ß√£o: **Ativo**")
                st.write(f"‚Ä¢ Vendas estimadas/m√™s: {total_vendas_exemplo:.0f} unidades")
                st.write(f"‚Ä¢ Vendas √† vista ({percentual_avista}%): {vendas_avista_exemplo:.0f} unidades")
                st.write(f"‚Ä¢ Vendas parceladas ({100-percentual_avista}%): {vendas_parcelada_exemplo:.0f} unidades")
                
                # Calcular comiss√µes
                if tipo_avista == "Valor fixo por venda":
                    comissao_avista_total = vendas_avista_exemplo * comissao_avista_config
                    st.write(f"‚Ä¢ Comiss√£o √† vista: {vendas_avista_exemplo:.0f} √ó R$ {comissao_avista_config:.2f} = R$ {comissao_avista_total:.2f}")
                else:
                    percentual_comissao_avista = st.session_state.business_data.get('percentual_comissao_avista', 3.0)
                    receita_avista = vendas_mes_1 * (percentual_avista / 100)
                    comissao_avista_total = receita_avista * (percentual_comissao_avista / 100)
                    st.write(f"‚Ä¢ Comiss√£o √† vista: R$ {receita_avista:.2f} √ó {percentual_comissao_avista}% = R$ {comissao_avista_total:.2f}")
                
                if tipo_parcelada == "Valor fixo por venda":
                    comissao_parcelada_total = vendas_parcelada_exemplo * comissao_parcelada_config
                    st.write(f"‚Ä¢ Comiss√£o parcelada: {vendas_parcelada_exemplo:.0f} √ó R$ {comissao_parcelada_config:.2f} = R$ {comissao_parcelada_total:.2f}")
                else:
                    percentual_comissao_parcelada = st.session_state.business_data.get('percentual_comissao_parcelada', 2.0)
                    receita_parcelada = vendas_mes_1 * ((100 - percentual_avista) / 100)
                    comissao_parcelada_total = receita_parcelada * (percentual_comissao_parcelada / 100)
                    st.write(f"‚Ä¢ Comiss√£o parcelada: R$ {receita_parcelada:.2f} √ó {percentual_comissao_parcelada}% = R$ {comissao_parcelada_total:.2f}")
                
                # Comiss√µes por produto
                if st.session_state.business_data.get('usar_comissao_produto', False):
                    comissao_lentes = st.session_state.business_data.get('comissao_lentes', 10.0)
                    comissao_armacoes = st.session_state.business_data.get('comissao_armacoes', 5.0)
                    vendas_com_lentes = total_vendas_exemplo * 0.75
                    vendas_com_armacoes = total_vendas_exemplo * 0.90
                    comissao_produtos_total = (vendas_com_lentes * comissao_lentes) + (vendas_com_armacoes * comissao_armacoes)
                    st.write(f"‚Ä¢ Comiss√£o produtos: R$ {comissao_produtos_total:.2f}")
                    total_comissoes_captador = comissao_avista_total + comissao_parcelada_total + comissao_produtos_total
                else:
                    total_comissoes_captador = comissao_avista_total + comissao_parcelada_total
                
                st.write(f"‚Ä¢ **Total comiss√µes captador: R$ {total_comissoes_captador:.2f}**")
                st.write("‚Ä¢ Fonte: Configura√ß√£o Etapa 8 - Sistema de Capta√ß√£o")
            else:
                st.write("‚Ä¢ Sistema de capta√ß√£o: **Desativado**")
                st.write("‚Ä¢ Configure na Etapa 8 para ativar comiss√µes do captador")
                st.write("‚Ä¢ Valor atual: R$ 0,00")
        
        elif linha_selecionada == "Sal√°rios":
            st.markdown("**Composi√ß√£o dos Sal√°rios:**")
            num_func = st.session_state.business_data.get('num_funcionarios', 2)
            st.write(f"‚Ä¢ N√∫mero de funcion√°rios: {num_func}")
            st.write(f"‚Ä¢ Folha CLT: R$ {salarios_clt:,.2f}")
            st.write(f"‚Ä¢ Servi√ßos terceirizados: R$ {total_optometrista:,.2f}")
            st.write(f"‚Ä¢ Total pessoal: R$ {salarios_clt + total_optometrista:,.2f}")
            st.write("‚Ä¢ Inclui: Sal√°rios + encargos (68% sobre sal√°rio base)")
            if hasattr(st.session_state, 'funcionarios'):
                for func in st.session_state.funcionarios:
                    custo_func = func['salario_base'] * 1.68
                    st.write(f"  - {func['nome']} ({func['cargo']}): R$ {custo_func:,.2f}")
        
        elif linha_selecionada == "Outros Custos Fixos":
            st.markdown("**Composi√ß√£o dos Outros Custos Fixos:**")
            st.write(f"‚Ä¢ Servi√ßos de terceiros: R$ {0:,.2f}")
            st.write("  - Contabilidade, limpeza, seguran√ßa")
            st.write("  - Manuten√ß√£o de equipamentos")
            st.write(f"‚Ä¢ Outros custos fixos: R$ {outros_fixos:,.2f}")
            st.write("  - Telefone, internet, energia")
            st.write("  - Material de escrit√≥rio, seguros")
            st.write("  - Taxas e licen√ßas")
            total_outros = 0 + outros_fixos
            st.write(f"‚Ä¢ **Total outros custos: R$ {total_outros:,.2f}**")
        
        # Indicadores de rentabilidade avan√ßados
        st.markdown("### üìà Indicadores de Rentabilidade e Viabilidade")
        
        receita_anual_total = sum(dre['receita_bruta'] for dre in dre_mensal)
        lucro_operacional_total = sum(dre['lucro_operacional'] for dre in dre_mensal)
        margem_contribuicao_total = sum(dre['margem_contribuicao'] for dre in dre_mensal)
        
        col_ind1, col_ind2, col_ind3, col_ind4 = st.columns(4)
        
        with col_ind1:
            margem_operacional = (lucro_operacional_total / receita_anual_total * 100) if receita_anual_total > 0 else 0
            st.metric("Margem Operacional", f"{margem_operacional:.1f}%", 
                     help="Lucro operacional / Receita anual")
        
        with col_ind2:
            investimento_total = st.session_state.business_data.get('investimento_total', 81500)
            roi_anual = (lucro_operacional_total / investimento_total * 100) if investimento_total > 0 else 0
            st.metric("ROI Anual", f"{roi_anual:.1f}%",
                     help="Retorno sobre investimento anual")
        
        with col_ind3:
            payback_anos = investimento_total / lucro_operacional_total if lucro_operacional_total > 0 else 0
            st.metric("Payback", f"{payback_anos:.1f} anos",
                     help="Tempo para recuperar investimento")
        
        with col_ind4:
            margem_contribuicao_perc_real = (margem_contribuicao_total / receita_anual_total * 100) if receita_anual_total > 0 else 0
            st.metric("Margem de Contribui√ß√£o", f"{margem_contribuicao_perc_real:.1f}%",
                     help="Margem ap√≥s custos vari√°veis")
        
        # An√°lise de cen√°rios
        st.markdown("### üéØ An√°lise de Cen√°rios de Rentabilidade")
        
        cenarios_data = []
        cenarios = {
            "Pessimista (-20% receita, +10% custos)": {"receita": -20, "custos": +10},
            "Realista (proje√ß√£o base)": {"receita": 0, "custos": 0},
            "Otimista (+30% receita, -5% custos)": {"receita": +30, "custos": -5}
        }
        
        for nome_cenario, ajustes in cenarios.items():
            receita_cenario = receita_anual_total * (1 + ajustes["receita"]/100)
            custos_variaveis_cenario = receita_cenario * (total_variaveis_perc/100) * (1 + ajustes["custos"]/100)
            custos_fixos_anuais = sum(dre['custos_fixos_total'] for dre in dre_mensal)
            custos_fixos_cenario = custos_fixos_anuais * (1 + ajustes["custos"]/100)
            lucro_cenario = receita_cenario - custos_variaveis_cenario - custos_fixos_cenario
            roi_cenario = (lucro_cenario / investimento_total * 100) if investimento_total > 0 else 0
            margem_cenario = (lucro_cenario / receita_cenario * 100) if receita_cenario > 0 else 0
            
            cenarios_data.append({
                'Cen√°rio': nome_cenario,
                'Receita Anual': f"R$ {receita_cenario:,.0f}",
                'Lucro Operacional': f"R$ {lucro_cenario:,.0f}",
                'ROI': f"{roi_cenario:.1f}%",
                'Margem': f"{margem_cenario:.1f}%"
            })
        
        df_cenarios = pd.DataFrame(cenarios_data)
        st.dataframe(df_cenarios, use_container_width=True)
        
        # Ponto de equil√≠brio detalhado
        st.markdown("### ‚öñÔ∏è An√°lise de Ponto de Equil√≠brio Detalhada")
        col_eq1, col_eq2 = st.columns(2)
        
        with col_eq1:
            st.write(f"**Custos Fixos Mensais:** R$ {custos_fixos_total:,.2f}")
            st.write(f"**Margem de Contribui√ß√£o:** {margem_contribuicao_perc:.1f}%")
            st.write(f"**Ponto de Equil√≠brio Mensal:** R$ {ponto_equilibrio_valor:,.2f}")
            st.write(f"**Vendas Necess√°rias:** {ponto_equilibrio_unidades:.0f} unidades/m√™s")
        
        with col_eq2:
            vendas_atual_mes = vendas_mes_1
            if vendas_atual_mes > ponto_equilibrio_valor:
                diferenca = vendas_atual_mes - ponto_equilibrio_valor
                st.success(f"‚úÖ Acima do ponto de equil√≠brio em R$ {diferenca:,.2f}")
                margem_seguranca = (diferenca / vendas_atual_mes * 100)
                st.write(f"**Margem de Seguran√ßa:** {margem_seguranca:.1f}%")
            else:
                diferenca = ponto_equilibrio_valor - vendas_atual_mes
                st.warning(f"‚ö†Ô∏è Abaixo do ponto de equil√≠brio em R$ {diferenca:,.2f}")
                st.write("Necess√°rio aumentar vendas ou reduzir custos")
        
        # Bot√£o para explicar a origem do c√°lculo (logo abaixo da an√°lise)
        if st.button("üìñ De onde vem esse valor do ponto de equil√≠brio?", key="explain_equilibrio_detalhado"):
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #fff8e1, #fffef7);
                padding: 1.5rem;
                border-radius: 12px;
                border-left: 4px solid #ff9800;
                margin: 1rem 0;
            ">
                <div style="font-size: 1.1rem; font-weight: bold; color: #e65100; margin-bottom: 0.5rem;">
                    Voc√™ precisa vender {format_currency(ponto_equilibrio_valor)} por m√™s
                </div>
                <div style="font-size: 1rem; font-weight: bold; color: #e65100; margin-bottom: 0.5rem;">
                    Porque?:
                </div>
                <div style="color: #e65100; line-height: 1.5;">
                    <strong>F√≥rmula do Ponto de Equil√≠brio:</strong><br>
                    Custos Fixos √∑ Margem de Contribui√ß√£o = Vendas Necess√°rias<br><br>
                    
                    <strong>Seus Custos Fixos Totais:</strong> {format_currency(custos_fixos_total)}<br>
                    ‚Ä¢ Aluguel: {format_currency(aluguel_mensal)}<br>
                    ‚Ä¢ Folha CLT: {format_currency(salarios_clt)}<br>
                    ‚Ä¢ Servi√ßos terceirizados: {format_currency(total_optometrista)}<br>
                    ‚Ä¢ Servi√ßos terceiros: {format_currency(0)}<br>
                    ‚Ä¢ Outros custos fixos: {format_currency(outros_fixos)}<br><br>
                    
                    <strong>Sua Margem de Contribui√ß√£o:</strong> {margem_contribuicao_perc:.1f}%<br>
                    ‚Ä¢ Custos vari√°veis: {total_variaveis_perc:.1f}% (CMV + impostos + comiss√µes)<br>
                    ‚Ä¢ Sobra para cobrir custos fixos: {margem_contribuicao_perc:.1f}%<br><br>
                    
                    <strong>C√°lculo Final:</strong><br>
                    {format_currency(custos_fixos_total)} √∑ {margem_contribuicao_perc:.1f}% = {format_currency(ponto_equilibrio_valor)}<br><br>
                    
                    <strong>Traduzindo:</strong> De cada R$ 100 que voc√™ vende, sobram R$ {margem_contribuicao_perc:.0f} para pagar os custos fixos. Como seus custos fixos s√£o {format_currency(custos_fixos_total)}, voc√™ precisa vender {format_currency(ponto_equilibrio_valor)} para "empatar" (n√£o ter lucro nem preju√≠zo).
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # Salvar todos os indicadores calculados
        st.session_state.business_data.update({
            'receita_anual': receita_anual_total,
            'lucro_operacional': lucro_operacional_total,
            'margem_operacional': margem_operacional,
            'roi_anual': roi_anual,
            'payback_anos': payback_anos,
            'margem_contribuicao_real': margem_contribuicao_perc_real,
            'ponto_equilibrio_status': 'acima' if vendas_atual_mes > ponto_equilibrio_valor else 'abaixo',
            'margem_seguranca': (vendas_atual_mes - ponto_equilibrio_valor) / vendas_atual_mes * 100 if vendas_atual_mes > 0 else 0,
            'projecoes_completas': True
        })
    
    with tab4:
        st.subheader("üí∏ Fluxo de Caixa Projetado")
        
        # Explicar origem do valor inicial
        st.markdown("### üí∞ Origem do Saldo Inicial")
        
        capital_giro_default = st.session_state.business_data.get('capital_giro', 18000)
        reforma_loja = st.session_state.business_data.get('reforma_loja', 0)
        equipamentos_moveis = st.session_state.business_data.get('equipamentos_moveis', 
                                                                st.session_state.business_data.get('equipamentos_total', 
                                                                st.session_state.business_data.get('investimento_equipamentos', 1500)))
        estoque_inicial = st.session_state.business_data.get('estoque_inicial', 0)
        
        valor_total_investimento = reforma_loja + equipamentos_moveis + estoque_inicial + capital_giro_default
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Composi√ß√£o do Investimento Inicial:**")
            st.write(f"‚Ä¢ Reforma da loja: R$ {reforma_loja:,.2f}")
            st.write(f"‚Ä¢ Equipamentos e m√≥veis: R$ {equipamentos_moveis:,.2f}")
            st.write(f"‚Ä¢ Estoque inicial: R$ {estoque_inicial:,.2f}")
            st.write(f"‚Ä¢ Capital de giro: R$ {capital_giro_default:,.2f}")
            st.markdown(f"**‚Ä¢ TOTAL: R$ {valor_total_investimento:,.2f}**")
        
        with col2:
            st.markdown("**O que √© Capital de Giro:**")
            st.write("‚Ä¢ Dinheiro dispon√≠vel para opera√ß√£o di√°ria")
            st.write("‚Ä¢ Pagamento de fornecedores")
            st.write("‚Ä¢ Folha de pagamento dos primeiros meses")
            st.write("‚Ä¢ Despesas operacionais iniciais")
            st.write("‚Ä¢ Reserva para imprevistos")
        
        st.info(f"""
        üí° **Explica√ß√£o do Saldo Inicial de R$ {capital_giro_default:,.2f}**
        
        Este valor representa o capital de giro necess√°rio para iniciar as opera√ß√µes da √≥tica. 
        √â calculado baseado nos custos fixos mensais estimados e representa aproximadamente 
        2-3 meses de opera√ß√£o para garantir fluxo de caixa positivo desde o in√≠cio.
        """)
        
        # Calcular fluxo de caixa m√™s a m√™s
        fluxo_caixa = []
        saldo_acumulado = capital_giro_default  # Usar valor do capital de giro
        
        for mes in range(1, 13):
            if mes == 1:
                receita_mes = vendas_mes_1
            else:
                receita_mes = fluxo_caixa[mes-2]['receita_mes'] * (1 + crescimento_mensal/100)
            
            # Entradas baseadas nas configura√ß√µes da Etapa 5
            percentual_avista = st.session_state.business_data.get('percentual_avista', 70) / 100
            percentual_prazo = 1 - percentual_avista
            prazo_medio_recebimento = st.session_state.business_data.get('prazo_medio_recebimento', 30)
            
            # Usar taxas do Mercado Pago configuradas na Etapa 5
            usar_customizada = st.session_state.business_data.get('usar_taxa_customizada', False)
            if usar_customizada:
                taxa_financeira = st.session_state.business_data.get('taxa_customizada', 4.3) / 100
            else:
                taxa_financeira = st.session_state.business_data.get('taxa_mercado_pago', 4.3) / 100
            
            # Vendas √† vista (sem desconto da financeira)
            entradas_vendas = receita_mes * percentual_avista
            
            # Recebimentos a prazo (com desconto da financeira se aplic√°vel)
            receita_prazo_bruta = receita_mes * percentual_prazo
            receita_prazo_liquida = receita_prazo_bruta * (1 - taxa_financeira)  # Descontar taxa
            
            # Calcular quando receber baseado no prazo configurado
            if prazo_medio_recebimento <= 30:
                # Antecipa√ß√£o: recebe tudo no m√™s seguinte, j√° descontada a taxa
                entradas_recebimentos = receita_prazo_liquida if mes > 1 else 0
            elif prazo_medio_recebimento <= 60:
                # Parcelado: recebe conforme cliente paga, com taxa menor
                entradas_recebimentos = receita_prazo_liquida if mes > 2 else 0
            else:
                # Direto: recebe quando cliente paga, sem taxa mas com risco
                entradas_recebimentos = receita_prazo_liquida if mes > 3 else 0
            
            entradas_total = entradas_vendas + entradas_recebimentos
            
            # Sa√≠das detalhadas com todos os custos simulados
            # Usar configura√ß√µes personalizadas de pagamento aos fornecedores
            pct_mes_atual = st.session_state.business_data.get('pct_pagamento_mes_atual', 20.0) / 100
            pct_mes_seguinte = st.session_state.business_data.get('pct_pagamento_mes_seguinte', 80.0) / 100
            forma_pag = st.session_state.business_data.get('forma_pagamento_fornecedor', 'Parcelado (30/60)')
            desconto_avista = st.session_state.business_data.get('desconto_avista_fornecedor', 2.5) / 100
            
            # Calcular pagamento de fornecedores baseado nos custos reais das tabelas
            # Buscar custos reais dos produtos configurados no sistema
            custo_lentes_real = st.session_state.business_data.get('custo_lentes_total', 0)
            custo_armacoes_real = st.session_state.business_data.get('custo_armacoes_total', 0)
            custo_servicos_real = st.session_state.business_data.get('custo_servicos_total', 0)
            
            # Total de custos baseado nas tabelas reais dos fornecedores
            cmv_real_total = custo_lentes_real + custo_armacoes_real + custo_servicos_real
            
            # Se n√£o h√° dados reais, usar percentual como fallback
            if cmv_real_total <= 0:
                cmv_bruto = receita_mes * (cmv_percentual / 100)
            else:
                # Usar custos reais das tabelas dos fornecedores
                cmv_bruto = cmv_real_total
            
            # Aplicar termos de pagamento configurados
            if forma_pag == "√Ä Vista":
                cmv_pagamento = cmv_bruto * (1 - desconto_avista)  # Aplicar desconto √† vista
            else:
                cmv_pagamento = cmv_bruto * pct_mes_atual  # Pagar conforme configurado
            
            impostos_pagamento = receita_mes * (impostos_percentual / 100)
            
            # Folha de pagamento completa (incluindo todos os funcion√°rios do DP)
            folha_completa = 0
            if hasattr(st.session_state, 'funcionarios') and st.session_state.funcionarios:
                for func in st.session_state.funcionarios:
                    if func['tipo_contrato'] == 'CLT':
                        folha_completa += func['salario_base'] * 1.68  # CLT com encargos
                    else:
                        folha_completa += func['salario_base']  # MEI/Prestador
            else:
                folha_completa = salarios_clt + total_optometrista
            
            # Custos operacionais espec√≠ficos da √≥tica - valores exatos do usu√°rio
            aluguel_pagamento = aluguel_mensal
            
            # Usar exatamente os valores configurados pelo usu√°rio (podem ser zero)
            energia_agua = st.session_state.business_data.get('energia_agua', 0)
            telefone_internet = st.session_state.business_data.get('telefone_internet', 0)
            
            # Servi√ßos profissionais - valores exatos do usu√°rio
            contabilidade = st.session_state.business_data.get('contabilidade', 0)
            optometrista = st.session_state.business_data.get('custo_optometrista_mensal', 0)
            limpeza_seguranca = st.session_state.business_data.get('limpeza_seguranca', 0)
            
            # Custos de vendas e marketing - valores exatos do usu√°rio
            comissoes_vendas = receita_mes * (comissoes_percentual / 100)
            
            # Comiss√µes do captador baseadas na configura√ß√£o
            comissoes_captador_pagamento = 0
            if st.session_state.business_data.get('usar_sistema_captacao', False):
                # Usar o mesmo c√°lculo da DRE para manter consist√™ncia
                ticket_medio_estimado = st.session_state.business_data.get('ticket_medio', 180)
                if ticket_medio_estimado > 0:
                    total_vendas_mes_fc = receita_mes / ticket_medio_estimado
                    percentual_avista_fc = st.session_state.business_data.get('percentual_avista', 70) / 100
                    vendas_avista_fc = total_vendas_mes_fc * percentual_avista_fc
                    vendas_parceladas_fc = total_vendas_mes_fc * (1 - percentual_avista_fc)
                    
                    # Calcular comiss√µes por modalidade
                    tipo_comissao_avista = st.session_state.business_data.get('tipo_comissao_avista', 'Valor fixo por venda')
                    tipo_comissao_parcelada = st.session_state.business_data.get('tipo_comissao_parcelada', 'Valor fixo por venda')
                    
                    if tipo_comissao_avista == "Valor fixo por venda":
                        comissao_avista_fc = vendas_avista_fc * st.session_state.business_data.get('comissao_avista', 30.0)
                    else:
                        receita_avista_fc = receita_mes * percentual_avista_fc
                        comissao_avista_fc = receita_avista_fc * (st.session_state.business_data.get('percentual_comissao_avista', 3.0) / 100)
                    
                    if tipo_comissao_parcelada == "Valor fixo por venda":
                        comissao_parcelada_fc = vendas_parceladas_fc * st.session_state.business_data.get('comissao_parcelada', 20.0)
                    else:
                        receita_parcelada_fc = receita_mes * (1 - percentual_avista_fc)
                        comissao_parcelada_fc = receita_parcelada_fc * (st.session_state.business_data.get('percentual_comissao_parcelada', 2.0) / 100)
                    
                    # Comiss√µes por produto
                    comissao_produtos_fc = 0
                    if st.session_state.business_data.get('usar_comissao_produto', False):
                        vendas_com_lentes_fc = total_vendas_mes_fc * 0.75
                        vendas_com_armacoes_fc = total_vendas_mes_fc * 0.90
                        comissao_produtos_fc = (
                            vendas_com_lentes_fc * st.session_state.business_data.get('comissao_lentes', 10.0) +
                            vendas_com_armacoes_fc * st.session_state.business_data.get('comissao_armacoes', 5.0)
                        )
                    
                    comissoes_captador_pagamento = comissao_avista_fc + comissao_parcelada_fc + comissao_produtos_fc
            
            marketing_publicidade = st.session_state.business_data.get('marketing_publicidade', 0)
            
            # Despesas administrativas - valores exatos do usu√°rio  
            material_escritorio = st.session_state.business_data.get('material_escritorio', 0)
            seguros = st.session_state.business_data.get('seguros', 0)
            manutencao_equipamentos = st.session_state.business_data.get('manutencao_equipamentos', 0)
            
            # Taxas financeiras sobre vendas a prazo
            receita_prazo_valor = receita_mes * percentual_prazo
            taxas_financeiras_pagamento = receita_prazo_valor * taxa_financeira
            
            # Deprecia√ß√£o mensal
            depreciacao = st.session_state.business_data.get('depreciacao_mensal', 0)
            if depreciacao == 0:
                investimento_total = st.session_state.business_data.get('investimento_total', 0)
                if investimento_total > 0:
                    depreciacao = investimento_total * 0.3 / 120  # 30% do investimento em 10 anos
            
            # Total de sa√≠das detalhado
            saidas_total = (cmv_pagamento + impostos_pagamento + taxas_financeiras_pagamento + 
                          folha_completa + aluguel_pagamento + energia_agua + telefone_internet + 
                          contabilidade + optometrista + limpeza_seguranca + 
                          comissoes_vendas + comissoes_captador_pagamento + marketing_publicidade + material_escritorio + 
                          seguros + manutencao_equipamentos + depreciacao)
            
            # Fluxo do m√™s
            fluxo_mes = entradas_total - saidas_total
            saldo_final = saldo_acumulado + fluxo_mes
            
            fluxo_caixa.append({
                'mes': mes,
                'receita_mes': receita_mes,
                'saldo_inicial': saldo_acumulado,
                'entradas_vendas': entradas_vendas,
                'entradas_recebimentos': entradas_recebimentos,
                'entradas_total': entradas_total,
                'cmv_pagamento': cmv_pagamento,
                'impostos_pagamento': impostos_pagamento,
                'taxas_financeiras_pagamento': taxas_financeiras_pagamento,
                'comissoes_captador_pagamento': comissoes_captador_pagamento,
                'folha_completa': folha_completa,
                'aluguel_pagamento': aluguel_pagamento,
                'energia_agua': energia_agua,
                'telefone_internet': telefone_internet,
                'contabilidade': contabilidade,
                'optometrista': optometrista,
                'limpeza_seguranca': limpeza_seguranca,
                'comissoes_vendas': comissoes_vendas,
                'marketing_publicidade': marketing_publicidade,
                'material_escritorio': material_escritorio,
                'seguros': seguros,
                'manutencao_equipamentos': manutencao_equipamentos,
                'depreciacao': depreciacao,
                'saidas_total': saidas_total,
                'fluxo_mes': fluxo_mes,
                'saldo_final': saldo_final
            })
            
            saldo_acumulado = saldo_final
        
        # Tabela do fluxo de caixa
        st.markdown("### üìä Fluxo de Caixa Detalhado")
        
        df_fluxo = pd.DataFrame([
            {
                'Item': 'Saldo Inicial',
                **{f'M√™s {i+1}': f"R$ {fc['saldo_inicial']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': f'(+) Vendas √† Vista ({int(st.session_state.business_data.get("percentual_avista", 70))}%)',
                **{f'M√™s {i+1}': f"R$ {fc['entradas_vendas']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': f'(+) Recebimentos ({100 - int(st.session_state.business_data.get("percentual_avista", 70))}%)',
                **{f'M√™s {i+1}': f"R$ {fc['entradas_recebimentos']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '= Total Entradas',
                **{f'M√™s {i+1}': f"R$ {fc['entradas_total']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Pagto. Fornecedores',
                **{f'M√™s {i+1}': f"R$ {fc['cmv_pagamento']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Impostos',
                **{f'M√™s {i+1}': f"R$ {fc['impostos_pagamento']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Taxas Financeiras',
                **{f'M√™s {i+1}': f"R$ {fc['taxas_financeiras_pagamento']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Folha de Pagamento',
                **{f'M√™s {i+1}': f"R$ {fc['folha_completa']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Aluguel',
                **{f'M√™s {i+1}': f"R$ {fc['aluguel_pagamento']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Energia/√Ågua',
                **{f'M√™s {i+1}': f"R$ {fc['energia_agua']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Telefone/Internet',
                **{f'M√™s {i+1}': f"R$ {fc['telefone_internet']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Contabilidade',
                **{f'M√™s {i+1}': f"R$ {fc['contabilidade']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Optometrista',
                **{f'M√™s {i+1}': f"R$ {fc['optometrista']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Limpeza/Seguran√ßa',
                **{f'M√™s {i+1}': f"R$ {fc['limpeza_seguranca']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Comiss√µes',
                **{f'M√™s {i+1}': f"R$ {fc['comissoes_vendas']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Comiss√µes Captador',
                **{f'M√™s {i+1}': f"R$ {fc['comissoes_captador_pagamento']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Marketing',
                **{f'M√™s {i+1}': f"R$ {fc['marketing_publicidade']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Material Escrit√≥rio',
                **{f'M√™s {i+1}': f"R$ {fc['material_escritorio']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Seguros',
                **{f'M√™s {i+1}': f"R$ {fc['seguros']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Manuten√ß√£o',
                **{f'M√™s {i+1}': f"R$ {fc['manutencao_equipamentos']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '(-) Deprecia√ß√£o',
                **{f'M√™s {i+1}': f"R$ {fc['depreciacao']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '= Total Sa√≠das',
                **{f'M√™s {i+1}': f"R$ {fc['saidas_total']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '= Fluxo do M√™s',
                **{f'M√™s {i+1}': f"R$ {fc['fluxo_mes']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            },
            {
                'Item': '= SALDO FINAL',
                **{f'M√™s {i+1}': f"R$ {fc['saldo_final']:,.0f}" for i, fc in enumerate(fluxo_caixa)}
            }
        ])
        
        st.dataframe(df_fluxo, use_container_width=True)
        
        # Auditoria detalhada linha por linha
        st.markdown("### üîç Auditoria Detalhada - Fluxo de Caixa")
        st.markdown("*Clique em cada item para ver f√≥rmulas, origem dos dados e mem√≥ria de c√°lculo*")
        
        item_fluxo = st.selectbox(
            "Selecione um item para auditoria:",
            ["Saldo Inicial", "Vendas √† Vista", "Recebimentos", "Pagamento Fornecedores", "Impostos", 
             "Taxas Financeiras", "Folha de Pagamento", "Aluguel", "Energia/√Ågua", "Telefone/Internet", "Contabilidade",
             "Optometrista", "Limpeza/Seguran√ßa", "Comiss√µes", "Marketing", "Material Escrit√≥rio",
             "Seguros", "Manuten√ß√£o", "Deprecia√ß√£o"]
        )
        
        if item_fluxo == "Saldo Inicial":
            st.markdown("**üìä AUDITORIA: Saldo Inicial (Capital de Giro)**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Capital de Giro = Custos Fixos Mensais √ó 2,5 meses")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {capital_giro_default:,.2f}")
            st.write("‚Ä¢ Base: Custos operacionais estimados")
            st.write("‚Ä¢ Multiplicador: 2,5 meses (padr√£o mercado)")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Representa reserva para primeiros meses de opera√ß√£o")
            st.write("‚Ä¢ Garante pagamento de fornecedores antes recebimento")
            st.write("‚Ä¢ Cobre varia√ß√µes sazonais de faturamento")
            st.write("‚Ä¢ Buffer de seguran√ßa para imprevistos")
            
        elif item_fluxo == "Vendas √† Vista":
            percentual_config = st.session_state.business_data.get('percentual_avista', 70)
            st.markdown("**üìä AUDITORIA: Vendas √† Vista**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code(f"Vendas √† Vista = Receita Mensal √ó {percentual_config}%")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Percentual configurado: {percentual_config}% (Etapa 5 - Produtos e Servi√ßos)")
            st.write("‚Ä¢ Base de c√°lculo: Receita bruta mensal")
            st.write("‚Ä¢ Formas de pagamento √† vista: Dinheiro, PIX, D√©bito")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            exemplo_mes1 = vendas_mes_1 * (percentual_config / 100)
            st.write(f"‚Ä¢ Exemplo M√™s 1: R$ {vendas_mes_1:,.2f} √ó {percentual_config}% = R$ {exemplo_mes1:,.2f}")
            st.write("‚Ä¢ Recebimento: No mesmo m√™s da venda")
            st.write("‚Ä¢ Impacto no fluxo: Positivo imediato")
        
        elif item_fluxo == "Recebimentos":
            percentual_config = st.session_state.business_data.get('percentual_avista', 70)
            percentual_prazo = 100 - percentual_config
            prazo_config = st.session_state.business_data.get('prazo_medio_recebimento', 30)
            
            # Usar taxas do Mercado Pago configuradas na Etapa 5
            usar_customizada = st.session_state.business_data.get('usar_taxa_customizada', False)
            if usar_customizada:
                taxa_financeira = st.session_state.business_data.get('taxa_customizada', 4.3)
                modalidade = "Customizada"
            else:
                taxa_mp = st.session_state.business_data.get('taxa_mercado_pago', 4.3)
                opcao_mp = st.session_state.business_data.get('opcao_recebimento_mp', 'Cr√©dito √† vista - 14 dias (3,79%)')
                taxa_financeira = taxa_mp
                if "PIX" in opcao_mp:
                    modalidade = "PIX"
                elif "D√©bito" in opcao_mp:
                    modalidade = "D√©bito"
                elif "Na hora" in opcao_mp:
                    modalidade = "Cr√©dito na hora"
                elif "14 dias" in opcao_mp:
                    modalidade = "Cr√©dito 14 dias"
                elif "30 dias" in opcao_mp:
                    modalidade = "Cr√©dito 30 dias"
                else:
                    modalidade = "Cr√©dito"
            
            st.markdown("**üìä AUDITORIA: Recebimentos a Prazo**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code(f"Recebimentos = (Receita √ó {percentual_prazo}%) √ó (100% - {taxa_financeira}%)")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Percentual a prazo: {percentual_prazo}% (Etapa 5 - Produtos e Servi√ßos)")
            st.write(f"‚Ä¢ Prazo m√©dio: {prazo_config} dias")
            st.write(f"‚Ä¢ Modalidade: {modalidade}")
            st.write(f"‚Ä¢ Taxa da financeira: {taxa_financeira}%")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.markdown("**Exemplo pr√°tico:**")
            st.write(f"‚Ä¢ Cliente compra √≥culos de R$ 500 parcelado em 3x")
            st.write(f"‚Ä¢ Valor bruto a prazo: R$ 500 √ó {percentual_prazo}% = R$ {500 * (percentual_prazo / 100):,.2f}")
            
            if taxa_financeira > 0:
                valor_liquido = 500 * (percentual_prazo / 100) * (1 - taxa_financeira / 100)
                st.write(f"‚Ä¢ Taxa da financeira: R$ {500 * (percentual_prazo / 100):,.2f} √ó {taxa_financeira}% = R$ {500 * (percentual_prazo / 100) * (taxa_financeira / 100):,.2f}")
                st.write(f"‚Ä¢ **Valor l√≠quido recebido: R$ {valor_liquido:,.2f}**")
                st.write(f"‚Ä¢ Prazo de recebimento: {prazo_config} dias")
            else:
                st.write(f"‚Ä¢ **Valor recebido: R$ {500 * (percentual_prazo / 100):,.2f}** (sem taxa)")
                st.write("‚Ä¢ Risco: Inadimpl√™ncia assumida pela √≥tica")
            
            st.markdown("**üí° Entendimento:**")
            st.write("‚Ä¢ Cliente pode parcelar em quantas vezes quiser")
            st.write("‚Ä¢ Seu recebimento depende do contrato com a financeira")
            st.write(f"‚Ä¢ {modalidade}: melhor fluxo de caixa vs menor taxa")
        
        elif item_fluxo == "Pagamento Fornecedores":
            st.markdown("**üìä AUDITORIA: Pagamento a Fornecedores (CMV)**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code(f"CMV = Custos Reais dos Produtos ou {cmv_percentual}% da Receita")
            st.markdown("**üìç Origem dos Dados:**")
            custo_lentes_real = st.session_state.business_data.get('custo_lentes_total', 0)
            custo_armacoes_real = st.session_state.business_data.get('custo_armacoes_total', 0)
            custo_servicos_real = st.session_state.business_data.get('custo_servicos_total', 0)
            cmv_real_total = custo_lentes_real + custo_armacoes_real + custo_servicos_real
            
            if cmv_real_total > 0:
                st.write(f"‚Ä¢ Custos reais da precifica√ß√£o: R$ {cmv_real_total:,.2f}")
                st.write(f"  - Lentes: R$ {custo_lentes_real:,.2f}")
                st.write(f"  - Arma√ß√µes: R$ {custo_armacoes_real:,.2f}")
                st.write(f"  - Servi√ßos: R$ {custo_servicos_real:,.2f}")
            else:
                st.write(f"‚Ä¢ Percentual estimado: {cmv_percentual}% da receita")
                st.write("‚Ä¢ Configure produtos na Etapa 5 para custos reais")
            
            st.write("‚Ä¢ Fornecedores: ATAK, Brasil Lentes, GOLD, DSMHD")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            if cmv_real_total > 0:
                exemplo_cmv = cmv_real_total
                st.write(f"‚Ä¢ Valor fixo mensal: R$ {exemplo_cmv:,.2f}")
            else:
                exemplo_cmv = vendas_mes_1 * (cmv_percentual / 100)
                st.write(f"‚Ä¢ Exemplo M√™s 1: R$ {vendas_mes_1:,.2f} √ó {cmv_percentual}% = R$ {exemplo_cmv:,.2f}")
            st.write("‚Ä¢ Prazo pagamento: Conforme negociado com fornecedores")
            st.write("‚Ä¢ Impacto: Maior custo do neg√≥cio ap√≥s impostos")
        
        elif item_fluxo == "Impostos":
            regime = st.session_state.business_data.get('regime_tributario', 'Simples Nacional')
            st.markdown("**üìä AUDITORIA: Impostos**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code(f"Impostos = Receita Mensal √ó {impostos_percentual}%")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Regime tribut√°rio: {regime}")
            st.write(f"‚Ä¢ Al√≠quota aplicada: {impostos_percentual}% (legisla√ß√£o brasileira)")
            if regime == "Simples Nacional":
                st.write("‚Ä¢ Anexo I - Com√©rcio (√≥ticas)")
                st.write("‚Ä¢ Impostos unificados: IRPJ, CSLL, PIS, COFINS, ICMS, CPP, ISS")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            exemplo_imposto = vendas_mes_1 * (impostos_percentual / 100)
            st.write(f"‚Ä¢ Exemplo M√™s 1: R$ {vendas_mes_1:,.2f} √ó {impostos_percentual}% = R$ {exemplo_imposto:,.2f}")
            st.write("‚Ä¢ Pagamento: DAS mensal at√© dia 20")
            st.write("‚Ä¢ Base legal: Lei Complementar 123/2006 (Simples Nacional)")
            st.write("‚Ä¢ Impacto: Obriga√ß√£o fiscal autom√°tica sobre faturamento")
        
        elif item_fluxo == "Taxas Financeiras":
            st.markdown("**üìä AUDITORIA: Taxas Financeiras**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Taxas = Receita √ó % Vendas a Prazo √ó Taxa da Financeira")
            st.markdown("**üìç Origem dos Dados:**")
            
            usar_customizada = st.session_state.business_data.get('usar_taxa_customizada', False)
            percentual_avista = st.session_state.business_data.get('percentual_avista', 70)
            percentual_prazo = 100 - percentual_avista
            
            if usar_customizada:
                taxa_config = st.session_state.business_data.get('taxa_customizada', 4.3)
                st.write(f"‚Ä¢ Taxa customizada: {taxa_config}%")
                st.write("‚Ä¢ Fonte: Configura√ß√£o manual (Etapa 5)")
            else:
                taxa_config = st.session_state.business_data.get('taxa_mercado_pago', 4.3)
                opcao_mp = st.session_state.business_data.get('opcao_recebimento_mp', 'Cr√©dito √† vista - 14 dias (3,79%)')
                st.write(f"‚Ä¢ Taxa Mercado Pago: {taxa_config}%")
                st.write(f"‚Ä¢ Modalidade: {opcao_mp}")
                st.write("‚Ä¢ Fonte: Configura√ß√£o Etapa 5 - Produtos e Servi√ßos")
            
            st.write(f"‚Ä¢ Vendas √† vista: {percentual_avista}% (taxa 0%)")
            st.write(f"‚Ä¢ Vendas a prazo: {percentual_prazo}% (com taxa)")
            
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            exemplo_receita = vendas_mes_1
            exemplo_prazo = exemplo_receita * (percentual_prazo / 100)
            exemplo_taxa = exemplo_prazo * (taxa_config / 100)
            
            st.write(f"‚Ä¢ Exemplo M√™s 1:")
            st.write(f"  - Receita total: R$ {exemplo_receita:,.2f}")
            st.write(f"  - Vendas a prazo ({percentual_prazo}%): R$ {exemplo_prazo:,.2f}")
            st.write(f"  - Taxa financeira ({taxa_config}%): R$ {exemplo_taxa:,.2f}")
            st.write(f"‚Ä¢ **Custo mensal das taxas: R$ {exemplo_taxa:,.2f}**")
            
            st.markdown("**üí° Entendimento:**")
            st.write("‚Ä¢ Custo das vendas parceladas e cart√£o de cr√©dito")
            st.write("‚Ä¢ Reduz o valor l√≠quido recebido das vendas a prazo")
            st.write("‚Ä¢ Impacto direto no fluxo de caixa e margem")
        
        elif item_fluxo == "Folha de Pagamento":
            st.markdown("**üìä AUDITORIA: Folha de Pagamento**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Folha Total = Œ£(Sal√°rio Base √ó Encargos por Tipo)")
            st.markdown("**üìç Origem dos Dados:**")
            if hasattr(st.session_state, 'funcionarios') and st.session_state.funcionarios:
                st.write(f"‚Ä¢ Funcion√°rios cadastrados: {len(st.session_state.funcionarios)}")
                st.write("‚Ä¢ Fonte: DP e Tributa√ß√£o (sistema integrado)")
                custo_total_folha = 0
                clt_count = 0
                terceirizado_count = 0
                for func in st.session_state.funcionarios:
                    if func['tipo_contrato'] == 'CLT':
                        custo_func = func['salario_base'] * 1.68
                        clt_count += 1
                    else:
                        custo_func = func['salario_base']
                        terceirizado_count += 1
                    custo_total_folha += custo_func
                st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
                st.write(f"‚Ä¢ Funcion√°rios CLT: {clt_count} (com encargos 68%)")
                st.write(f"‚Ä¢ Terceirizados/MEI: {terceirizado_count} (sem encargos)")
                for func in st.session_state.funcionarios:
                    if func['tipo_contrato'] == 'CLT':
                        custo_func = func['salario_base'] * 1.68
                        st.write(f"  - {func['nome']} ({func['cargo']}) CLT: R$ {func['salario_base']:,.2f} √ó 1.68 = R$ {custo_func:,.2f}")
                    else:
                        st.write(f"  - {func['nome']} ({func['cargo']}) {func['tipo_contrato']}: R$ {func['salario_base']:,.2f}")
                st.write(f"‚Ä¢ **Total mensal: R$ {custo_total_folha:,.2f}**")
            else:
                st.write(f"‚Ä¢ Folha CLT estimada: R$ {salarios_clt:,.2f}")
                st.write(f"‚Ä¢ Servi√ßos terceirizados: R$ {total_optometrista:,.2f}")
                st.write("‚Ä¢ Configure funcion√°rios no DP para c√°lculo detalhado")
                st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
                st.write("‚Ä¢ Encargos CLT incluem: INSS, FGTS, 13¬∫, f√©rias, rescis√£o")
                st.write("‚Ä¢ Base legal: CLT e legisla√ß√£o trabalhista brasileira")
        
        elif item_fluxo == "Aluguel":
            aluguel_valor = st.session_state.business_data.get('aluguel_mensal', 0)
            st.markdown("**üìä AUDITORIA: Aluguel**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Aluguel = Valor Fixo Mensal")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {aluguel_valor:,.2f}")
            st.write("‚Ä¢ Fonte: Etapa 9 - Investimento Inicial")
            st.write("‚Ä¢ Tipo: Custo fixo mensal")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Valor exato configurado pelo usu√°rio")
            st.write("‚Ä¢ Pago mensalmente, independente do faturamento")
            st.write("‚Ä¢ Representa maior custo fixo da opera√ß√£o")
            if aluguel_valor == 0:
                st.warning("‚Ä¢ Valor zerado - verifique se √© propriedade pr√≥pria")
        
        elif item_fluxo == "Energia/√Ågua":
            energia_agua_valor = st.session_state.business_data.get('energia_agua', 0)
            st.markdown("**üìä AUDITORIA: Energia/√Ågua**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Energia/√Ågua = Valor Fixo + Vari√°vel")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {energia_agua_valor:,.2f}")
            st.write("‚Ä¢ Tipo: Custo semi-vari√°vel")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Inclui: Energia el√©trica + √Ågua + Esgoto")
            st.write("‚Ä¢ Componentes: Taxa fixa + consumo vari√°vel")
            st.write("‚Ä¢ Estimativa baseada no funcionamento da √≥tica")
            if energia_agua_valor == 0:
                st.warning("‚Ä¢ Valor zerado - verifique configura√ß√£o")
        
        elif item_fluxo == "Telefone/Internet":
            telefone_internet_valor = st.session_state.business_data.get('telefone_internet', 0)
            st.markdown("**üìä AUDITORIA: Telefone/Internet**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Telefone/Internet = Planos Fixos Mensais")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {telefone_internet_valor:,.2f}")
            st.write("‚Ä¢ Tipo: Custo fixo operacional")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Inclui: Internet banda larga + telefone fixo/m√≥vel")
            st.write("‚Ä¢ Essencial para: Sistema de vendas, comunica√ß√£o")
            st.write("‚Ä¢ Valor mensal fixo contratual")
            if telefone_internet_valor == 0:
                st.warning("‚Ä¢ Valor zerado - verifique configura√ß√£o")
        
        elif item_fluxo == "Contabilidade":
            contabilidade_valor = st.session_state.business_data.get('contabilidade', 0)
            st.markdown("**üìä AUDITORIA: Contabilidade**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Contabilidade = Honor√°rios Mensais")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {contabilidade_valor:,.2f}")
            st.write("‚Ä¢ Tipo: Servi√ßo profissional obrigat√≥rio")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Servi√ßos: Escritura√ß√£o cont√°bil, impostos, folha")
            st.write("‚Ä¢ Obrigatoriedade: Pessoa jur√≠dica")
            st.write("‚Ä¢ Frequ√™ncia: Mensal")
            if contabilidade_valor == 0:
                st.warning("‚Ä¢ Valor zerado - contabilidade √© obrigat√≥ria para PJ")
        
        elif item_fluxo == "Optometrista":
            optometrista_valor = st.session_state.business_data.get('custo_optometrista_mensal', 0)
            st.markdown("**üìä AUDITORIA: Optometrista**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Optometrista = Di√°ria √ó Dias no M√™s")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor mensal: R$ {optometrista_valor:,.2f}")
            st.write("‚Ä¢ Fonte: Servi√ßos Profissionais por Di√°ria")
            st.write("‚Ä¢ Tipo: Prestador de servi√ßos")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            diaria = st.session_state.business_data.get('diaria_optometrista', 150)
            dias = st.session_state.business_data.get('dias_optometrista_mes', 4)
            st.write(f"‚Ä¢ Di√°ria: R$ {diaria:,.2f}")
            st.write(f"‚Ä¢ Dias/m√™s: {dias}")
            st.write(f"‚Ä¢ Total: R$ {diaria:,.2f} √ó {dias} = R$ {optometrista_valor:,.2f}")
            st.write("‚Ä¢ Servi√ßos: Exames de vista, prescri√ß√µes")
            if optometrista_valor == 0:
                st.info("‚Ä¢ Opcional - para √≥tica com exames completos")
        
        elif item_fluxo == "Limpeza/Seguran√ßa":
            limpeza_valor = st.session_state.business_data.get('limpeza_seguranca', 0)
            st.markdown("**üìä AUDITORIA: Limpeza/Seguran√ßa**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Limpeza/Seguran√ßa = Servi√ßos Terceirizados")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {limpeza_valor:,.2f}")
            st.write("‚Ä¢ Tipo: Servi√ßo terceirizado")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Inclui: Limpeza di√°ria + monitoramento")
            st.write("‚Ä¢ Frequ√™ncia: Di√°ria para limpeza")
            st.write("‚Ä¢ Valor mensal fixo contratual")
            if limpeza_valor == 0:
                st.info("‚Ä¢ Opcional - pode ser feito pelo pr√≥prio propriet√°rio")
        
        elif item_fluxo == "Comiss√µes":
            comissoes_percent = st.session_state.business_data.get('comissoes_percentual', 3)
            st.markdown("**üìä AUDITORIA: Comiss√µes de Vendas**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code(f"Comiss√µes = Receita Mensal √ó {comissoes_percent}%")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Percentual: {comissoes_percent}% sobre vendas")
            st.write("‚Ä¢ Tipo: Custo vari√°vel sobre faturamento")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            exemplo_comissao = vendas_mes_1 * (comissoes_percent / 100)
            st.write(f"‚Ä¢ Exemplo M√™s 1: R$ {vendas_mes_1:,.2f} √ó {comissoes_percent}% = R$ {exemplo_comissao:,.2f}")
            st.write("‚Ä¢ Base: Faturamento bruto mensal")
            st.write("‚Ä¢ Pagamento: Mensal conforme vendas realizadas")
        
        elif item_fluxo == "Marketing":
            marketing_valor = st.session_state.business_data.get('marketing_publicidade', 0)
            st.markdown("**üìä AUDITORIA: Marketing/Publicidade**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Marketing = Investimento Mensal Fixo")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {marketing_valor:,.2f}")
            st.write("‚Ä¢ Tipo: Investimento em divulga√ß√£o")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Inclui: Publicidade online, impressos, promoc√µes")
            st.write("‚Ä¢ Estrat√©gia: Atrair e reter clientes")
            st.write("‚Ä¢ Valor mensal planejado")
            if marketing_valor == 0:
                st.warning("‚Ä¢ Marketing √© essencial para crescimento do neg√≥cio")
        
        elif item_fluxo == "Material Escrit√≥rio":
            material_valor = st.session_state.business_data.get('material_escritorio', 0)
            st.markdown("**üìä AUDITORIA: Material de Escrit√≥rio**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Material Escrit√≥rio = Consumo Mensal")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {material_valor:,.2f}")
            st.write("‚Ä¢ Tipo: Custo operacional vari√°vel")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Inclui: Papel, canetas, formul√°rios, impress√µes")
            st.write("‚Ä¢ Consumo: Conforme opera√ß√£o da √≥tica")
            if material_valor == 0:
                st.info("‚Ä¢ Valor baixo mas necess√°rio para opera√ß√£o")
        
        elif item_fluxo == "Seguros":
            seguros_valor = st.session_state.business_data.get('seguros', 0)
            st.markdown("**üìä AUDITORIA: Seguros**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Seguros = Pr√™mios Mensais")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {seguros_valor:,.2f}")
            st.write("‚Ä¢ Tipo: Prote√ß√£o patrimonial")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Inclui: Seguro contra inc√™ndio, roubo, responsabilidade civil")
            st.write("‚Ä¢ Prote√ß√£o: Estoque, equipamentos, estabelecimento")
            if seguros_valor == 0:
                st.warning("‚Ä¢ Seguros s√£o importantes para prote√ß√£o do neg√≥cio")
        
        elif item_fluxo == "Manuten√ß√£o":
            manutencao_valor = st.session_state.business_data.get('manutencao_equipamentos', 0)
            st.markdown("**üìä AUDITORIA: Manuten√ß√£o de Equipamentos**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Manuten√ß√£o = Custos Preventivos + Corretivos")
            st.markdown("**üìç Origem dos Dados:**")
            st.write(f"‚Ä¢ Valor configurado: R$ {manutencao_valor:,.2f}")
            st.write("‚Ä¢ Tipo: Conserva√ß√£o de ativos")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Inclui: Equipamentos √≥ticos, sistema, mobili√°rio")
            st.write("‚Ä¢ Frequ√™ncia: Preventiva + corretiva conforme necess√°rio")
            if manutencao_valor == 0:
                st.info("‚Ä¢ Importante para manter equipamentos funcionando")
        
        elif item_fluxo == "Deprecia√ß√£o":
            depreciacao_valor = st.session_state.business_data.get('depreciacao_mensal', 0)
            investimento_total = st.session_state.business_data.get('investimento_total', 0)
            st.markdown("**üìä AUDITORIA: Deprecia√ß√£o**")
            st.markdown("---")
            st.markdown("**üî¢ F√≥rmula:**")
            st.code("Deprecia√ß√£o = (Investimento √ó 30%) √∑ 120 meses")
            st.markdown("**üìç Origem dos Dados:**")
            if depreciacao_valor == 0 and investimento_total > 0:
                depreciacao_calc = investimento_total * 0.3 / 120
                st.write(f"‚Ä¢ Investimento total: R$ {investimento_total:,.2f}")
                st.write(f"‚Ä¢ Deprecia√ß√£o calculada: R$ {depreciacao_calc:,.2f}/m√™s")
            else:
                st.write(f"‚Ä¢ Valor configurado: R$ {depreciacao_valor:,.2f}")
            st.write("‚Ä¢ Base: 30% do investimento em 10 anos")
            st.markdown("**üéØ Mem√≥ria de C√°lculo:**")
            st.write("‚Ä¢ Representa desgaste dos equipamentos ao longo do tempo")
            st.write("‚Ä¢ Contabiliza√ß√£o do custo dos ativos fixos")
            st.write("‚Ä¢ M√©todo linear: valor igual todos os meses")
    
    # Store financial projections for other steps
    st.session_state.business_data.update({
        'vendas_mes_1': vendas_mes_1,
        'crescimento_mensal': crescimento_mensal,
        'cmv_percentual': cmv_percentual,
        'impostos_percentual': impostos_percentual,
        'comissoes_percentual': comissoes_percentual,
        'aluguel': aluguel_mensal,
        'salarios_clt': salarios_clt,
        'total_optometrista': total_optometrista,
        'salarios_total': salarios_clt + total_optometrista
    })
    save_user_data()
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step10"):
            st.session_state.step = 9
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step10"):
            st.session_state.step = 11
            st.rerun()

def show_step_11():
    """Etapa 11: An√°lise de Viabilidade"""
    st.header("1Ô∏è‚É£1Ô∏è‚É£ An√°lise de Viabilidade")
    st.markdown("**FASE 11: VIABILIDADE** - An√°lise matem√°tica da viabilidade do neg√≥cio")
    
    # Recuperar dados das etapas anteriores
    investimento_total = st.session_state.business_data.get('investimento_total', 81500)
    receita_anual = st.session_state.business_data.get('receita_anual', 180000)
    lucro_operacional = st.session_state.business_data.get('lucro_operacional', 25000)
    ebitda = st.session_state.business_data.get('ebitda', 26350)
    margem_contribuicao_perc = st.session_state.business_data.get('margem_contribuicao_perc', 44.0)
    
    tab1, tab2, tab3 = st.tabs(["üìä Indicadores Chave", "üíπ An√°lise de Sensibilidade", "üéØ Cen√°rios"])
    
    with tab1:
        st.subheader("üìä Indicadores de Viabilidade")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Rentabilidade**")
            
            # ROI
            roi = (lucro_operacional / investimento_total) * 100 if investimento_total > 0 else 0
            st.metric("ROI Anual", f"{roi:.1f}%", 
                     delta="Acima de 20% = Excelente" if roi > 20 else "Abaixo de 15% = Aten√ß√£o")
            
            # Bot√£o explica√ß√£o ROI
            if st.button("üìñ De onde vem esse ROI?", key="explain_roi"):
                resultado = 'Excelente retorno!' if roi > 20 else 'Considere otimizar para melhorar o retorno.' if roi < 15 else 'Retorno adequado.'
                
                st.success(f"""
                üí∞ **ROI de {roi:.1f}% ao ano**
                
                **F√≥rmula:** (Lucro Operacional √∑ Investimento Total) √ó 100
                
                **Seus N√∫meros:**
                ‚Ä¢ Lucro Operacional: {format_currency(lucro_operacional)}
                ‚Ä¢ Investimento Total: {format_currency(investimento_total)}
                
                **C√°lculo:** ({format_currency(lucro_operacional)} √∑ {format_currency(investimento_total)}) √ó 100 = {roi:.1f}%
                
                **Em resumo:** Para cada R$ 100 investidos, voc√™ ganha R$ {roi:.0f} por ano. {resultado}
                """)
            
            # Margem Operacional
            margem_operacional = (lucro_operacional / receita_anual) * 100 if receita_anual > 0 else 0
            st.metric("Margem Operacional", f"{margem_operacional:.1f}%",
                     delta="Acima de 10% = Boa" if margem_operacional > 10 else "Melhorar efici√™ncia")
            
            # Bot√£o explica√ß√£o Margem Operacional
            if st.button("üìñ De onde vem essa margem?", key="explain_margem"):
                resultado = 'Margem saud√°vel!' if margem_operacional > 10 else 'Considere revisar custos para melhorar a margem.' if margem_operacional < 5 else 'Margem adequada.'
                st.info(f"""
                üìà **Margem Operacional de {margem_operacional:.1f}%**
                
                **F√≥rmula:** (Lucro Operacional √∑ Receita Anual) √ó 100
                
                **Seus N√∫meros:**
                ‚Ä¢ Lucro Operacional: {format_currency(lucro_operacional)}
                ‚Ä¢ Receita Anual: {format_currency(receita_anual)}
                
                **C√°lculo:** ({format_currency(lucro_operacional)} √∑ {format_currency(receita_anual)}) √ó 100 = {margem_operacional:.1f}%
                
                **Em resumo:** De cada R$ 100 vendidos, sobram R$ {margem_operacional:.0f} como lucro l√≠quido. {resultado}
                """)
            
            # EBITDA Margin
            ebitda_margin = (ebitda / receita_anual) * 100 if receita_anual > 0 else 0
            st.metric("Margem EBITDA", f"{ebitda_margin:.1f}%",
                     delta="Acima de 15% = Saud√°vel" if ebitda_margin > 15 else "Revisar custos")
            
            # Bot√£o explica√ß√£o EBITDA
            if st.button("üìñ De onde vem o EBITDA?", key="explain_ebitda"):
                resultado = 'Excelente gera√ß√£o de caixa!' if ebitda_margin > 15 else 'Considere otimizar a opera√ß√£o.' if ebitda_margin < 10 else 'Gera√ß√£o de caixa adequada.'
                st.info(f"""
                üìä **Margem EBITDA de {ebitda_margin:.1f}%**
                
                **O que √©:** Lucro antes de Juros, Impostos, Deprecia√ß√£o e Amortiza√ß√£o
                **F√≥rmula:** (EBITDA √∑ Receita Anual) √ó 100
                
                **Seus N√∫meros:**
                ‚Ä¢ EBITDA: {format_currency(ebitda)}
                ‚Ä¢ Receita Anual: {format_currency(receita_anual)}
                
                **C√°lculo:** ({format_currency(ebitda)} √∑ {format_currency(receita_anual)}) √ó 100 = {ebitda_margin:.1f}%
                
                **Em resumo:** Sua opera√ß√£o gera {ebitda_margin:.1f}% de caixa sobre as vendas. {resultado}
                """)
            
            # Payback
            payback = investimento_total / lucro_operacional if lucro_operacional > 0 else float('inf')
            payback_text = f"{payback:.1f} anos" if payback != float('inf') else "Indefinido"
            st.metric("Payback", payback_text,
                     delta="Menos de 4 anos = Bom" if payback < 4 else "Muito longo")
            
            # Bot√£o explica√ß√£o Payback
            if st.button("üìñ De onde vem esse tempo?", key="explain_payback"):
                resultado = 'Excelente tempo de retorno!' if payback < 3 else 'Tempo aceit√°vel.' if payback < 5 else 'Considere otimizar para acelerar o retorno.'
                st.info(f"""
                ‚è±Ô∏è **Payback de {payback:.1f} anos**
                
                **F√≥rmula:** Investimento Total √∑ Lucro Operacional Anual
                
                **Seus N√∫meros:**
                ‚Ä¢ Investimento Total: {format_currency(investimento_total)}
                ‚Ä¢ Lucro Operacional: {format_currency(lucro_operacional)}
                
                **C√°lculo:** {format_currency(investimento_total)} √∑ {format_currency(lucro_operacional)} = {payback:.1f} anos
                
                **Em resumo:** Com lucro de {format_currency(lucro_operacional)} por ano, voc√™ recupera o investimento em {payback:.1f} anos. {resultado}
                """)
        
        with col2:
            st.markdown("**An√°lise de Risco**")
            
            # Ponto de Equil√≠brio
            ponto_equilibrio = st.session_state.business_data.get('ponto_equilibrio_valor', 100000)
            margem_seguranca = ((receita_anual - ponto_equilibrio) / receita_anual) * 100 if receita_anual > 0 else 0
            st.metric("Margem de Seguran√ßa", f"{margem_seguranca:.1f}%",
                     delta="Acima de 30% = Seguro" if margem_seguranca > 30 else "Risco elevado")
            
            # Bot√£o explica√ß√£o Margem de Seguran√ßa
            if st.button("üìñ De onde vem essa margem?", key="explain_margem_seg"):
                resultado = 'Margem segura!' if margem_seguranca > 30 else 'Risco elevado - considere reduzir custos ou aumentar vendas.' if margem_seguranca < 15 else 'Margem aceit√°vel.'
                st.warning(f"""
                üõ°Ô∏è **Margem de Seguran√ßa de {margem_seguranca:.1f}%**
                
                **F√≥rmula:** ((Receita Atual - Ponto Equil√≠brio) √∑ Receita Atual) √ó 100
                
                **Seus N√∫meros:**
                ‚Ä¢ Receita Anual: {format_currency(receita_anual)}
                ‚Ä¢ Ponto de Equil√≠brio: {format_currency(ponto_equilibrio)}
                ‚Ä¢ Diferen√ßa: {format_currency(receita_anual - ponto_equilibrio)}
                
                **C√°lculo:** (({format_currency(receita_anual)} - {format_currency(ponto_equilibrio)}) √∑ {format_currency(receita_anual)}) √ó 100 = {margem_seguranca:.1f}%
                
                **Em resumo:** Suas vendas podem cair {margem_seguranca:.1f}% antes de ter preju√≠zo. {resultado}
                """)
            
            # Grau de Alavancagem Operacional
            custos_fixos_anual = (st.session_state.business_data.get('aluguel', 0) + 
                                 st.session_state.business_data.get('salarios_clt', 2550) +
                                 st.session_state.business_data.get('total_optometrista', 5000) +
                                 st.session_state.business_data.get('outros_fixos', 500)) * 12
            
            gao = (receita_anual * (margem_contribuicao_perc/100)) / lucro_operacional if lucro_operacional > 0 else 0
            st.metric("Alavancagem Operacional", f"{gao:.1f}x",
                     delta="Menor = Menos risco" if gao < 3 else "Alto risco operacional")
            
            # Bot√£o explica√ß√£o Alavancagem Operacional
            if st.button("üìñ De onde vem essa alavancagem?", key="explain_alavancagem"):
                margem_contribuicao_valor = receita_anual * (margem_contribuicao_perc/100)
                resultado = 'Baixo risco operacional.' if gao < 3 else 'Alto risco - pequenas varia√ß√µes nas vendas impactam muito o lucro.' if gao > 5 else 'Risco moderado.'
                st.info(f"""
                ‚öñÔ∏è **Alavancagem Operacional de {gao:.1f}x**
                
                **F√≥rmula:** Margem de Contribui√ß√£o √∑ Lucro Operacional
                
                **Seus N√∫meros:**
                ‚Ä¢ Margem de Contribui√ß√£o: {format_currency(margem_contribuicao_valor)}
                ‚Ä¢ Lucro Operacional: {format_currency(lucro_operacional)}
                
                **C√°lculo:** {format_currency(margem_contribuicao_valor)} √∑ {format_currency(lucro_operacional)} = {gao:.1f}x
                
                **Em resumo:** Cada 1% de aumento nas vendas gera {gao:.1f}% de aumento no lucro. {resultado}
                """)
            
            # Cobertura de Custos Fixos
            margem_contribuicao_valor = receita_anual * (margem_contribuicao_perc/100)
            cobertura_fixos = margem_contribuicao_valor / custos_fixos_anual if custos_fixos_anual > 0 else 0
            st.metric("Cobertura Custos Fixos", f"{cobertura_fixos:.1f}x",
                     delta="Acima de 2x = Seguro" if cobertura_fixos > 2 else "Margem apertada")
            
            # Bot√£o explica√ß√£o Cobertura
            if st.button("üìñ De onde vem essa cobertura?", key="explain_cobertura"):
                resultado = 'Excelente cobertura!' if cobertura_fixos > 3 else 'Cobertura segura.' if cobertura_fixos > 2 else 'Margem apertada - monitore de perto.'
                st.success(f"""
                üèõÔ∏è **Cobertura de {cobertura_fixos:.1f}x dos custos fixos**
                
                **F√≥rmula:** Margem de Contribui√ß√£o √∑ Custos Fixos Anuais
                
                **Seus N√∫meros:**
                ‚Ä¢ Margem de Contribui√ß√£o: {format_currency(margem_contribuicao_valor)}
                ‚Ä¢ Custos Fixos Anuais: {format_currency(custos_fixos_anual)}
                
                **C√°lculo:** {format_currency(margem_contribuicao_valor)} √∑ {format_currency(custos_fixos_anual)} = {cobertura_fixos:.1f}x
                
                **Em resumo:** Voc√™ gera {cobertura_fixos:.1f}x o dinheiro necess√°rio para pagar custos fixos. {resultado}
                """)
            
            # VPL (assumindo taxa de desconto de 12% a.a.)
            taxa_desconto = 0.12
            fluxos_5_anos = [lucro_operacional] * 5  # Simplificado
            vpl = sum([fluxo / ((1 + taxa_desconto) ** (ano + 1)) for ano, fluxo in enumerate(fluxos_5_anos)]) - investimento_total
            st.metric("VPL (5 anos)", format_currency(vpl),
                     delta="Positivo = Vi√°vel" if vpl > 0 else "Invi√°vel")
            
            # Bot√£o explica√ß√£o VPL
            if st.button("üìñ De onde vem esse VPL?", key="explain_vpl"):
                if vpl > 0:
                    st.success(f"""
                    üí∞ **VPL de {format_currency(vpl)} em 5 anos**
                    
                    **O que √©:** Valor Presente L√≠quido - quanto vale hoje o dinheiro futuro
                    **F√≥rmula:** Soma dos lucros futuros descontados - Investimento inicial
                    
                    **Seus N√∫meros:**
                    ‚Ä¢ Lucro anual: {format_currency(lucro_operacional)}
                    ‚Ä¢ Taxa de desconto: {taxa_desconto:.0%}
                    ‚Ä¢ Investimento inicial: {format_currency(investimento_total)}
                    
                    **C√°lculo:**
                    Valor presente dos lucros: {format_currency(vpl + investimento_total)}
                    Menos investimento: {format_currency(investimento_total)}
                    VPL = {format_currency(vpl)}
                    
                    **Em resumo:** Este neg√≥cio vale a pena - voc√™ ganha mais que investimentos seguros.
                    """)
                else:
                    st.error(f"""
                    üìâ **VPL de {format_currency(vpl)} em 5 anos**
                    
                    **O que √©:** Valor Presente L√≠quido - quanto vale hoje o dinheiro futuro
                    **F√≥rmula:** Soma dos lucros futuros descontados - Investimento inicial
                    
                    **Seus N√∫meros:**
                    ‚Ä¢ Lucro anual: {format_currency(lucro_operacional)}
                    ‚Ä¢ Taxa de desconto: {taxa_desconto:.0%}
                    ‚Ä¢ Investimento inicial: {format_currency(investimento_total)}
                    
                    **C√°lculo:**
                    Valor presente dos lucros: {format_currency(vpl + investimento_total)}
                    Menos investimento: {format_currency(investimento_total)}
                    VPL = {format_currency(vpl)}
                    
                    **Em resumo:** Este neg√≥cio n√£o compensa - voc√™ ganharia mais em outros investimentos.
                    """)
    
    with tab2:
        st.subheader("üíπ An√°lise de Sensibilidade")
        
        st.markdown("**Impacto de Varia√ß√µes na Receita**")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Varia√ß√µes na receita
            variacoes = [-30, -20, -10, 0, 10, 20, 30]
            resultados = []
            
            for var in variacoes:
                receita_ajustada = receita_anual * (1 + var/100)
                custos_variaveis_valor = receita_ajustada * (56/100)  # Assumindo 56% de custos vari√°veis
                margem_contribuicao = receita_ajustada - custos_variaveis_valor
                lucro_ajustado = margem_contribuicao - custos_fixos_anual - (investimento_total * 0.05)
                roi_ajustado = (lucro_ajustado / investimento_total) * 100 if investimento_total > 0 else 0
                resultados.append((var, receita_ajustada, lucro_ajustado, roi_ajustado))
            
            for var, receita, lucro, roi_calc in resultados:
                if var == 0:
                    st.markdown(f"**Base (0%): ROI {roi_calc:.1f}%**")
                else:
                    cor = "üü¢" if var > 0 else "üî¥"
                    st.write(f"{cor} {var:+d}%: ROI {roi_calc:.1f}%")
        
        with col2:
            st.markdown("**An√°lise Break-Even**")
            
            # C√°lculo de quantas vendas precisa para break-even
            ticket_medio = st.session_state.business_data.get('ticket_medio', 250)
            vendas_break_even = ponto_equilibrio / ticket_medio if ticket_medio > 0 else 0
            vendas_por_dia = vendas_break_even / 365 if vendas_break_even > 0 else 0
            
            st.metric("Vendas/m√™s Break-Even", f"{vendas_break_even/12:.0f}")
            st.metric("Vendas/dia Break-Even", f"{vendas_por_dia:.1f}")
            st.metric("Receita Break-Even", format_currency(ponto_equilibrio))
            
            # Capacidade atual vs necess√°ria
            capacidade_atendimento = st.session_state.business_data.get('capacidade_atendimento', 20)
            utilizacao_necessaria = (vendas_por_dia / capacidade_atendimento) * 100 if capacidade_atendimento > 0 else 0
            st.metric("Utiliza√ß√£o Necess√°ria", f"{utilizacao_necessaria:.1f}%",
                     delta="Vi√°vel" if utilizacao_necessaria < 80 else "Capacidade insuficiente")
    
    with tab3:
        st.subheader("üéØ An√°lise de Cen√°rios")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("**CEN√ÅRIO PESSIMISTA**")
            st.caption("Receita -20%, Custos +10%")
            
            receita_pess = receita_anual * 0.8
            custos_fixos_pess = custos_fixos_anual * 1.1
            custos_var_pess = receita_pess * 0.61  # 61% ao inv√©s de 56%
            lucro_pess = receita_pess - custos_var_pess - custos_fixos_pess - (investimento_total * 0.05)
            roi_pess = (lucro_pess / investimento_total) * 100 if investimento_total > 0 else 0
            
            st.metric("Receita", format_currency(receita_pess))
            st.metric("Lucro", format_currency(lucro_pess))
            st.metric("ROI", f"{roi_pess:.1f}%")
            
            if lucro_pess > 0:
                st.success("Ainda lucrativo")
            else:
                st.error("Preju√≠zo")
        
        with col2:
            st.markdown("**CEN√ÅRIO REALISTA**")
            st.caption("Valores atuais")
            
            st.metric("Receita", format_currency(receita_anual))
            st.metric("Lucro", format_currency(lucro_operacional))
            st.metric("ROI", f"{roi:.1f}%")
            
            if roi > 15:
                st.success("Vi√°vel")
            elif roi > 10:
                st.warning("Marginal")
            else:
                st.error("Invi√°vel")
        
        with col3:
            st.markdown("**CEN√ÅRIO OTIMISTA**")
            st.caption("Receita +30%, Custos otimizados")
            
            receita_otim = receita_anual * 1.3
            custos_fixos_otim = custos_fixos_anual * 1.05  # Pequeno aumento
            custos_var_otim = receita_otim * 0.52  # Melhor efici√™ncia
            lucro_otim = receita_otim - custos_var_otim - custos_fixos_otim - (investimento_total * 0.05)
            roi_otim = (lucro_otim / investimento_total) * 100 if investimento_total > 0 else 0
            
            st.metric("Receita", format_currency(receita_otim))
            st.metric("Lucro", format_currency(lucro_otim))
            st.metric("ROI", f"{roi_otim:.1f}%")
            
            if roi_otim > 25:
                st.success("Excelente retorno")
            else:
                st.info("Bom potencial")
        
        st.markdown("---")
        
        # Recomenda√ß√£o final baseada nos c√°lculos
        st.subheader("üéØ Recomenda√ß√£o de Viabilidade")
        
        score_viabilidade = 0
        if roi > 15: score_viabilidade += 2
        elif roi > 10: score_viabilidade += 1
        
        if margem_seguranca > 25: score_viabilidade += 2
        elif margem_seguranca > 15: score_viabilidade += 1
        
        if payback < 3: score_viabilidade += 2
        elif payback < 5: score_viabilidade += 1
        
        if vpl > 0: score_viabilidade += 2
        
        if lucro_pess > 0: score_viabilidade += 1  # Resistente ao cen√°rio pessimista
        
        # Exibir recomenda√ß√£o
        if score_viabilidade >= 7:
            st.success("üü¢ **ALTAMENTE VI√ÅVEL** - Neg√≥cio com forte potencial de retorno")
        elif score_viabilidade >= 5:
            st.warning("üü° **VI√ÅVEL COM RESSALVAS** - Necessita ajustes para melhor performance")
        elif score_viabilidade >= 3:
            st.warning("üü† **MARGINAL** - Vi√°vel mas com riscos significativos")
        else:
            st.error("üî¥ **INVI√ÅVEL** - Recomenda-se revis√£o completa do modelo")
        
        st.caption(f"Score de viabilidade: {score_viabilidade}/9")
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step11"):
            st.session_state.step = 10
            st.rerun()
    with col3:
        if st.button("Pr√≥xima Etapa ‚û°Ô∏è", type="primary", key="next_step11"):
            st.session_state.step = 12
            st.rerun()

# Simula√ß√£o Simples removed as requested by user

def show_step_12():
    """Etapa 12: Cen√°rios e Riscos"""
    st.header("1Ô∏è‚É£2Ô∏è‚É£ Cen√°rios e Riscos")
    st.markdown("**FASE 12: RISCOS** - An√°lise quantitativa de riscos e planos de conting√™ncia")
    
    # Recuperar dados das etapas anteriores
    receita_anual = st.session_state.business_data.get('receita_anual', 180000)
    investimento_total = st.session_state.business_data.get('investimento_total', 81500)
    lucro_operacional = st.session_state.business_data.get('lucro_operacional', 25000)
    
    tab1, tab2, tab3 = st.tabs(["‚ö†Ô∏è Matriz de Riscos", "üìà Simula√ß√£o Monte Carlo", "üõ°Ô∏è Planos de Conting√™ncia"])
    
    with tab1:
        st.subheader("‚ö†Ô∏è An√°lise Quantitativa de Riscos")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Riscos de Mercado**")
            
            # Concorr√™ncia
            impacto_concorrencia = st.slider(
                "Impacto da concorr√™ncia na receita (%)",
                min_value=0.0,
                max_value=50.0,
                value=float(st.session_state.business_data.get('impacto_concorrencia', 15.0)),
                step=5.0
            )
            if impacto_concorrencia != st.session_state.business_data.get('impacto_concorrencia'):
                st.session_state.business_data['impacto_concorrencia'] = impacto_concorrencia
                save_user_data()
            
            prob_concorrencia = st.slider(
                "Probabilidade de entrada de concorrentes (%)",
                min_value=0.0,
                max_value=100.0,
                value=float(st.session_state.business_data.get('prob_concorrencia', 30.0)),
                step=10.0
            )
            if prob_concorrencia != st.session_state.business_data.get('prob_concorrencia'):
                st.session_state.business_data['prob_concorrencia'] = prob_concorrencia
                save_user_data()
            
            # C√°lculo do risco esperado
            risco_concorrencia = (impacto_concorrencia/100) * (prob_concorrencia/100) * receita_anual
            st.metric("Risco Concorr√™ncia", format_currency(risco_concorrencia))
            
            # Risco de demanda
            volatilidade_demanda = st.slider(
                "Volatilidade da demanda (%)",
                min_value=0.0,
                max_value=50.0,
                value=float(st.session_state.business_data.get('volatilidade_demanda', 20.0)),
                step=5.0
            )
            if volatilidade_demanda != st.session_state.business_data.get('volatilidade_demanda'):
                st.session_state.business_data['volatilidade_demanda'] = volatilidade_demanda
                save_user_data()
            
            # Value at Risk (VaR) simplificado - 5% pior cen√°rio
            var_5_percent = receita_anual * (volatilidade_demanda/100) * 1.645  # Z-score para 95% confian√ßa
            st.metric("VaR (5% pior caso)", format_currency(var_5_percent))
        
        with col2:
            st.markdown("**Riscos Operacionais**")
            
            # Risco de custos
            inflacao_custos = st.slider(
                "Infla√ß√£o de custos anual (%)",
                min_value=0.0,
                max_value=20.0,
                value=float(st.session_state.business_data.get('inflacao_custos', 8.0)),
                step=1.0
            )
            if inflacao_custos != st.session_state.business_data.get('inflacao_custos'):
                st.session_state.business_data['inflacao_custos'] = inflacao_custos
                save_user_data()
            
            custos_fixos_anual = (st.session_state.business_data.get('aluguel', 3000) + 
                                 st.session_state.business_data.get('total_folha_salarios', 4500) +
                                 st.session_state.business_data.get('0', 800) +
                                 st.session_state.business_data.get('outros_fixos', 500)) * 12
            
            impacto_inflacao = custos_fixos_anual * (inflacao_custos/100)
            st.metric("Impacto Infla√ß√£o", format_currency(impacto_inflacao))
            
            # Risco de inadimpl√™ncia
            taxa_inadimplencia = st.slider(
                "Taxa de inadimpl√™ncia (%)",
                min_value=0.0,
                max_value=15.0,
                value=float(st.session_state.business_data.get('taxa_inadimplencia', 3.0)),
                step=0.5
            )
            if taxa_inadimplencia != st.session_state.business_data.get('taxa_inadimplencia'):
                st.session_state.business_data['taxa_inadimplencia'] = taxa_inadimplencia
                save_user_data()
            
            perda_inadimplencia = receita_anual * (taxa_inadimplencia/100)
            st.metric("Perda Inadimpl√™ncia", format_currency(perda_inadimplencia))
            
            # Risco total
            risco_total_anual = risco_concorrencia + impacto_inflacao + perda_inadimplencia
            st.metric("Risco Total Anual", format_currency(risco_total_anual))
            
            # Impacto no ROI
            lucro_com_riscos = lucro_operacional - risco_total_anual
            roi_com_riscos = (lucro_com_riscos / investimento_total) * 100 if investimento_total > 0 else 0
            st.metric("ROI Ajustado ao Risco", f"{roi_com_riscos:.1f}%")
    
    with tab2:
        st.subheader("üìà Simula√ß√£o de Cen√°rios")
        
        if st.button("Executar Simula√ß√£o Monte Carlo"):
            import numpy as np
            import plotly.graph_objects as go
            
            # Par√¢metros da simula√ß√£o
            num_simulacoes = 1000
            
            # Distribui√ß√µes das vari√°veis
            receitas_sim = np.random.normal(receita_anual, receita_anual * (volatilidade_demanda/100), num_simulacoes)
            receitas_sim = np.maximum(receitas_sim, receita_anual * 0.3)  # M√≠nimo 30% da receita base
            
            custos_variaveis_perc = np.random.normal(0.56, 0.05, num_simulacoes)  # 56% ¬± 5%
            custos_variaveis_perc = np.clip(custos_variaveis_perc, 0.4, 0.7)
            
            custos_fixos_sim = np.random.normal(custos_fixos_anual, custos_fixos_anual * 0.1, num_simulacoes)
            
            # C√°lculo dos lucros simulados
            lucros_sim = []
            for i in range(num_simulacoes):
                receita = receitas_sim[i]
                custo_var = receita * custos_variaveis_perc[i]
                custo_fixo = custos_fixos_sim[i]
                lucro = receita - custo_var - custo_fixo - (investimento_total * 0.05)
                lucros_sim.append(lucro)
            
            lucros_sim = np.array(lucros_sim)
            
            # Estat√≠sticas
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Lucro M√©dio", format_currency(np.mean(lucros_sim)))
                st.metric("Desvio Padr√£o", format_currency(np.std(lucros_sim)))
            
            with col2:
                st.metric("Percentil 5%", format_currency(np.percentile(lucros_sim, 5)))
                st.metric("Percentil 95%", format_currency(np.percentile(lucros_sim, 95)))
            
            with col3:
                prob_prejuizo = (lucros_sim < 0).sum() / num_simulacoes * 100
                st.metric("Prob. Preju√≠zo", f"{prob_prejuizo:.1f}%")
                
                prob_roi_15 = ((lucros_sim / investimento_total) > 0.15).sum() / num_simulacoes * 100
                st.metric("Prob. ROI > 15%", f"{prob_roi_15:.1f}%")
            
            # Histograma dos resultados
            fig = go.Figure(data=[go.Histogram(x=lucros_sim, nbinsx=50)])
            fig.update_layout(
                title="Distribui√ß√£o de Lucros Simulados",
                xaxis_title="Lucro Anual (R$)",
                yaxis_title="Frequ√™ncia",
                height=400
            )
            fig.add_vline(x=0, line_dash="dash", line_color="red", annotation_text="Break-even")
            fig.add_vline(x=np.mean(lucros_sim), line_dash="dash", line_color="green", annotation_text="M√©dia")
            
            st.plotly_chart(fig, use_container_width=True)
        
        else:
            st.info("Clique no bot√£o acima para executar simula√ß√£o de 1000 cen√°rios")
    
    with tab3:
        st.subheader("üõ°Ô∏è Planos de Conting√™ncia Quantificados")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Cen√°rio: Queda de 30% nas Vendas**")
            
            receita_crisis = receita_anual * 0.7
            custos_variaveis_crisis = receita_crisis * 0.56
            
            # A√ß√µes de conting√™ncia
            reducao_custos_fixos = st.slider(
                "Redu√ß√£o poss√≠vel custos fixos (%)",
                min_value=0.0,
                max_value=50.0,
                value=20.0,
                step=5.0,
                key="reducao_custos"
            )
            
            custos_fixos_reduzidos = custos_fixos_anual * (1 - reducao_custos_fixos/100)
            lucro_crisis = receita_crisis - custos_variaveis_crisis - custos_fixos_reduzidos - (investimento_total * 0.05)
            
            st.write(f"Receita em crise: {format_currency(receita_crisis)}")
            st.write(f"Custos fixos reduzidos: {format_currency(custos_fixos_reduzidos)}")
            st.write(f"Lucro em crise: {format_currency(lucro_crisis)}")
            
            if lucro_crisis > 0:
                st.success("Ainda lucrativo com conting√™ncia")
            else:
                st.error("Necessita mais ajustes")
            
            # Tempo de sobreviv√™ncia
            if lucro_crisis < 0:
                capital_giro = st.session_state.business_data.get('capital_giro', 18000)
                meses_sobrevivencia = capital_giro / abs(lucro_crisis/12) if lucro_crisis < 0 else float('inf')
                st.metric("Meses de Sobreviv√™ncia", f"{meses_sobrevivencia:.1f}")
        
        with col2:
            st.markdown("**A√ß√µes de Conting√™ncia Planejadas**")
            
            acoes_contingencia = st.multiselect(
                "A√ß√µes implement√°veis em crise",
                ["Reduzir jornada funcion√°rios", "Renegociar aluguel", "Focar produtos alta margem", 
                 "Intensificar marketing digital", "Parcerias estrat√©gicas", "Reduzir estoque",
                 "Buscar capital adicional", "Diversificar servi√ßos"],
                default=st.session_state.business_data.get('acoes_contingencia', [])
            )
            if acoes_contingencia != st.session_state.business_data.get('acoes_contingencia'):
                st.session_state.business_data['acoes_contingencia'] = acoes_contingencia
                save_user_data()
            
            # Custos de implementa√ß√£o
            custo_contingencia = st.number_input(
                "Custo implementa√ß√£o conting√™ncia (R$)",
                min_value=0.0,
                value=float(st.session_state.business_data.get('custo_contingencia', 5000)),
                step=1000.0,
                format="%.0f"
            )
            if custo_contingencia != st.session_state.business_data.get('custo_contingencia'):
                st.session_state.business_data['custo_contingencia'] = custo_contingencia
                save_user_data()
            
            # Tempo para implementa√ß√£o
            tempo_implementacao = st.selectbox(
                "Tempo para implementar a√ß√µes",
                ["1-2 semanas", "1 m√™s", "2-3 meses", "Mais de 3 meses"],
                index=["1-2 semanas", "1 m√™s", "2-3 meses", "Mais de 3 meses"].index(
                    st.session_state.business_data.get('tempo_implementacao', '1 m√™s')
                )
            )
            if tempo_implementacao != st.session_state.business_data.get('tempo_implementacao'):
                st.session_state.business_data['tempo_implementacao'] = tempo_implementacao
                save_user_data()
            
            # Efic√°cia esperada
            eficacia_contingencia = st.slider(
                "Efic√°cia esperada das a√ß√µes (%)",
                min_value=0.0,
                max_value=100.0,
                value=float(st.session_state.business_data.get('eficacia_contingencia', 60.0)),
                step=10.0
            )
            if eficacia_contingencia != st.session_state.business_data.get('eficacia_contingencia'):
                st.session_state.business_data['eficacia_contingencia'] = eficacia_contingencia
                save_user_data()
    
    # Resumo final de riscos
    st.markdown("---")
    st.subheader("üìä Resumo Executivo de Riscos")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Risco Total", format_currency(risco_total_anual))
    
    with col2:
        impacto_percentual = (risco_total_anual / receita_anual) * 100
        st.metric("Impacto na Receita", f"{impacto_percentual:.1f}%")
    
    with col3:
        nivel_risco = "BAIXO" if impacto_percentual < 10 else "M√âDIO" if impacto_percentual < 20 else "ALTO"
        st.metric("N√≠vel de Risco", nivel_risco)
    
    with col4:
        st.metric("ROI Ajustado", f"{roi_com_riscos:.1f}%")
    
    # Store risk data
    st.session_state.business_data.update({
        'risco_total_anual': risco_total_anual,
        'roi_com_riscos': roi_com_riscos,
        'nivel_risco': nivel_risco
    })
    save_user_data()
    
    # Navigation
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if st.button("‚¨ÖÔ∏è Etapa Anterior", key="prev_step12"):
            st.session_state.step = 11
            st.rerun()
    with col3:
        if st.button("üéØ Finalizar Plano", type="primary", key="finish_plan"):
            st.balloons()
            st.success("Plano de neg√≥cios conclu√≠do com an√°lise completa!")
            st.info("Use o menu lateral para navegar entre etapas ou gerar relat√≥rios.")
            st.rerun()

# All precifica√ß√£o functionality has been consolidated into An√°lise Integrada de Custos




def show_employee_manager():
    """Sistema Completo de DP e Tributa√ß√£o com Legisla√ß√£o Brasileira"""
    st.header("üë• DP e Tributa√ß√£o Completa")
    st.markdown("**Sistema integrado com c√°lculos tribut√°rios brasileiros (CLT, Simples Nacional, MEI)**")
    
    # Navega√ß√£o

    
    st.markdown("---")
    
    # Abas do sistema de funcion√°rios
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üë• Funcion√°rios", 
        "üí∞ Folha de Pagamento", 
        "üìä An√°lise Tribut√°ria", 
        "üìã Compliance CLT", 
        "üßÆ Simulador de Custos"
    ])
    
    with tab1:
        st.subheader("üë• Cadastro de Funcion√°rios")
        
        # Verificar se existem funcion√°rios da Etapa 8 (Gest√£o de Pessoas)
        funcionarios_gestao = st.session_state.business_data.get('funcionarios_planejados', [])
        
        # Sistema de sincroniza√ß√£o definitivo para DP
        def sync_funcionarios_dp():
            """For√ßa sincroniza√ß√£o bidirecional entre session_state e business_data"""
            funcionarios_salvos = st.session_state.business_data.get('funcionarios_dp', [])
            
            # Se n√£o existe em session_state, carrega dos dados salvos
            if 'funcionarios' not in st.session_state:
                st.session_state.funcionarios = funcionarios_salvos.copy() if funcionarios_salvos else []
            
            # Se dados salvos s√£o diferentes, sincroniza
            elif funcionarios_salvos != st.session_state.funcionarios:
                # Prioriza dados da session_state (mais recentes)
                st.session_state.business_data['funcionarios_dp'] = st.session_state.funcionarios.copy()
                save_user_data()
        
        # Executar sincroniza√ß√£o no in√≠cio da se√ß√£o
        sync_funcionarios_dp()
        
        # Integra√ß√£o autom√°tica com Gest√£o de Pessoas (apenas se DP estiver vazio)
        if funcionarios_gestao and len(st.session_state.funcionarios) == 0:
            st.info("üîÑ **Integra√ß√£o com Gest√£o de Pessoas**: Encontrados funcion√°rios planejados na Etapa 8. Deseja import√°-los automaticamente?")
            
            col_import1, col_import2 = st.columns(2)
            with col_import1:
                if st.button("‚úÖ Importar Funcion√°rios da Etapa 8", type="primary"):
                    # Converter dados da Etapa 8 para formato do DP
                    funcionarios_importados = []
                    for func in funcionarios_gestao:
                        funcionarios_importados.append({
                            'nome': func.get('nome', 'Funcion√°rio'),
                            'cargo': func.get('cargo', 'Vendedor(a)'),
                            'salario_base': func.get('salario', 1518.00),
                            'tipo_contrato': func.get('tipo_contrato', 'CLT'),
                            'data_admissao': func.get('data_admissao', '2024-01-01'),
                            'vale_transporte': func.get('vale_transporte', True),
                            'vale_refeicao': func.get('vale_refeicao', 25.00),
                            'plano_saude': func.get('plano_saude', False),
                            'comissao_percentual': func.get('comissao', 0.0),
                            'horas_semanais': 44,
                            'tem_insalubridade': False,
                            'grau_instrucao': func.get('escolaridade', 'Ensino M√©dio'),
                            'dependentes': func.get('dependentes', 0)
                        })
                    
                    st.session_state.funcionarios = funcionarios_importados
                    # Sincroniza√ß√£o for√ßada imediata
                    sync_funcionarios_dp()
                    st.success(f"‚úÖ {len(funcionarios_importados)} funcion√°rio(s) importado(s) da Gest√£o de Pessoas!")
                    st.rerun()
            
            with col_import2:
                if st.button("üîÑ Manter Separado", type="secondary"):
                    st.session_state.funcionarios = []
                    st.info("Os dados ficaram separados. Voc√™ pode adicionar funcion√°rios manualmente.")
                    st.rerun()
        
        # Bot√£o para carregar dados de exemplo apenas se solicitado
        if len(st.session_state.funcionarios) == 0:
            if st.button("üìù Carregar Dados de Exemplo", type="secondary", help="Adiciona funcion√°rios de exemplo para demonstra√ß√£o"):
                st.session_state.funcionarios = [
                    {
                        'nome': 'Maria Silva',
                        'cargo': 'Vendedora',
                        'salario_base': 1500.00,
                        'tipo_contrato': 'CLT',
                        'data_admissao': '2024-01-15',
                        'vale_transporte': True,
                        'vale_refeicao': 25.00,
                        'plano_saude': False,
                        'comissao_percentual': 2.0,
                        'horas_semanais': 44,
                        'tem_insalubridade': False,
                        'grau_instrucao': 'Ensino M√©dio',
                        'dependentes': 1
                    },
                    {
                        'nome': 'Jo√£o Santos',
                        'cargo': 'Optometrista',
                        'salario_base': 3500.00,
                        'tipo_contrato': 'CLT',
                        'data_admissao': '2023-08-10',
                        'vale_transporte': True,
                        'vale_refeicao': 30.00,
                        'plano_saude': True,
                        'comissao_percentual': 1.5,
                        'horas_semanais': 44,
                        'tem_insalubridade': False,
                        'grau_instrucao': 'Superior',
                        'dependentes': 2
                    }
                ]
                st.success("Dados de exemplo carregados! Voc√™ pode edit√°-los ou remov√™-los conforme necess√°rio.")
                st.rerun()
        
        # Adicionar novo funcion√°rio
        with st.expander("‚ûï Adicionar Novo Funcion√°rio"):
            col1, col2 = st.columns(2)
            
            with col1:
                novo_nome = st.text_input("Nome completo", key="novo_func_nome")
                novo_cargo = st.selectbox(
                    "Cargo",
                    ["Vendedor(a)", "Optometrista", "Gerente", "Recepcionista", "T√©cnico em √ìtica", "Auxiliar Administrativo"],
                    key="novo_func_cargo"
                )
                # Valida√ß√£o de sal√°rio baseada no tipo de contrato
                if st.session_state.get("novo_func_tipo", "CLT") == "CLT":
                    novo_salario = st.number_input(
                        "Sal√°rio base (R$)",
                        min_value=1518.00,  # Sal√°rio m√≠nimo 2025
                        value=1600.00,
                        step=100.00,
                        key="novo_func_salario",
                        help="‚ö†Ô∏è Valor m√≠nimo R$ 1.518 (sal√°rio m√≠nimo 2025)"
                    )
                else:
                    novo_salario = st.number_input(
                        "Valor de remunera√ß√£o (R$)",
                        min_value=0.01,
                        value=1500.00,
                        step=100.00,
                        key="novo_func_salario",
                        help="Valor livre para MEI ou Prestador de Servi√ßos"
                    )
                novo_tipo = st.selectbox(
                    "Tipo de contrato",
                    ["CLT", "MEI", "Prestador de Servi√ßos"],
                    key="novo_func_tipo"
                )
            
            with col2:
                nova_data = st.date_input("Data de admiss√£o", key="novo_func_data")
                novo_vt = st.checkbox("Vale transporte", key="novo_func_vt")
                novo_vr = st.number_input(
                    "Vale refei√ß√£o di√°rio (R$)",
                    min_value=0.00,
                    value=25.00,
                    step=5.00,
                    key="novo_func_vr"
                )
                novo_plano = st.checkbox("Plano de sa√∫de", key="novo_func_plano")
                nova_comissao = st.number_input(
                    "Comiss√£o (%)",
                    min_value=0.0,
                    max_value=10.0,
                    value=0.0,
                    step=0.5,
                    key="novo_func_comissao"
                )
                novos_dependentes = st.number_input(
                    "Dependentes",
                    min_value=0,
                    max_value=10,
                    value=0,
                    key="novo_func_dependentes"
                )
            
            if st.button("Adicionar Funcion√°rio", type="primary"):
                if novo_nome:
                    novo_funcionario = {
                        'nome': novo_nome,
                        'cargo': novo_cargo,
                        'salario_base': novo_salario,
                        'tipo_contrato': novo_tipo,
                        'data_admissao': str(nova_data),
                        'vale_transporte': novo_vt,
                        'vale_refeicao': novo_vr,
                        'plano_saude': novo_plano,
                        'comissao_percentual': nova_comissao,
                        'horas_semanais': 44,
                        'tem_insalubridade': False,
                        'grau_instrucao': 'Ensino M√©dio',
                        'dependentes': novos_dependentes
                    }
                    st.session_state.funcionarios.append(novo_funcionario)
                    # Sincroniza√ß√£o for√ßada imediata
                    sync_funcionarios_dp()
                    st.success(f"‚úÖ Funcion√°rio {novo_nome} adicionado com sucesso!")
                    st.rerun()
                else:
                    st.error("Digite o nome do funcion√°rio")
        
        # Bot√£o para sincronizar de volta para Gest√£o de Pessoas
        if st.session_state.funcionarios:
            col_sync_dp1, col_sync_dp2 = st.columns([1, 3])
            with col_sync_dp1:
                if st.button("üîÑ Sincronizar ‚Üí Gest√£o de Pessoas", type="secondary", help="Envia os funcion√°rios cadastrados aqui para a Etapa 8"):
                    funcionarios_para_gestao = []
                    for func in st.session_state.funcionarios:
                        funcionarios_para_gestao.append({
                            'nome': func.get('nome', 'Funcion√°rio'),
                            'cargo': func.get('cargo', 'Vendedor(a)'),
                            'salario': func.get('salario_base', 1518.00),
                            'tipo_contrato': func.get('tipo_contrato', 'CLT'),
                            'data_admissao': func.get('data_admissao', '2024-01-01'),
                            'vale_transporte': func.get('vale_transporte', True),
                            'vale_refeicao': func.get('vale_refeicao', 25.00),
                            'plano_saude': func.get('plano_saude', False),
                            'comissao': func.get('comissao_percentual', 0.0),
                            'escolaridade': func.get('grau_instrucao', 'Ensino M√©dio'),
                            'dependentes': func.get('dependentes', 0)
                        })
                    
                    st.session_state.business_data['funcionarios_planejados'] = funcionarios_para_gestao
                    save_user_data()
                    st.success(f"‚úÖ {len(funcionarios_para_gestao)} funcion√°rio(s) sincronizado(s) para Gest√£o de Pessoas!")
                    st.rerun()
            
            with col_sync_dp2:
                st.info("üí° Use este bot√£o para manter os dados sincronizados entre DP e Gest√£o de Pessoas")
        
        # Lista de funcion√°rios
        st.markdown("**Funcion√°rios Cadastrados:**")
        
        for i, func in enumerate(st.session_state.funcionarios):
            with st.container():
                col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
                
                with col1:
                    st.markdown(f"**{func['nome']}**")
                    st.caption(f"{func['cargo']} ‚Ä¢ {func['tipo_contrato']}")
                
                with col2:
                    # Valida√ß√£o baseada no tipo de contrato do funcion√°rio
                    if func['tipo_contrato'] == 'CLT':
                        novo_salario = st.number_input(
                            "Sal√°rio Base",
                            min_value=1518.00,  # Sal√°rio m√≠nimo 2025
                            value=float(func['salario_base']),
                            step=100.00,
                            key=f"salario_clt_edit_{i}",
                            format="%.2f",
                            help="M√≠nimo R$ 1.518 (sal√°rio m√≠nimo 2025)"
                        )
                    else:
                        novo_salario = st.number_input(
                            "Remunera√ß√£o",
                            min_value=0.01,  # Valor livre para MEI/Prestador
                            value=float(func['salario_base']),
                            step=100.00,
                            key=f"salario_prest_edit_{i}",
                            format="%.2f",
                            help="Valor livre para MEI/Prestador"
                        )
                    
                    if novo_salario != func['salario_base']:
                        st.session_state.funcionarios[i]['salario_base'] = novo_salario
                        # Sincroniza√ß√£o for√ßada imediata
                        sync_funcionarios_dp()
                
                with col3:
                    # Calcular custo total estimado
                    if func['tipo_contrato'] == 'CLT':
                        custo_estimado = func['salario_base'] * 1.68  # Encargos CLT
                    else:
                        custo_estimado = func['salario_base']
                    
                    st.metric("Custo Total", f"R$ {custo_estimado:.2f}")
                
                with col4:
                    if st.button("üóëÔ∏è", key=f"del_func_{i}", help="Remover funcion√°rio"):
                        st.session_state.funcionarios.pop(i)
                        # Sincroniza√ß√£o for√ßada imediata
                        sync_funcionarios_dp()
                        st.rerun()
                
                st.markdown("---")
    
    with tab2:
        st.subheader("üí∞ Folha de Pagamento Detalhada")
        
        if not st.session_state.funcionarios:
            st.warning("Adicione funcion√°rios na aba anterior para gerar a folha de pagamento")
        else:
            # Seletor de m√™s/ano para c√°lculo
            col_mes1, col_mes2, col_mes3 = st.columns(3)
            
            with col_mes1:
                mes_calculo = st.selectbox(
                    "M√™s de refer√™ncia",
                    list(range(1, 13)),
                    format_func=lambda x: [
                        "Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho",
                        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"
                    ][x-1],
                    index=5,  # Junho
                    key="mes_folha"
                )
            
            with col_mes2:
                ano_calculo = st.number_input(
                    "Ano",
                    min_value=2024,
                    max_value=2030,
                    value=2024,
                    key="ano_folha"
                )
            
            with col_mes3:
                # Buscar vendas autom√°ticas das diferentes etapas
                # Etapa 10 - Receita anual / 12
                receita_anual = st.session_state.business_data.get('receita_anual', 0)
                faturamento_projetado = receita_anual / 12 if receita_anual > 0 else 0
                
                # Etapa 10 - Venda primeiro m√™s
                venda_primeiro_mes = st.session_state.business_data.get('vendas_mes_1', 0)
                
                # Simula√ß√£o Simples
                vendas_simulacao = st.session_state.business_data.get('vendas_mes_simulacao', 0)
                
                # Resumo Empreendedor
                objetivo_faturamento = st.session_state.business_data.get('objetivo_faturamento', 0)
                
                # Ticket m√©dio √ó clientes (Etapa 3)
                ticket_medio = st.session_state.business_data.get('ticket_medio_target', 0)
                clientes_mes = st.session_state.business_data.get('clientes_mes_objetivo', 0)
                vendas_calculadas = ticket_medio * clientes_mes if ticket_medio > 0 and clientes_mes > 0 else 0
                
                # Usar o maior valor dispon√≠vel como sugest√£o
                vendas_sugeridas = max(
                    faturamento_projetado, 
                    venda_primeiro_mes,
                    vendas_simulacao, 
                    objetivo_faturamento,
                    vendas_calculadas,
                    30000.0
                )
                
                vendas_mes = st.number_input(
                    "Vendas do m√™s (R$)",
                    min_value=0.0,
                    value=float(vendas_sugeridas),
                    step=1000.0,
                    help=f"üí° Valor sugerido baseado nas proje√ß√µes: {format_currency(vendas_sugeridas)}",
                    key="vendas_mes_folha"
                )
                
                # Mostrar origem dos dados
                if vendas_sugeridas > 30000:
                    fonte_dados = ""
                    if faturamento_projetado == vendas_sugeridas:
                        fonte_dados = "Etapa 10 - Receita Anual"
                    elif venda_primeiro_mes == vendas_sugeridas:
                        fonte_dados = "Etapa 10 - Primeiro M√™s"
                    elif vendas_simulacao == vendas_sugeridas:
                        fonte_dados = "Simula√ß√£o Simples"
                    elif objetivo_faturamento == vendas_sugeridas:
                        fonte_dados = "Resumo Empreendedor"
                    elif vendas_calculadas == vendas_sugeridas:
                        fonte_dados = "Ticket √ó Clientes"
                    
                    st.caption(f"üìä Dados de: {fonte_dados}")
                
                # Op√ß√£o para buscar outros dados automaticamente
                if st.button("üîÑ Atualizar com Dados das Etapas", help="Busca automaticamente os valores mais recentes"):
                    # Buscar valores de diferentes etapas
                    valores_encontrados = []
                    
                    # Buscar novamente os valores atualizados
                    receita_anual_atualizada = st.session_state.business_data.get('receita_anual', 0)
                    faturamento_atualizado = receita_anual_atualizada / 12 if receita_anual_atualizada > 0 else 0
                    venda_primeiro_mes_atualizada = st.session_state.business_data.get('vendas_mes_1', 0)
                    vendas_simulacao_atualizada = st.session_state.business_data.get('vendas_mes_simulacao', 0)
                    objetivo_faturamento_atualizado = st.session_state.business_data.get('objetivo_faturamento', 0)
                    ticket_medio_atualizado = st.session_state.business_data.get('ticket_medio_target', 0)
                    clientes_mes_atualizado = st.session_state.business_data.get('clientes_mes_objetivo', 0)
                    vendas_calculadas_atualizada = ticket_medio_atualizado * clientes_mes_atualizado if ticket_medio_atualizado > 0 and clientes_mes_atualizado > 0 else 0
                    
                    # Etapa 10 - Receita anual / 12
                    if faturamento_atualizado > 0:
                        valores_encontrados.append(f"‚Ä¢ Receita Anual √∑ 12: {format_currency(faturamento_atualizado)}")
                    
                    # Etapa 10 - Primeiro m√™s
                    if venda_primeiro_mes_atualizada > 0:
                        valores_encontrados.append(f"‚Ä¢ Primeiro M√™s (Etapa 10): {format_currency(venda_primeiro_mes_atualizada)}")
                    
                    # Simula√ß√£o Simples
                    if vendas_simulacao_atualizada > 0:
                        valores_encontrados.append(f"‚Ä¢ Simula√ß√£o Simples: {format_currency(vendas_simulacao_atualizada)}")
                    
                    # Resumo Empreendedor
                    if objetivo_faturamento_atualizado > 0:
                        valores_encontrados.append(f"‚Ä¢ Resumo Empreendedor: {format_currency(objetivo_faturamento_atualizado)}")
                    
                    # C√°lculo baseado em ticket m√©dio e clientes
                    if vendas_calculadas_atualizada > 0:
                        valores_encontrados.append(f"‚Ä¢ Calculado (Ticket {format_currency(ticket_medio_atualizado)} √ó {clientes_mes_atualizado} clientes): {format_currency(vendas_calculadas_atualizada)}")
                    
                    # Atualizar o valor automaticamente
                    novo_valor = max(
                        faturamento_atualizado, 
                        venda_primeiro_mes_atualizada,
                        vendas_simulacao_atualizada, 
                        objetivo_faturamento_atualizado,
                        vendas_calculadas_atualizada
                    )
                    
                    if novo_valor > 0:
                        st.success(f"""
                        **üìà Valores encontrados:**
                        
                        {chr(10).join(valores_encontrados)}
                        
                        üí° Maior valor encontrado: {format_currency(novo_valor)}
                        
                        ‚û°Ô∏è Use este valor no campo "Vendas do m√™s" acima.
                        """)
                    else:
                        st.warning("Nenhum valor de faturamento encontrado nas outras etapas. Verifique se preencheu as Proje√ß√µes Financeiras ou Simula√ß√£o Simples.")
            
            # Painel de integra√ß√£o de dados
            with st.expander("üìä Dados Integrados do Plano de Neg√≥cios", expanded=False):
                st.markdown("### üîó Fontes de Dados Conectadas")
                
                col_int1, col_int2 = st.columns(2)
                
                with col_int1:
                    st.markdown("**üí∞ Faturamento/Vendas:**")
                    
                    # Atualizar valores recalculados
                    receita_anual_atual = st.session_state.business_data.get('receita_anual', 0)
                    faturamento_atual = receita_anual_atual / 12 if receita_anual_atual > 0 else 0
                    venda_primeiro_mes_atual = st.session_state.business_data.get('vendas_mes_1', 0)
                    
                    # Listar todas as fontes de faturamento
                    if faturamento_atual > 0:
                        st.caption(f"‚úÖ Receita Anual √∑ 12: {format_currency(faturamento_atual)}")
                    else:
                        st.caption("‚ùå Receita Anual √∑ 12: N√£o preenchido")
                    
                    if venda_primeiro_mes_atual > 0:
                        st.caption(f"‚úÖ Primeiro M√™s (Etapa 10): {format_currency(venda_primeiro_mes_atual)}")
                    else:
                        st.caption("‚ùå Primeiro M√™s (Etapa 10): N√£o preenchido")
                    
                    if vendas_simulacao > 0:
                        st.caption(f"‚úÖ Simula√ß√£o Simples: {format_currency(vendas_simulacao)}")
                    else:
                        st.caption("‚ùå Simula√ß√£o Simples: N√£o preenchido")
                    
                    if objetivo_faturamento > 0:
                        st.caption(f"‚úÖ Resumo Empreendedor: {format_currency(objetivo_faturamento)}")
                    else:
                        st.caption("‚ùå Resumo Empreendedor: N√£o preenchido")
                
                with col_int2:
                    st.markdown("**üìà Dados Operacionais:**")
                    
                    # Ticket m√©dio
                    ticket_medio = st.session_state.business_data.get('ticket_medio', 0)
                    if ticket_medio > 0:
                        st.caption(f"‚úÖ Ticket M√©dio: {format_currency(ticket_medio)}")
                    else:
                        st.caption("‚ùå Ticket M√©dio: N√£o definido")
                    
                    # Clientes por m√™s
                    clientes_mes = st.session_state.business_data.get('clientes_mes', 0)
                    if clientes_mes > 0:
                        st.caption(f"‚úÖ Clientes/M√™s: {clientes_mes}")
                    else:
                        st.caption("‚ùå Clientes/M√™s: N√£o definido")
                    
                    # Vendas calculadas
                    if ticket_medio > 0 and clientes_mes > 0:
                        vendas_calc = ticket_medio * clientes_mes
                        st.caption(f"üí° Faturamento Calculado: {format_currency(vendas_calc)}")
                    
                    # Funcion√°rios planejados
                    funcionarios_planejados = st.session_state.business_data.get('funcionarios_planejados', [])
                    if funcionarios_planejados:
                        st.caption(f"‚úÖ Funcion√°rios Planejados: {len(funcionarios_planejados)}")
                    else:
                        st.caption("‚ùå Funcion√°rios Planejados: Nenhum")
                
                st.info("""
                üí° **Como usar a integra√ß√£o:**
                - O valor de vendas √© sugerido automaticamente baseado nos dados das etapas
                - Clique em "üîÑ Atualizar com Dados das Etapas" para buscar os valores mais recentes
                - O sistema usa o maior valor encontrado como padr√£o
                - Comiss√µes s√£o calculadas automaticamente sobre o valor de vendas
                """)
            
            st.markdown("---")
            
            # Inicializar vari√°veis de controle
            total_salarios = 0
            total_encargos = 0
            total_liquido = 0
            
            for idx, func in enumerate(st.session_state.funcionarios):
                st.markdown(f"### üë§ {func['nome']} - {func['cargo']}")
                
                if func['tipo_contrato'] == 'CLT':
                    # C√°lculos CLT detalhados
                    col_calc1, col_calc2, col_calc3 = st.columns(3)
                    
                    with col_calc1:
                        st.markdown("**üíµ Proventos**")
                        
                        salario_base = func['salario_base']
                        st.write(f"‚Ä¢ Sal√°rio base: R$ {salario_base:.2f}")
                        
                        # Comiss√µes
                        comissao = (vendas_mes * func['comissao_percentual'] / 100) if func['comissao_percentual'] > 0 else 0
                        if comissao > 0:
                            st.write(f"‚Ä¢ Comiss√£o ({func['comissao_percentual']}%): R$ {comissao:.2f}")
                        
                        # Horas extras (simula√ß√£o)
                        horas_extras = st.number_input(
                            f"Horas extras {func['nome'][:10]}",
                            min_value=0,
                            max_value=40,
                            value=0,
                            key=f"he_folha_{idx}_{func['nome'].replace(' ', '_')[:8]}"
                        )
                        valor_he = horas_extras * (salario_base / 220) * 1.5
                        if valor_he > 0:
                            st.write(f"‚Ä¢ Horas extras (50%): R$ {valor_he:.2f}")
                        
                        salario_bruto = salario_base + comissao + valor_he
                        st.metric("**Total Bruto**", f"R$ {salario_bruto:.2f}")
                    
                    with col_calc2:
                        st.markdown("**üìâ Descontos**")
                        
                        # INSS
                        inss = min(salario_bruto * 0.14, 877.24)  # Teto INSS 2024
                        st.write(f"‚Ä¢ INSS (14%): R$ {inss:.2f}")
                        
                        # IRPF
                        base_irpf = salario_bruto - inss - (func['dependentes'] * 189.59)
                        if base_irpf <= 2112.00:
                            irpf = 0
                        elif base_irpf <= 2826.65:
                            irpf = base_irpf * 0.075 - 158.40
                        elif base_irpf <= 3751.05:
                            irpf = base_irpf * 0.15 - 370.40
                        elif base_irpf <= 4664.68:
                            irpf = base_irpf * 0.225 - 651.73
                        else:
                            irpf = base_irpf * 0.275 - 884.96
                        
                        irpf = max(0, irpf)
                        st.write(f"‚Ä¢ IRPF: R$ {irpf:.2f}")
                        
                        # Vale transporte
                        vt_desconto = min(salario_bruto * 0.06, 220.00) if func['vale_transporte'] else 0
                        if vt_desconto > 0:
                            st.write(f"‚Ä¢ Vale transporte (6%): R$ {vt_desconto:.2f}")
                        
                        # Plano de sa√∫de
                        plano_desconto = 150.00 if func['plano_saude'] else 0
                        if plano_desconto > 0:
                            st.write(f"‚Ä¢ Plano de sa√∫de: R$ {plano_desconto:.2f}")
                        
                        total_descontos = inss + irpf + vt_desconto + plano_desconto
                        st.metric("**Total Descontos**", f"R$ {total_descontos:.2f}")
                    
                    with col_calc3:
                        st.markdown("**üè¢ Encargos Patronais**")
                        
                        # INSS Patronal
                        inss_patronal = salario_bruto * 0.20
                        st.write(f"‚Ä¢ INSS Patronal (20%): R$ {inss_patronal:.2f}")
                        
                        # FGTS
                        fgts = salario_bruto * 0.08
                        st.write(f"‚Ä¢ FGTS (8%): R$ {fgts:.2f}")
                        
                        # Sistema S + Sal√°rio Educa√ß√£o
                        sistema_s = salario_bruto * 0.0358  # SESC + SENAC + SEBRAE + Sal.Educa√ß√£o
                        st.write(f"‚Ä¢ Sistema S (3,58%): R$ {sistema_s:.2f}")
                        
                        # Seguro Acidente
                        seguro_acidente = salario_bruto * 0.01
                        st.write(f"‚Ä¢ Seguro Acidente (1%): R$ {seguro_acidente:.2f}")
                        
                        total_encargos_func = inss_patronal + fgts + sistema_s + seguro_acidente
                        st.metric("**Total Encargos**", f"R$ {total_encargos_func:.2f}")
                    
                    # Valores finais
                    salario_liquido = salario_bruto - total_descontos
                    custo_total_funcionario = salario_bruto + total_encargos_func
                    
                    col_final1, col_final2, col_final3 = st.columns(3)
                    with col_final1:
                        st.success(f"**L√≠quido: R$ {salario_liquido:.2f}**")
                    with col_final2:
                        st.info(f"**Custo Total: R$ {custo_total_funcionario:.2f}**")
                    with col_final3:
                        percentual_encargos = (total_encargos_func / salario_bruto) * 100
                        st.warning(f"**Encargos: {percentual_encargos:.1f}%**")
                    
                    total_salarios += salario_bruto
                    total_encargos += total_encargos_func
                    total_liquido += salario_liquido
                
                else:
                    # Para MEI/Prestadores
                    st.info(f"Prestador de servi√ßos - Pagamento: R$ {func['salario_base']:.2f}")
                    total_salarios += func['salario_base']
                
                st.markdown("---")
            
            # Resumo geral da folha
            st.markdown("## üìä Resumo da Folha de Pagamento")
            
            col_resumo1, col_resumo2, col_resumo3, col_resumo4 = st.columns(4)
            
            with col_resumo1:
                st.metric("Total Sal√°rios Brutos", f"R$ {total_salarios:.2f}")
            
            with col_resumo2:
                st.metric("Total Encargos", f"R$ {total_encargos:.2f}")
            
            with col_resumo3:
                st.metric("Total a Pagar (L√≠quido)", f"R$ {total_liquido:.2f}")
            
            with col_resumo4:
                custo_total_folha = total_salarios + total_encargos
                st.metric("Custo Total da Folha", f"R$ {custo_total_folha:.2f}")
    
    with tab3:
        st.subheader("üìä An√°lise Tribut√°ria Detalhada")
        
        st.markdown("**Sistema de an√°lise tribut√°ria baseado no faturamento do neg√≥cio**")
        
        # An√°lise por regime tribut√°rio (funciona independentemente de funcion√°rios)
        regime_tributario = st.selectbox(
            "Regime tribut√°rio da empresa",
            ["Simples Nacional", "Lucro Presumido"],
            key="regime_analise"
        )
        
        faturamento_anual = st.number_input(
            "Faturamento anual estimado (R$)",
            min_value=0.0,
            value=360000.0,
            step=10000.0,
            key="fat_anual_tributario"
        )
        
        # C√°lculo simplificado do Simples Nacional
        if regime_tributario == "Simples Nacional":
            st.markdown("### üìã Simples Nacional - Anexo I (Com√©rcio)")
            
            # Calcular al√≠quota baseada no faturamento
            if faturamento_anual <= 180000:
                aliquota = 4.0
                faixa = "1¬™ faixa"
            elif faturamento_anual <= 360000:
                aliquota = 7.3
                faixa = "2¬™ faixa"
            elif faturamento_anual <= 720000:
                aliquota = 9.5
                faixa = "3¬™ faixa"
            elif faturamento_anual <= 1800000:
                aliquota = 10.26
                faixa = "4¬™ faixa"
            else:
                aliquota = 11.31
                faixa = "5¬™ faixa"
            
            # C√°lculos
            imposto_anual = faturamento_anual * (aliquota / 100)
            imposto_mensal = imposto_anual / 12
            
            # Exibir resultados
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "Al√≠quota Simples",
                    f"{aliquota}%",
                    f"{faixa}"
                )
            
            with col2:
                st.metric(
                    "DAS Mensal",
                    f"R$ {imposto_mensal:,.2f}",
                    f"R$ {imposto_anual:,.2f}/ano"
                )
            
            with col3:
                percentual_fat = (imposto_mensal / (faturamento_anual/12)) * 100
                st.metric(
                    "% do Faturamento",
                    f"{percentual_fat:.1f}%",
                    "Carga tribut√°ria"
                )
            
            st.info("""
            **üí° Simples Nacional para √ìticas:**
            - Anexo I (Com√©rcio): Para venda de produtos √≥pticos
            - Pagamento √∫nico mensal atrav√©s do DAS
            - Inclui todos os impostos federais, estaduais e municipais
            """)
        
        else:  # Lucro Presumido
            st.markdown("### üìã Lucro Presumido")
            
            # C√°lculos b√°sicos Lucro Presumido
            base_calculo_irpj = faturamento_anual * 0.08  # 8% para com√©rcio
            base_calculo_csll = faturamento_anual * 0.12  # 12% para com√©rcio
            
            irpj = base_calculo_irpj * 0.15  # 15%
            csll = base_calculo_csll * 0.09  # 9%
            pis = faturamento_anual * 0.0065  # 0,65%
            cofins = faturamento_anual * 0.03  # 3%
            
            total_federal = irpj + csll + pis + cofins
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Impostos Federais Anuais:**")
                st.markdown(f"‚Ä¢ IRPJ: R$ {irpj:,.2f}")
                st.markdown(f"‚Ä¢ CSLL: R$ {csll:,.2f}")
                st.markdown(f"‚Ä¢ PIS: R$ {pis:,.2f}")
                st.markdown(f"‚Ä¢ COFINS: R$ {cofins:,.2f}")
                st.markdown(f"**Total: R$ {total_federal:,.2f}**")
            
            with col2:
                st.metric(
                    "Total Mensal",
                    f"R$ {total_federal/12:,.2f}",
                    f"{(total_federal/faturamento_anual)*100:.1f}% do faturamento"
                )
            
            st.warning("""
            **‚ö†Ô∏è Lucro Presumido:**
            - N√£o inclui ICMS (estadual) e ISS (municipal)
            - Requer maior controle cont√°bil
            - Mais complexo que o Simples Nacional
            """)
        
        # Compara√ß√£o final
        st.markdown("---")
        st.markdown("### üí∞ Resumo da Tributa√ß√£o")
        
        # Usar valores configurados pelo usu√°rio (n√£o calcular automaticamente)
        impostos_configurado = st.session_state.business_data.get('impostos_percentual', 0) / 100
        custo_tributario_mensal_configurado = faturamento_anual * impostos_configurado / 12
        
        st.info(f"""
        **üìä Resumo baseado em suas configura√ß√µes:**
        - Faturamento anual: R$ {faturamento_anual:,.2f}
        - Taxa de impostos configurada: {impostos_configurado*100:.1f}%
        - Custo tribut√°rio mensal configurado: R$ {custo_tributario_mensal_configurado:,.2f}
        
        üí° *Valores baseados no que voc√™ configurou na Etapa 10*
        """)
    
    with tab4:
        st.subheader("üìã Compliance CLT - Checklist de Obriga√ß√µes")
        
        st.markdown("**Sistema de verifica√ß√£o de compliance trabalhista**")
        
        compliance_items = [
            {
                "categoria": "Admiss√£o",
                "itens": [
                    "Registro do empregado no livro/sistema de registro",
                    "Anota√ß√£o na CTPS (f√≠sica ou digital)",
                    "Cadastro no PIS/PASEP",
                    "Exames m√©dicos admissionais",
                    "Cadastro no eSocial",
                    "Termo de responsabilidade para vale-transporte"
                ]
            },
            {
                "categoria": "Mensal",
                "itens": [
                    "Folha de pagamento at√© o 5¬∫ dia √∫til",
                    "Guia de recolhimento do FGTS",
                    "GPS - Guia da Previd√™ncia Social",
                    "Declara√ß√£o do IRPF retido",
                    "Controle de ponto (se aplic√°vel)",
                    "Vale-refei√ß√£o/alimenta√ß√£o"
                ]
            },
            {
                "categoria": "Anual",
                "itens": [
                    "13¬∫ sal√°rio (at√© 20/12 ou duas parcelas)",
                    "F√©rias + 1/3 constitucional",
                    "RAIS - Rela√ß√£o Anual de Informa√ß√µes Sociais",
                    "DIRF - Declara√ß√£o do IR na Fonte",
                    "Exames m√©dicos peri√≥dicos",
                    "PPP - Perfil Profissiogr√°fico Previdenci√°rio"
                ]
            },
            {
                "categoria": "Demiss√£o",
                "itens": [
                    "Aviso pr√©vio (trabalhado ou indenizado)",
                    "Exame m√©dico demissional",
                    "Homologa√ß√£o (se aplic√°vel)",
                    "Termo de rescis√£o",
                    "Guias para saque do FGTS",
                    "Baixa na CTPS e eSocial"
                ]
            }
        ]
        
        col_compliance1, col_compliance2 = st.columns(2)
        
        for i, categoria in enumerate(compliance_items):
            target_col = col_compliance1 if i % 2 == 0 else col_compliance2
            
            with target_col:
                st.markdown(f"### {categoria['categoria']}")
                
                for item in categoria['itens']:
                    compliant = st.checkbox(
                        item,
                        key=f"compliance_{categoria['categoria']}_{item[:20]}"
                    )
                    
                    if not compliant:
                        st.error(f"‚ö†Ô∏è Pendente: {item}")
                
                st.markdown("---")
        
        # C√°lculo de compliance geral
        total_items = sum(len(cat['itens']) for cat in compliance_items)
        # Este seria calculado baseado nos checkboxes marcados
        st.markdown("### üìä Score de Compliance")
        st.progress(0.75)  # Exemplo: 75% de compliance
        st.info("Score: 75% - Bom n√≠vel de compliance trabalhista")
    
    with tab5:
        st.subheader("üßÆ Simulador de Custos de Contrata√ß√£o")
        
        st.markdown("**Simule diferentes cen√°rios de contrata√ß√£o**")
        
        col_sim1, col_sim2 = st.columns(2)
        
        with col_sim1:
            st.markdown("**Configura√ß√£o da Simula√ß√£o**")
            
            cargo_simulacao = st.selectbox(
                "Cargo para simular",
                ["Vendedor(a)", "Optometrista", "Gerente", "Recepcionista", "T√©cnico em √ìtica"],
                key="cargo_sim"
            )
            
            salario_simulacao = st.number_input(
                "Sal√°rio pretendido (R$)",
                min_value=1412.00,
                value=2000.00,
                step=100.00,
                key="salario_sim"
            )
            
            beneficios_sim = st.multiselect(
                "Benef√≠cios oferecidos",
                ["Vale transporte", "Vale refei√ß√£o", "Plano de sa√∫de", "Plano odontol√≥gico", "Participa√ß√£o nos lucros"],
                default=["Vale transporte", "Vale refei√ß√£o"],
                key="beneficios_sim"
            )
            
            comissao_sim = st.number_input(
                "Comiss√£o sobre vendas (%)",
                min_value=0.0,
                max_value=10.0,
                value=2.0,
                step=0.5,
                key="comissao_sim"
            )
            
            vendas_esperadas = st.number_input(
                "Vendas mensais esperadas (R$)",
                min_value=0.0,
                value=15000.0,
                step=1000.0,
                key="vendas_sim"
            )
        
        with col_sim2:
            st.markdown("**C√°lculo de Custo Total**")
            
            # C√°lculos detalhados
            salario_base = salario_simulacao
            comissao_mensal = vendas_esperadas * (comissao_sim / 100)
            salario_bruto_mensal = salario_base + comissao_mensal
            
            # Encargos
            inss_patronal = salario_bruto_mensal * 0.20
            fgts = salario_bruto_mensal * 0.08
            sistema_s = salario_bruto_mensal * 0.0358
            seguro_acidente = salario_bruto_mensal * 0.01
            total_encargos_sim = inss_patronal + fgts + sistema_s + seguro_acidente
            
            # Benef√≠cios
            custo_beneficios = 0
            if "Vale transporte" in beneficios_sim:
                custo_beneficios += 200  # Estimativa
            if "Vale refei√ß√£o" in beneficios_sim:
                custo_beneficios += 550  # 22 dias x R$25
            if "Plano de sa√∫de" in beneficios_sim:
                custo_beneficios += 300
            if "Plano odontol√≥gico" in beneficios_sim:
                custo_beneficios += 50
            
            # Custos anuais adicionais
            decimo_terceiro = salario_bruto_mensal
            ferias = salario_bruto_mensal * 1.33  # + 1/3
            custos_anuais_extras = (decimo_terceiro + ferias) / 12
            
            custo_total_mensal = salario_bruto_mensal + total_encargos_sim + custo_beneficios + custos_anuais_extras
            
            # Exibir resultados com explica√ß√£o clara
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #f8f9fa, #e9ecef);
                padding: 1.5rem;
                border-radius: 12px;
                border-left: 4px solid #6c757d;
                margin: 1rem 0;
            ">
                <div style="font-size: 1.1rem; font-weight: bold; color: #495057; margin-bottom: 0.5rem;">
                    Custo total para contratar este funcion√°rio
                </div>
                <div style="font-size: 2rem; font-weight: bold; color: #495057; margin-bottom: 1rem;">
                    R$ {custo_total_mensal:.2f}/m√™s
                </div>
                <div style="font-size: 1rem; font-weight: bold; color: #495057; margin-bottom: 0.5rem;">
                    Porque?:
                </div>
                <div style="color: #495057; line-height: 1.5;">
                    ‚Ä¢ <strong>Sal√°rio + comiss√£o:</strong> R$ {salario_bruto_mensal:.2f} (base R$ {salario_base:.2f} + comiss√£o R$ {comissao_mensal:.2f})<br>
                    ‚Ä¢ <strong>Encargos sociais:</strong> R$ {total_encargos_sim:.2f} (INSS, FGTS, Sistema S obrigat√≥rios por lei)<br>
                    ‚Ä¢ <strong>Benef√≠cios:</strong> R$ {custo_beneficios:.2f} (vale transporte, refei√ß√£o, planos)<br>
                    ‚Ä¢ <strong>13¬∫ e f√©rias:</strong> R$ {custos_anuais_extras:.2f} (custos anuais divididos por 12 meses)
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # An√°lise de ROI
            st.markdown("**An√°lise de Retorno:**")
            if vendas_esperadas > 0:
                roi_contratacao = (vendas_esperadas - custo_total_mensal) / custo_total_mensal * 100
                st.metric("ROI da Contrata√ß√£o", f"{roi_contratacao:.1f}%")
                
                if roi_contratacao > 200:
                    st.success("‚úÖ Contrata√ß√£o muito vi√°vel")
                elif roi_contratacao > 100:
                    st.info("‚úÖ Contrata√ß√£o vi√°vel")
                elif roi_contratacao > 50:
                    st.warning("‚ö†Ô∏è Contrata√ß√£o question√°vel")
                else:
                    st.error("‚ùå Contrata√ß√£o n√£o recomendada")
        
        # Compara√ß√£o com diferentes regimes
        st.markdown("---")
        st.markdown("### üìä Compara√ß√£o por Regime Tribut√°rio")
        
        col_reg1, col_reg2, col_reg3 = st.columns(3)
        
        with col_reg1:
            st.markdown("**CLT + Simples Nacional**")
            custo_simples = custo_total_mensal - (salario_bruto_mensal * 0.20) + (salario_bruto_mensal * 0.08)
            st.metric("Custo Mensal", f"R$ {custo_simples:.2f}")
            st.caption("INSS patronal inclu√≠do no DAS")
        
        with col_reg2:
            st.markdown("**CLT + Lucro Presumido**")
            st.metric("Custo Mensal", f"R$ {custo_total_mensal:.2f}")
            st.caption("Todos os encargos aplic√°veis")
        
        with col_reg3:
            st.markdown("**Prestador de Servi√ßos/MEI**")
            custo_pj = salario_base * 1.3  # Acr√©scimo para compensar encargos
            st.metric("Custo Mensal", f"R$ {custo_pj:.2f}")
            st.caption("Sem encargos trabalhistas")

def show_plan_validator_tool():
    """Validador do Plano - Auditoria Completa do Plano de Neg√≥cios"""
    
    # Header with back button
    col1, col2 = st.columns([1, 6])
    with col1:
        if st.button("‚¨ÖÔ∏è Voltar", key="back_plan_validator"):
            st.session_state.show_plan_validator = False
            st.rerun()
    
    with col2:
        st.title("üîç Validador do Plano de Neg√≥cios")
        st.markdown("**Auditoria completa - verifica se seu plano est√° consistente e completo**")
    
    # Contadores de status
    total_checks = 0
    passed_checks = 0
    warnings = 0
    errors = 0
    
    # Lista de valida√ß√µes
    validations = []
    
    # 1. VALIDA√á√ÉO B√ÅSICA DO NEG√ìCIO
    st.subheader("üìã 1. Informa√ß√µes B√°sicas do Neg√≥cio")
    
    # Verificar m√∫ltiplas poss√≠veis chaves para nome da empresa
    nome_empresa = (st.session_state.business_data.get('nome_otica', '') or 
                   st.session_state.business_data.get('nome_negocio', '') or 
                   st.session_state.business_data.get('nome_empresa', ''))
    
    if nome_empresa and len(nome_empresa.strip()) > 3:
        validations.append({
            "status": "‚úÖ", 
            "item": "Nome da empresa definido", 
            "details": f"'{nome_empresa}'",
            "sugestao": "Nome adequado para identifica√ß√£o comercial"
        })
        passed_checks += 1
    elif nome_empresa and len(nome_empresa.strip()) > 0:
        validations.append({
            "status": "‚ö†Ô∏è", 
            "item": "Nome da empresa muito curto", 
            "details": f"'{nome_empresa}' tem apenas {len(nome_empresa.strip())} caracteres",
            "sugestao": "A√á√ÉO: V√° para Etapa 1 ‚Üí Campo 'Nome da √ìtica' e digite um nome mais descritivo com pelo menos 4 caracteres. Ex: '√ìtica Vision', '√ìtica Central' ou '√ìptica do Bairro'"
        })
        warnings += 1
    else:
        validations.append({
            "status": "‚ùå", 
            "item": "Nome da empresa n√£o definido", 
            "details": "Campo obrigat√≥rio vazio",
            "sugestao": "A√á√ÉO CR√çTICA: V√° para Etapa 1 ‚Üí Sum√°rio Executivo ‚Üí Campo 'Nome da √ìtica' e defina o nome comercial. Este ser√° o nome usado em contratos, notas fiscais e documentos oficiais."
        })
        errors += 1
    total_checks += 1
    
    missao = st.session_state.business_data.get('missao', '')
    if missao and len(missao) > 20:
        validations.append({"status": "‚úÖ", "item": "Miss√£o da empresa definida", "details": f"{len(missao)} caracteres"})
        passed_checks += 1
    else:
        validations.append({"status": "‚ö†Ô∏è", "item": "Miss√£o muito curta ou n√£o definida", "details": "Recomendado pelo menos 20 caracteres"})
        warnings += 1
    total_checks += 1
    
    # **VALIDA√á√ÉO TRIBUT√ÅRIA CR√çTICA** - Prioridade m√°xima
    st.subheader("üö® Valida√ß√£o Tribut√°ria Cr√≠tica")
    
    tipo_empresa = st.session_state.business_data.get('tipo_empresa', 'MEI')
    objetivo_faturamento = st.session_state.business_data.get('objetivo_faturamento', 0)
    receita_anual = objetivo_faturamento * 12
    funcionarios_count = len(st.session_state.business_data.get('funcionarios_planejados', []))
    
    # Valida√ß√µes MEI
    if tipo_empresa == 'MEI':
        col_mei1, col_mei2 = st.columns(2)
        
        with col_mei1:
            st.markdown("**Limites MEI:**")
            if receita_anual > 81000:
                validations.append({
                    "status": "‚ùå", 
                    "item": "ERRO CR√çTICO: Receita MEI excedida", 
                    "details": f"R$ {receita_anual:,.0f} > R$ 81.000 (limite MEI)",
                    "sugestao": "A√á√ÉO URGENTE: V√° para Etapa 1 ‚Üí Altere 'Tipo de empresa' para 'Microempresa' OU reduza meta de faturamento para R$ 6.750/m√™s"
                })
                errors += 1
            else:
                validations.append({
                    "status": "‚úÖ", 
                    "item": "Receita MEI dentro do limite", 
                    "details": f"R$ {receita_anual:,.0f} ‚â§ R$ 81.000"
                })
                passed_checks += 1
            total_checks += 1
            
            if funcionarios_count > 1:
                validations.append({
                    "status": "‚ùå", 
                    "item": "ERRO CR√çTICO: Funcion√°rios MEI excedidos", 
                    "details": f"{funcionarios_count} funcion√°rios > 1 (limite MEI)",
                    "sugestao": "A√á√ÉO URGENTE: V√° para Etapa 8 ‚Üí Reduza para 1 funcion√°rio OU altere regime para 'Microempresa'"
                })
                errors += 1
            else:
                validations.append({
                    "status": "‚úÖ", 
                    "item": "Funcion√°rios MEI dentro do limite", 
                    "details": f"{funcionarios_count} ‚â§ 1 funcion√°rio"
                })
                passed_checks += 1
            total_checks += 1
        
        with col_mei2:
            st.markdown("**Quanto voc√™ vai pagar de impostos no MEI:**")
            # Valores corretos MEI 2025: √ìticas s√£o com√©rcio = R$ 76,90
            custo_mei_mes = 76.90  # R$ 75,90 INSS + R$ 1,00 ICMS (com√©rcio)
            custo_mei_anual = custo_mei_mes * 12
            perc_sobre_receita = (custo_mei_anual / receita_anual * 100) if receita_anual > 0 else 0
            
            # Formato claro: valor + explica√ß√£o detalhada
            st.markdown(f"""
            <div style="
                background: linear-gradient(135deg, #e8f5e8, #f0f8f0);
                padding: 1.5rem;
                border-radius: 12px;
                border-left: 4px solid #28a745;
                margin: 1rem 0;
            ">
                <div style="font-size: 1.1rem; font-weight: bold; color: #155724; margin-bottom: 0.5rem;">
                    Voc√™ paga por m√™s (MEI Com√©rcio)
                </div>
                <div style="font-size: 2rem; font-weight: bold; color: #28a745; margin-bottom: 1rem;">
                    R$ {custo_mei_mes:.2f}
                </div>
                <div style="font-size: 1rem; font-weight: bold; color: #155724; margin-bottom: 0.5rem;">
                    Porque?:
                </div>
                <div style="color: #155724; line-height: 1.5;">
                    ‚Ä¢ <strong>√â um valor fixo:</strong> Voc√™ paga sempre os mesmos R$ {custo_mei_mes:.2f}, mesmo que venda R$ 1.000 ou R$ 6.000 no m√™s<br>
                    ‚Ä¢ <strong>Composi√ß√£o do DAS:</strong> INSS R$ 75,90 + ICMS R$ 1,00 (√≥tica √© com√©rcio)<br>
                    ‚Ä¢ <strong>Sem surpresas:</strong> N√£o precisa calcular percentual sobre vendas, sempre o mesmo valor<br>
                    ‚Ä¢ <strong>Muito barato:</strong> Representa apenas {perc_sobre_receita:.2f}% do que voc√™ fatura
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Comparar com Simples Nacional
            if receita_anual > 0:
                custo_simples_anual = receita_anual * 0.04  # 4% primeira faixa
                custo_simples_mes = custo_simples_anual / 12
                diferenca_anual = custo_simples_anual - custo_mei_anual
                
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #fff3cd, #ffeaa7);
                    padding: 1.5rem;
                    border-radius: 12px;
                    border-left: 4px solid #ffc107;
                    margin: 1rem 0;
                ">
                    <div style="font-size: 1.1rem; font-weight: bold; color: #856404; margin-bottom: 0.5rem;">
                        Se fosse Microempresa (Simples Nacional)
                    </div>
                    <div style="font-size: 1.8rem; font-weight: bold; color: #ffc107; margin-bottom: 1rem;">
                        R$ {custo_simples_mes:.2f}/m√™s
                    </div>
                    <div style="font-size: 1rem; font-weight: bold; color: #856404; margin-bottom: 0.5rem;">
                        Porque?:
                    </div>
                    <div style="color: #856404; line-height: 1.5;">
                        ‚Ä¢ <strong>Baseado nas vendas:</strong> Voc√™ pagaria 4% de tudo que vender<br>
                        ‚Ä¢ <strong>Varia todo m√™s:</strong> Vendeu mais = paga mais impostos<br>
                        ‚Ä¢ <strong>Diferen√ßa anual:</strong> R$ {diferenca_anual:,.0f} {"a mais" if diferenca_anual > 0 else "a menos"} que o MEI<br>
                        ‚Ä¢ <strong>Conclus√£o:</strong> {"MEI √© mais barato para seu faturamento" if diferenca_anual > 0 else "Microempresa seria mais cara"}
                    </div>
                </div>
                """, unsafe_allow_html=True)
    
    # Valida√ß√µes Simples Nacional
    elif tipo_empresa in ['Microempresa', 'Empresa de Pequeno Porte']:
        st.markdown("**Verificando se sua empresa pode usar Simples Nacional:**")
        
        if receita_anual > 4800000:
            validations.append({
                "status": "‚ùå", 
                "item": "PROBLEMA: Sua empresa cresceu demais para o Simples Nacional", 
                "details": f"Voc√™ fatura R$ {receita_anual:,.0f} por ano, mas o limite √© R$ 4.800.000",
                "sugestao": "O QUE FAZER: Procure um contador para mudar para Lucro Presumido. √â mais caro, mas √© obrigat√≥rio."
            })
            errors += 1
        else:
            # Calcular al√≠quota correta
            if receita_anual <= 180000:
                aliquota_correta = 4.0
                faixa_explicacao = "faturamento baixo"
            elif receita_anual <= 360000:
                aliquota_correta = 5.47
                faixa_explicacao = "faturamento m√©dio-baixo"
            elif receita_anual <= 720000:
                aliquota_correta = 6.84
                faixa_explicacao = "faturamento m√©dio"
            else:
                aliquota_correta = 8.0
                faixa_explicacao = "faturamento alto"
            
            impostos_atual = st.session_state.business_data.get('impostos_percentual', 6.0)
            
            col_sn1, col_sn2 = st.columns(2)
            with col_sn1:
                validations.append({
                    "status": "‚úÖ", 
                    "item": f"Voc√™ pode usar {tipo_empresa}", 
                    "details": f"Seu faturamento √© considerado {faixa_explicacao} (taxa de {aliquota_correta}%)"
                })
                passed_checks += 1
                
            with col_sn2:
                # C√°lculo do que vai pagar no Simples Nacional
                custo_mensal_simples = (receita_anual * aliquota_correta / 100) / 12
                
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #e3f2fd, #bbdefb);
                    padding: 1.5rem;
                    border-radius: 12px;
                    border-left: 4px solid #2196f3;
                    margin: 1rem 0;
                ">
                    <div style="font-size: 1.1rem; font-weight: bold; color: #0d47a1; margin-bottom: 0.5rem;">
                        Voc√™ paga por m√™s no Simples Nacional
                    </div>
                    <div style="font-size: 2rem; font-weight: bold; color: #2196f3; margin-bottom: 1rem;">
                        R$ {custo_mensal_simples:.2f}
                    </div>
                    <div style="font-size: 1rem; font-weight: bold; color: #0d47a1; margin-bottom: 0.5rem;">
                        Porque?:
                    </div>
                    <div style="color: #0d47a1; line-height: 1.5;">
                        ‚Ä¢ <strong>Taxa de {aliquota_correta}%:</strong> Voc√™ paga {aliquota_correta}% de tudo que vender<br>
                        ‚Ä¢ <strong>Seu faturamento √© {faixa_explicacao}:</strong> R$ {receita_anual:,.0f}/ano = faixa de {aliquota_correta}%<br>
                        ‚Ä¢ <strong>Varia com as vendas:</strong> Vendeu R$ 10.000 = paga R$ {10000 * aliquota_correta / 100:.0f}<br>
                        ‚Ä¢ <strong>Inclui v√°rios impostos:</strong> IRPJ, CSLL, PIS, COFINS, ICMS, ISS em uma guia s√≥
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Valida√ß√£o da taxa configurada (mais flex√≠vel)
                diferenca_impostos = abs(impostos_atual - aliquota_correta)
                if diferenca_impostos > 3.0:
                    validations.append({
                        "status": "‚ö†Ô∏è", 
                        "item": "Taxa de impostos muito diferente do padr√£o", 
                        "details": f"Voc√™ configurou {impostos_atual}%, padr√£o seria {aliquota_correta}% (diferen√ßa: {diferenca_impostos:.1f}%)",
                        "sugestao": f"INFORMATIVO: Se tem certeza do valor, mantenha. Se n√£o, considere {aliquota_correta}% ou consulte contador"
                    })
                    warnings += 1
                else:
                    validations.append({
                        "status": "‚úÖ", 
                        "item": "Taxa de impostos configurada", 
                        "details": f"{impostos_atual}% (padr√£o seria {aliquota_correta}% - diferen√ßa aceit√°vel)"
                    })
                    passed_checks += 1
                total_checks += 1
        total_checks += 1
    
    # Valida√ß√µes Lucro Presumido
    elif tipo_empresa in ['Ltda', 'Outro']:
        st.markdown("**Verificando impostos para empresa comum (Lucro Presumido):**")
        impostos_atual = st.session_state.business_data.get('impostos_percentual', 6.0)
        
        # Lucro Presumido t√≠pico: 13.33% (IR+CSLL+PIS+COFINS+ICMS/ISS)
        st.info("üí° Empresas normais (Ltda) pagam mais impostos que MEI ou Simples Nacional")
        
        if impostos_atual < 10.0:
            validations.append({
                "status": "‚ö†Ô∏è", 
                "item": "Sua taxa de impostos parece muito baixa", 
                "details": f"Voc√™ configurou {impostos_atual}%, mas empresas normais pagam entre 13-15%",
                "sugestao": "O QUE FAZER: V√° na Etapa 10 ‚Üí Mude 'Impostos' para 13-15%. Converse com um contador para confirmar."
            })
            warnings += 1
        else:
            validations.append({
                "status": "‚úÖ", 
                "item": "Sua taxa de impostos est√° dentro do esperado", 
                "details": f"{impostos_atual}% √© uma taxa t√≠pica para empresas comuns"
            })
            passed_checks += 1
        total_checks += 1
    
    st.markdown("---")
    
    # 2. VALIDA√á√ÉO FINANCEIRA
    st.subheader("üí∞ 2. Estrutura Financeira")
    
    vendas_mes_1 = st.session_state.business_data.get('vendas_mes_1', 0)
    if vendas_mes_1 > 5000:
        validations.append({"status": "‚úÖ", "item": "Meta de faturamento definida", "details": f"{format_currency(vendas_mes_1)}/m√™s"})
        passed_checks += 1
    else:
        validations.append({"status": "‚ùå", "item": "Meta de faturamento muito baixa ou n√£o definida", "details": "Defina na Etapa 10"})
        errors += 1
    total_checks += 1
    
    investimento_total = st.session_state.business_data.get('investimento_total', 0)
    capital_giro = st.session_state.business_data.get('capital_giro', 0)
    if investimento_total > 0 and capital_giro > 0:
        ratio_giro = (capital_giro / investimento_total) * 100
        if ratio_giro >= 15:
            validations.append({"status": "‚úÖ", "item": "Capital de giro adequado", "details": f"{ratio_giro:.1f}% do investimento total"})
            passed_checks += 1
        else:
            validations.append({"status": "‚ö†Ô∏è", "item": "Capital de giro pode ser insuficiente", "details": f"Apenas {ratio_giro:.1f}% do investimento"})
            warnings += 1
    else:
        validations.append({"status": "‚ùå", "item": "Investimento inicial n√£o definido", "details": "Configure na Etapa 9"})
        errors += 1
    total_checks += 1
    
    # 3. VALIDA√á√ïES MATEM√ÅTICAS AVAN√áADAS
    st.subheader("üßÆ 3. Valida√ß√µes Matem√°ticas e Financeiras")
    
    # 3.1 VALIDA√á√ÉO DE FOLHA DE PAGAMENTO
    funcionarios_dp = st.session_state.business_data.get('funcionarios_dp', [])
    salarios_total = st.session_state.business_data.get('salarios_total', 0)
    folha_clt = st.session_state.business_data.get('folha_clt', 0)
    total_optometrista = st.session_state.business_data.get('total_optometrista', 0)
    
    if funcionarios_dp:
        # Calcular folha real baseada nos funcion√°rios cadastrados
        folha_calculada_clt = 0
        folha_calculada_terceiros = 0
        
        for func in funcionarios_dp:
            salario_base = func.get('salario_base', 0)
            tipo_contrato = func.get('tipo_contrato', 'CLT')
            
            if tipo_contrato == 'CLT':
                # CLT com encargos de 68%
                custo_total = salario_base * 1.68
                folha_calculada_clt += custo_total
            else:
                # MEI/Prestador sem encargos
                folha_calculada_terceiros += salario_base
        
        # Comparar com valores informados nas proje√ß√µes
        if abs(folha_clt - folha_calculada_clt) < 100:  # Toler√¢ncia de R$ 100
            validations.append({
                "status": "‚úÖ", 
                "item": "Folha CLT consistente", 
                "details": f"Calculado: {format_currency(folha_calculada_clt)} = Informado: {format_currency(folha_clt)}",
                "sugestao": "Valores de folha CLT est√£o corretos com encargos de 68%"
            })
            passed_checks += 1
        else:
            validations.append({
                "status": "‚ùå", 
                "item": "Diverg√™ncia na folha CLT", 
                "details": f"Calculado: {format_currency(folha_calculada_clt)} ‚â† Informado: {format_currency(folha_clt)}",
                "sugestao": "A√á√ÉO: V√° para Etapa 10 ‚Üí Folha CLT ou DP e Tributa√ß√£o para sincronizar os valores. A diferen√ßa pode indicar erro nos encargos (68%) ou funcion√°rios n√£o inclu√≠dos."
            })
            errors += 1
        total_checks += 1
        
        if abs(total_optometrista - folha_calculada_terceiros) < 50:
            validations.append({
                "status": "‚úÖ", 
                "item": "Servi√ßos terceirizados consistentes", 
                "details": f"Calculado: {format_currency(folha_calculada_terceiros)} = Informado: {format_currency(total_optometrista)}"
            })
            passed_checks += 1
        else:
            validations.append({
                "status": "‚ö†Ô∏è", 
                "item": "Diverg√™ncia em servi√ßos terceirizados", 
                "details": f"Calculado: {format_currency(folha_calculada_terceiros)} ‚â† Informado: {format_currency(total_optometrista)}",
                "sugestao": "A√á√ÉO: Verifique na Etapa 10 se os valores de prestadores/MEI est√£o corretos (sem encargos)"
            })
            warnings += 1
        total_checks += 1
    else:
        validations.append({
            "status": "‚ö†Ô∏è", 
            "item": "Nenhum funcion√°rio cadastrado no DP", 
            "details": "N√£o √© poss√≠vel validar c√°lculos de folha",
            "sugestao": "A√á√ÉO: Acesse DP e Tributa√ß√£o para cadastrar funcion√°rios ou Etapa 8 para planejar equipe"
        })
        warnings += 1
        total_checks += 1
    
    # 3.2 VALIDA√á√ÉO DE FATURAMENTO E TICKET M√âDIO
    ticket_medio = st.session_state.business_data.get('ticket_medio', 0)
    ticket_medio_esperado = st.session_state.business_data.get('ticket_medio_esperado', 0)
    clientes_mes = st.session_state.business_data.get('clientes_mes', 0)
    
    if ticket_medio > 0 and clientes_mes > 0:
        faturamento_calculado = ticket_medio * clientes_mes
        if vendas_mes_1 > 0:
            diferenca_faturamento = abs(faturamento_calculado - vendas_mes_1)
            tolerancia = vendas_mes_1 * 0.05  # 5% de toler√¢ncia
            
            if diferenca_faturamento <= tolerancia:
                validations.append({
                    "status": "‚úÖ", 
                    "item": "Faturamento matematicamente correto", 
                    "details": f"{format_currency(ticket_medio)} √ó {clientes_mes} clientes = {format_currency(faturamento_calculado)}",
                    "sugestao": "C√°lculo: Ticket m√©dio √ó Clientes/m√™s est√° consistente"
                })
                passed_checks += 1
            else:
                validations.append({
                    "status": "‚ùå", 
                    "item": "Erro matem√°tico no faturamento", 
                    "details": f"Calculado: {format_currency(faturamento_calculado)} ‚â† Informado: {format_currency(vendas_mes_1)}",
                    "sugestao": "A√á√ÉO CR√çTICA: V√° para Etapa 10 ‚Üí Corrija a f√≥rmula: Faturamento = Ticket m√©dio √ó N√∫mero de clientes. Valores devem ser consistentes."
                })
                errors += 1
        total_checks += 1
    
    # Verificar consist√™ncia entre tickets m√©dios de diferentes etapas
    if ticket_medio > 0 and ticket_medio_esperado > 0:
        if abs(ticket_medio - ticket_medio_esperado) < 50:
            validations.append({
                "status": "‚úÖ", 
                "item": "Ticket m√©dio sincronizado entre etapas", 
                "details": f"Etapa 3: {format_currency(ticket_medio_esperado)} = Etapa 10: {format_currency(ticket_medio)}"
            })
            passed_checks += 1
        else:
            validations.append({
                "status": "‚ùå", 
                "item": "Tickets m√©dios divergentes entre etapas", 
                "details": f"Etapa 3: {format_currency(ticket_medio_esperado)} ‚â† Etapa 10: {format_currency(ticket_medio)}",
                "sugestao": "A√á√ÉO: Sincronize os valores na Etapa 3 (Ticket m√©dio esperado) e Etapa 10 (Proje√ß√µes). Devem ser iguais."
            })
            errors += 1
        total_checks += 1
    
    # 3.3 VALIDA√á√ÉO DE ENCARGOS E TRIBUTA√á√ÉO
    regime_tributario = st.session_state.business_data.get('regime_tributario', '')
    if regime_tributario and vendas_mes_1 > 0:
        if regime_tributario == 'Simples Nacional':
            # Simples Nacional - verificar al√≠quota
            anexo = st.session_state.business_data.get('anexo_simples', 'Anexo I')
            faturamento_anual = vendas_mes_1 * 12
            
            # Al√≠quotas aproximadas do Simples Nacional 2024
            if anexo == 'Anexo I' and faturamento_anual <= 180000:
                aliquota_esperada = 4.0  # Com√©rcio
            elif anexo == 'Anexo III' and faturamento_anual <= 180000:
                aliquota_esperada = 6.0  # Servi√ßos
            else:
                aliquota_esperada = 8.0  # Faixas superiores
            
            imposto_calculado = vendas_mes_1 * (aliquota_esperada / 100)
            imposto_informado = st.session_state.business_data.get('impostos', 0)
            
            if abs(imposto_calculado - imposto_informado) < 200:
                validations.append({
                    "status": "‚úÖ", 
                    "item": "Tributa√ß√£o Simples Nacional correta", 
                    "details": f"{anexo}: {aliquota_esperada}% = {format_currency(imposto_calculado)}",
                    "sugestao": f"Al√≠quota de {aliquota_esperada}% aplicada corretamente"
                })
                passed_checks += 1
            else:
                validations.append({
                    "status": "‚ùå", 
                    "item": "Erro no c√°lculo tribut√°rio", 
                    "details": f"Esperado: {format_currency(imposto_calculado)} ({aliquota_esperada}%) ‚â† Informado: {format_currency(imposto_informado)}",
                    "sugestao": "A√á√ÉO: V√° para DP e Tributa√ß√£o ‚Üí Revise a al√≠quota do Simples Nacional. Para √≥ticas, usar Anexo I (com√©rcio) ou III (servi√ßos)."
                })
                errors += 1
            total_checks += 1
    
    # 3.4 VALIDA√á√ÉO DE CUSTOS E MARGENS
    aluguel = st.session_state.business_data.get('aluguel', 0)
    if aluguel > 0 and vendas_mes_1 > 0:
        ratio_aluguel = (aluguel / vendas_mes_1) * 100
        if ratio_aluguel <= 15:
            validations.append({
                "status": "‚úÖ", 
                "item": "Aluguel proporcional √† receita", 
                "details": f"{ratio_aluguel:.1f}% da receita (ideal: at√© 15%)",
                "sugestao": "Custo de aluguel dentro do recomendado para o setor √≥ptico"
            })
            passed_checks += 1
        elif ratio_aluguel <= 25:
            validations.append({
                "status": "‚ö†Ô∏è", 
                "item": "Aluguel elevado mas aceit√°vel", 
                "details": f"{ratio_aluguel:.1f}% da receita (ideal: at√© 15%)",
                "sugestao": "ATEN√á√ÉO: Aluguel alto pode pressionar margem. Considere negociar ou buscar localiza√ß√£o alternativa."
            })
            warnings += 1
        else:
            validations.append({
                "status": "‚ùå", 
                "item": "Aluguel muito alto - risco financeiro", 
                "details": f"{ratio_aluguel:.1f}% da receita (m√°ximo recomendado: 15%)",
                "sugestao": "A√á√ÉO CR√çTICA: Renegocie aluguel ou busque novo ponto. Aluguel acima de 25% da receita compromete viabilidade."
            })
            errors += 1
        total_checks += 1
    
    # 3.5 AN√ÅLISE DE MARGEM DE PRODUTOS (EXEMPLO DETALHADO)
    produtos_cadastrados = st.session_state.business_data.get('produtos_servicos', [])
    if produtos_cadastrados:
        produto_exemplo = None
        for produto in produtos_cadastrados:
            if produto.get('preco_venda', 0) > 0 and produto.get('custo_unitario', 0) > 0:
                produto_exemplo = produto
                break
        
        if produto_exemplo:
            nome_produto = produto_exemplo.get('nome', 'Produto')
            preco_venda = produto_exemplo.get('preco_venda', 0)
            custo_unitario = produto_exemplo.get('custo_unitario', 0)
            
            margem_bruta = preco_venda - custo_unitario
            margem_percentual = (margem_bruta / preco_venda) * 100 if preco_venda > 0 else 0
            markup = (margem_bruta / custo_unitario) * 100 if custo_unitario > 0 else 0
            
            if margem_percentual >= 50:
                validations.append({
                    "status": "‚úÖ", 
                    "item": f"Margem adequada - {nome_produto}", 
                    "details": f"Custo: {format_currency(custo_unitario)} ‚Üí Venda: {format_currency(preco_venda)} = {margem_percentual:.1f}% margem",
                    "sugestao": f"Markup: {markup:.1f}% - margem saud√°vel para o setor √≥ptico"
                })
                passed_checks += 1
            elif margem_percentual >= 30:
                validations.append({
                    "status": "‚ö†Ô∏è", 
                    "item": f"Margem apertada - {nome_produto}", 
                    "details": f"Custo: {format_currency(custo_unitario)} ‚Üí Venda: {format_currency(preco_venda)} = {margem_percentual:.1f}% margem",
                    "sugestao": "ATEN√á√ÉO: Margem baixa. Para √≥ticas, ideal √© 50-60%. Revise pre√ßos ou fornecedores."
                })
                warnings += 1
            else:
                validations.append({
                    "status": "‚ùå", 
                    "item": f"Margem insuficiente - {nome_produto}", 
                    "details": f"Custo: {format_currency(custo_unitario)} ‚Üí Venda: {format_currency(preco_venda)} = {margem_percentual:.1f}% margem",
                    "sugestao": "A√á√ÉO CR√çTICA: Margem abaixo de 30% inviabiliza opera√ß√£o. Reavalie precifica√ß√£o na Etapa 5 ou Sistema de Precifica√ß√£o."
                })
                errors += 1
            total_checks += 1
        else:
            validations.append({
                "status": "‚ö†Ô∏è", 
                "item": "Produtos sem custos/pre√ßos definidos", 
                "details": "N√£o √© poss√≠vel validar margens",
                "sugestao": "A√á√ÉO: V√° para Etapa 5 ou Sistema de Precifica√ß√£o para definir custos e pre√ßos de venda"
            })
            warnings += 1
            total_checks += 1
    
    # 3.6 VALIDA√á√ÉO DE CUSTOS FIXOS TOTAIS
    aluguel = st.session_state.business_data.get('aluguel', 0)
    salarios_total = st.session_state.business_data.get('salarios_total', 0)
    outros_custos = st.session_state.business_data.get('outros_custos_fixos', 0)
    
    if aluguel > 0 and salarios_total > 0:
        custo_fixo_total = aluguel + salarios_total + outros_custos
        if vendas_mes_1 > 0:
            ratio_custo = (custo_fixo_total / vendas_mes_1) * 100
            if ratio_custo <= 60:
                validations.append({
                    "status": "‚úÖ", 
                    "item": "Estrutura de custos equilibrada", 
                    "details": f"Custos fixos: {ratio_custo:.1f}% da receita (ideal: at√© 60%)",
                    "sugestao": f"Aluguel: {format_currency(aluguel)} + Folha: {format_currency(salarios_total)} + Outros: {format_currency(outros_custos)}"
                })
                passed_checks += 1
            elif ratio_custo <= 80:
                validations.append({
                    "status": "‚ö†Ô∏è", 
                    "item": "Custos fixos elevados", 
                    "details": f"{ratio_custo:.1f}% da receita (ideal: at√© 60%)",
                    "sugestao": "ATEN√á√ÉO: Estrutura de custos pesada. Considere otimizar folha ou renegociar aluguel."
                })
                warnings += 1
            else:
                validations.append({
                    "status": "‚ùå", 
                    "item": "Custos fixos excessivos", 
                    "details": f"{ratio_custo:.1f}% da receita - risco alto de preju√≠zo",
                    "sugestao": "A√á√ÉO CR√çTICA: Custos fixos acima de 80% s√£o insustent√°veis. Reavalie toda estrutura de custos."
                })
                errors += 1
        else:
            validations.append({
                "status": "‚ö†Ô∏è", 
                "item": "Custos definidos mas receita n√£o", 
                "details": "Configure vendas na Etapa 10",
                "sugestao": "A√á√ÉO: Defina metas de faturamento para validar propor√ß√£o de custos"
            })
            warnings += 1
    else:
        validations.append({"status": "‚ùå", "item": "Custos fixos n√£o definidos", "details": "Configure aluguel e folha na Etapa 10"})
        errors += 1
    total_checks += 1
    
    # 4. VALIDA√á√ÉO DE PESSOAL
    st.subheader("üë• 4. Gest√£o de Pessoas")
    
    if hasattr(st.session_state, 'funcionarios') and st.session_state.funcionarios:
        num_funcionarios = len(st.session_state.funcionarios)
        funcionarios_clt = [f for f in st.session_state.funcionarios if f['tipo_contrato'] == 'CLT']
        
        if num_funcionarios >= 2:
            validations.append({"status": "‚úÖ", "item": "Equipe dimensionada", "details": f"{num_funcionarios} funcion√°rios cadastrados"})
            passed_checks += 1
        else:
            validations.append({"status": "‚ö†Ô∏è", "item": "Equipe pequena", "details": f"Apenas {num_funcionarios} funcion√°rio(s)"})
            warnings += 1
        
        # Verificar se h√° optometrista
        tem_optometrista = any('optom' in f['cargo'].lower() for f in st.session_state.funcionarios)
        if tem_optometrista:
            validations.append({"status": "‚úÖ", "item": "Optometrista cadastrado", "details": "Essencial para √≥tica"})
            passed_checks += 1
        else:
            validations.append({"status": "‚ùå", "item": "Optometrista n√£o encontrado", "details": "Obrigat√≥rio para √≥ticas"})
            errors += 1
        
        total_checks += 2
    else:
        validations.append({"status": "‚ùå", "item": "Nenhum funcion√°rio cadastrado", "details": "Configure no DP e Tributa√ß√£o"})
        errors += 1
        total_checks += 1
    
    # 5. VALIDA√á√ÉO DE MERCADO
    st.subheader("üéØ 5. An√°lise de Mercado")
    
    cidade = st.session_state.business_data.get('cidade', '')
    estado = st.session_state.business_data.get('estado', '')
    if cidade and estado:
        validations.append({"status": "‚úÖ", "item": "Localiza√ß√£o definida", "details": f"{cidade}, {estado}"})
        passed_checks += 1
    else:
        validations.append({"status": "‚ùå", "item": "Localiza√ß√£o n√£o definida", "details": "Configure na Etapa 2"})
        errors += 1
    total_checks += 1
    
    # Verificar m√∫ltiplos campos do p√∫blico-alvo
    faixa_etaria = st.session_state.business_data.get('faixa_etaria_principal', [])
    classe_social = st.session_state.business_data.get('classe_social', [])
    perfil_profissional = st.session_state.business_data.get('perfil_profissional', [])
    necessidades = st.session_state.business_data.get('necessidades_principais', [])
    
    if faixa_etaria or classe_social or perfil_profissional or necessidades:
        detalhes_publico = []
        if faixa_etaria:
            detalhes_publico.append(f"Idade: {', '.join(faixa_etaria[:2])}")
        if classe_social:
            detalhes_publico.append(f"Classe: {', '.join(classe_social[:2])}")
        if perfil_profissional:
            detalhes_publico.append(f"Perfil: {', '.join(perfil_profissional[:2])}")
        
        validations.append({"status": "‚úÖ", "item": "P√∫blico-alvo definido", "details": "; ".join(detalhes_publico)})
        passed_checks += 1
    else:
        validations.append({"status": "‚ö†Ô∏è", "item": "P√∫blico-alvo n√£o definido", "details": "Configure na Etapa 3"})
        warnings += 1
    total_checks += 1
    
    # 6. VALIDA√á√ÉO DE PRODUTOS
    st.subheader("üõçÔ∏è 6. Produtos e Servi√ßos")
    
    ticket_medio = st.session_state.business_data.get('ticket_medio', 0)
    if ticket_medio > 0:
        if ticket_medio >= 150:
            validations.append({"status": "‚úÖ", "item": "Ticket m√©dio competitivo", "details": f"{format_currency(ticket_medio)}"})
            passed_checks += 1
        else:
            validations.append({"status": "‚ö†Ô∏è", "item": "Ticket m√©dio baixo", "details": f"{format_currency(ticket_medio)} - considere aumentar"})
            warnings += 1
    else:
        validations.append({"status": "‚ùå", "item": "Ticket m√©dio n√£o definido", "details": "Configure na Etapa 5"})
        errors += 1
    total_checks += 1
    
    # 7. VALIDA√á√ÉO MATEM√ÅTICA RIGOROSA
    st.subheader("üîç 7. An√°lise Matem√°tica Cr√≠tica")
    
    objetivo_faturamento = st.session_state.business_data.get('objetivo_faturamento', 0)
    aluguel = st.session_state.business_data.get('aluguel', 0)
    salarios_total = st.session_state.business_data.get('salarios_total', 0)
    investimento_total = st.session_state.business_data.get('investimento_total', 0)
    area_loja = st.session_state.business_data.get('area_loja', 0)
    num_funcionarios = len(st.session_state.funcionarios) if hasattr(st.session_state, 'funcionarios') else 0
    
    # VALIDA√á√ÉO 1: Realismo do faturamento por vendas/dia
    if objetivo_faturamento > 0 and ticket_medio > 0:
        vendas_mes = objetivo_faturamento / ticket_medio
        vendas_dia_util = vendas_mes / 26  # 26 dias √∫teis
        vendas_sabado = vendas_dia_util * 1.5  # S√°bados s√£o mais movimentados
        
        if vendas_dia_util > 12:
            validations.append({
                "status": "‚ùå", 
                "item": "CR√çTICO: Meta invi√°vel operacionalmente", 
                "details": f"{vendas_dia_util:.1f} vendas/dia √∫til imposs√≠vel para √≥tica",
                "sugestao": f"CORRE√á√ÉO URGENTE: V√° para Etapa 1 ‚Üí 'Meta de faturamento mensal' e reduza de {format_currency(objetivo_faturamento)} para no m√°ximo {format_currency(12 * 26 * ticket_medio)}. OU v√° para Etapa 5 ‚Üí 'Faixa de pre√ßos' e aumente o ticket m√©dio de {format_currency(ticket_medio)} para pelo menos {format_currency(objetivo_faturamento / (12 * 26))}."
            })
            errors += 1
        elif vendas_dia_util > 8:
            validations.append({
                "status": "‚ö†Ô∏è", 
                "item": "Meta muito desafiadora", 
                "details": f"{vendas_dia_util:.1f} vendas/dia √∫til requer equipe experiente",
                "sugestao": f"OTIMIZA√á√ÉO: Para facilitar o alcance da meta, considere: 1) Aumentar ticket m√©dio na Etapa 5 de {format_currency(ticket_medio)} para {format_currency(objetivo_faturamento / (6 * 26))}, OU 2) Contratar mais vendedores na Etapa 8, OU 3) Reduzir meta para {format_currency(6 * 26 * ticket_medio)} na Etapa 1."
            })
            warnings += 1
        else:
            validations.append({
                "status": "‚úÖ", 
                "item": "Meta operacionalmente vi√°vel", 
                "details": f"{vendas_dia_util:.1f} vendas/dia √∫til",
                "sugestao": "Meta realista para opera√ß√£o de √≥tica"
            })
            passed_checks += 1
        total_checks += 1
        
        # VALIDA√á√ÉO 2: Capacidade por funcion√°rio
        if num_funcionarios > 0:
            vendas_por_funcionario_dia = vendas_dia_util / num_funcionarios
            if vendas_por_funcionario_dia > 4:
                validations.append({"status": "‚ùå", "item": "CR√çTICO: Equipe insuficiente", "details": f"{vendas_por_funcionario_dia:.1f} vendas/funcion√°rio/dia (m√°ximo: 4)"})
                errors += 1
            elif vendas_por_funcionario_dia > 3:
                validations.append({"status": "‚ö†Ô∏è", "item": "Equipe no limite", "details": f"{vendas_por_funcionario_dia:.1f} vendas/funcion√°rio/dia"})
                warnings += 1
            else:
                validations.append({"status": "‚úÖ", "item": "Equipe adequada", "details": f"{vendas_por_funcionario_dia:.1f} vendas/funcion√°rio/dia"})
                passed_checks += 1
            total_checks += 1
    
    # VALIDA√á√ÉO 3: An√°lise cr√≠tica do ticket m√©dio
    if ticket_medio > 0:
        if ticket_medio < 100:
            validations.append({
                "status": "‚ùå", 
                "item": "CR√çTICO: Ticket m√©dio invi√°vel", 
                "details": f"{format_currency(ticket_medio)} imposs√≠vel cobrir custos",
                "sugestao": f"A√á√ÉO CR√çTICA: V√° para Etapa 5 ‚Üí Produtos e Servi√ßos ‚Üí 'Faixa de pre√ßos mais vendida' e selecione pelo menos 'R$ 150 - R$ 299'. Com {format_currency(ticket_medio)}, nem conseguir√° pagar um funcion√°rio (sal√°rio m√≠nimo + encargos = R$ 2.550/m√™s √∑ 100 vendas = R$ 25,50 s√≥ de m√£o de obra por venda)."
            })
            errors += 1
        elif ticket_medio < 200:
            validations.append({
                "status": "‚ö†Ô∏è", 
                "item": "Ticket m√©dio muito baixo", 
                "details": f"{format_currency(ticket_medio)} dificulta rentabilidade",
                "sugestao": f"MELHORIA: V√° para Etapa 5 ‚Üí 'Faixa de pre√ßos mais vendida' e considere aumentar para 'R$ 200 - R$ 399'. Para refer√™ncia: √≥ticas bem-sucedidas t√™m ticket m√©dio de R$ 250-400. Inclua mais servi√ßos como consultas, tratamentos de lente ou acess√≥rios."
            })
            warnings += 1
        elif ticket_medio > 1000:
            validations.append({
                "status": "‚ö†Ô∏è", 
                "item": "Ticket m√©dio muito alto", 
                "details": f"{format_currency(ticket_medio)} pode reduzir demanda drasticamente",
                "sugestao": f"CUIDADO: Ticket de {format_currency(ticket_medio)} √© muito alto para maioria dos brasileiros. V√° para Etapa 5 ‚Üí 'Faixa de pre√ßos' e considere oferecer op√ß√µes mais acess√≠veis (R$ 300-600). OU v√° para Etapa 3 ‚Üí P√∫blico-Alvo e certifique-se de focar em classes A/B que podem pagar estes valores."
            })
            warnings += 1
        else:
            validations.append({
                "status": "‚úÖ", 
                "item": "Ticket m√©dio realista", 
                "details": f"{format_currency(ticket_medio)} dentro da faixa vi√°vel",
                "sugestao": "Ticket m√©dio adequado para o mercado brasileiro de √≥ticas"
            })
            passed_checks += 1
        total_checks += 1
    
    # VALIDA√á√ÉO 4: Estrutura de custos vs faturamento
    if objetivo_faturamento > 0:
        custos_fixos_principais = aluguel + salarios_total
        if custos_fixos_principais > 0:
            percentual_custos_fixos = (custos_fixos_principais / objetivo_faturamento) * 100
            
            if percentual_custos_fixos > 75:
                validations.append({"status": "‚ùå", "item": "CR√çTICO: Estrutura de custos insustent√°vel", "details": f"{percentual_custos_fixos:.1f}% em custos fixos (m√°ximo vi√°vel: 60%)"})
                errors += 1
            elif percentual_custos_fixos > 60:
                validations.append({"status": "‚ö†Ô∏è", "item": "Custos fixos excessivos", "details": f"{percentual_custos_fixos:.1f}% do faturamento (ideal: <50%)"})
                warnings += 1
            else:
                validations.append({"status": "‚úÖ", "item": "Estrutura de custos saud√°vel", "details": f"{percentual_custos_fixos:.1f}% em custos fixos"})
                passed_checks += 1
            total_checks += 1
        
        # VALIDA√á√ÉO 5: Aluguel espec√≠fico
        if aluguel > 0:
            percentual_aluguel = (aluguel / objetivo_faturamento) * 100
            if percentual_aluguel > 20:
                validations.append({
                    "status": "‚ùå", 
                    "item": "CR√çTICO: Aluguel proibitivo", 
                    "details": f"{percentual_aluguel:.1f}% do faturamento (m√°ximo: 15%)",
                    "sugestao": f"CORRE√á√ÉO: V√° para Etapa 10 ‚Üí Proje√ß√µes Financeiras ‚Üí aba 'Estrutura de Custos' ‚Üí campo 'Aluguel (R$)' e reduza de {format_currency(aluguel)} para no m√°ximo {format_currency(objetivo_faturamento * 0.15)}. OU aumente a meta de faturamento na Etapa 1 para pelo menos {format_currency(aluguel / 0.15)}."
                })
                errors += 1
            elif percentual_aluguel > 12:
                validations.append({
                    "status": "‚ö†Ô∏è", 
                    "item": "Aluguel elevado", 
                    "details": f"{percentual_aluguel:.1f}% do faturamento (ideal: <10%)",
                    "sugestao": f"OTIMIZA√á√ÉO: V√° para Etapa 10 ‚Üí Proje√ß√µes Financeiras ‚Üí aba 'Estrutura de Custos' ‚Üí reduza aluguel de {format_currency(aluguel)} para {format_currency(objetivo_faturamento * 0.10)} ou negocie um local mais barato."
                })
                warnings += 1
            else:
                validations.append({
                    "status": "‚úÖ", 
                    "item": "Aluguel proporcional", 
                    "details": f"{percentual_aluguel:.1f}% do faturamento",
                    "sugestao": "Propor√ß√£o adequada entre aluguel e receita projetada"
                })
                passed_checks += 1
            total_checks += 1
    
    # VALIDA√á√ÉO 6: An√°lise de √°rea vs faturamento
    if area_loja > 0 and objetivo_faturamento > 0:
        faturamento_por_m2 = objetivo_faturamento / area_loja
        if faturamento_por_m2 < 500:
            validations.append({"status": "‚ùå", "item": "CR√çTICO: Produtividade por m¬≤ muito baixa", "details": f"{format_currency(faturamento_por_m2)}/m¬≤ (m√≠nimo: R$ 800/m¬≤)"})
            errors += 1
        elif faturamento_por_m2 < 800:
            validations.append({"status": "‚ö†Ô∏è", "item": "Produtividade por m¬≤ baixa", "details": f"{format_currency(faturamento_por_m2)}/m¬≤ (ideal: >R$ 1.200/m¬≤)"})
            warnings += 1
        else:
            validations.append({"status": "‚úÖ", "item": "Produtividade por m¬≤ adequada", "details": f"{format_currency(faturamento_por_m2)}/m¬≤"})
            passed_checks += 1
        total_checks += 1
    
    # VALIDA√á√ÉO 7: Payback realista
    if investimento_total > 0 and objetivo_faturamento > 0:
        margem_liquida_conservadora = 0.15  # 15% margem l√≠quida realista
        lucro_mensal = objetivo_faturamento * margem_liquida_conservadora
        payback_meses = investimento_total / lucro_mensal if lucro_mensal > 0 else 999
        
        if payback_meses > 48:
            validations.append({"status": "‚ùå", "item": "CR√çTICO: Payback proibitivo", "details": f"{payback_meses:.0f} meses (m√°ximo aceit√°vel: 36 meses)"})
            errors += 1
        elif payback_meses > 30:
            validations.append({"status": "‚ö†Ô∏è", "item": "Payback elevado", "details": f"{payback_meses:.0f} meses (ideal: <24 meses)"})
            warnings += 1
        else:
            validations.append({"status": "‚úÖ", "item": "Payback atrativo", "details": f"{payback_meses:.0f} meses"})
            passed_checks += 1
        total_checks += 1
    
    # VALIDA√á√ÉO 8: Capital de giro vs faturamento
    if investimento_total > 0 and objetivo_faturamento > 0:
        capital_giro_necessario = objetivo_faturamento * 2  # 2 meses de faturamento
        if investimento_total < capital_giro_necessario:
            deficit_capital = capital_giro_necessario - investimento_total
            validations.append({
                "status": "‚ùå", 
                "item": "CR√çTICO: Capital de giro insuficiente", 
                "details": f"Faltam {format_currency(deficit_capital)} para 2 meses de opera√ß√£o",
                "sugestao": f"CORRE√á√ÉO URGENTE: V√° para Etapa 9 ‚Üí Investimento Inicial ‚Üí role at√© o final ‚Üí campo 'Investimento total' e aumente de {format_currency(investimento_total)} para pelo menos {format_currency(capital_giro_necessario)}. Voc√™ precisa de dinheiro suficiente para operar 2 meses sem faturar nada (per√≠odo de adapta√ß√£o inicial)."
            })
            errors += 1
        else:
            validations.append({
                "status": "‚úÖ", 
                "item": "Capital de giro adequado", 
                "details": f"Cobertura para {investimento_total/objetivo_faturamento:.1f} meses",
                "sugestao": "Capital suficiente para opera√ß√£o inicial segura"
            })
            passed_checks += 1
        total_checks += 1
    
    # VALIDA√á√ÉO 9: Viabilidade final integrada
    # Definir custo_fixo_total se n√£o foi definido na valida√ß√£o anterior
    if 'custo_fixo_total' not in locals():
        custo_fixo_total = aluguel + salarios_total + outros_custos
    
    if vendas_mes_1 > 0 and custo_fixo_total > 0:
        # Ponto de equil√≠brio com margem realista de 35%
        ponto_equilibrio = custo_fixo_total / 0.35
        
        if vendas_mes_1 >= ponto_equilibrio:
            margem_seguranca = ((vendas_mes_1 - ponto_equilibrio) / ponto_equilibrio) * 100
            if margem_seguranca > 30:
                validations.append({"status": "‚úÖ", "item": "Neg√≥cio matematicamente vi√°vel", "details": f"{margem_seguranca:.0f}% acima do ponto de equil√≠brio"})
                passed_checks += 1
            else:
                validations.append({"status": "‚ö†Ô∏è", "item": "Viabilidade limitada", "details": f"Apenas {margem_seguranca:.0f}% acima do equil√≠brio"})
                warnings += 1
        else:
            deficit = ponto_equilibrio - vendas_mes_1
            percentual_deficit = (deficit / ponto_equilibrio) * 100
            validations.append({
                "status": "‚ùå", 
                "item": "CR√çTICO: Neg√≥cio matematicamente invi√°vel", 
                "details": f"{percentual_deficit:.0f}% abaixo do ponto de equil√≠brio",
                "sugestao": f"CORRE√á√ÉO CR√çTICA: Suas vendas previstas ({format_currency(vendas_mes_1)}) est√£o muito abaixo dos custos ({format_currency(ponto_equilibrio)}). V√° para Etapa 10 ‚Üí Proje√ß√µes Financeiras ‚Üí aba 'DRE M√™s a M√™s' ‚Üí linha 'Vendas m√™s 1' e verifique seus n√∫meros. SOLU√á√ïES: 1) Aumente ticket m√©dio na Etapa 5, 2) Reduza custos fixos (aluguel/sal√°rios) na Etapa 10, ou 3) Aumente meta de faturamento na Etapa 1."
            })
            errors += 1
        total_checks += 1
    else:
        validations.append({"status": "‚ùå", "item": "CR√çTICO: Dados insuficientes para an√°lise", "details": "Imposs√≠vel validar viabilidade matem√°tica"})
        errors += 1
        total_checks += 1
    
    # RESUMO EXECUTIVO CR√çTICO
    st.markdown("---")
    st.subheader("üìã Resumo Executivo da Auditoria")
    
    # Calcular porcentagem de conclus√£o
    completion_percentage = (passed_checks / total_checks) * 100 if total_checks > 0 else 0
    
    # Determinar status geral e recomenda√ß√£o
    if errors > 3:
        status_geral = "üî¥ CR√çTICO"
        recomendacao = "PARE: O plano apresenta problemas matem√°ticos graves que tornam o neg√≥cio invi√°vel. Revise fundamentalmente a estrutura financeira antes de prosseguir."
        cor_status = "red"
    elif errors > 0:
        status_geral = "üü° ALTO RISCO"
        recomendacao = "CUIDADO: Existem problemas cr√≠ticos que podem comprometer a viabilidade. Ajuste os itens marcados como cr√≠ticos antes de investir."
        cor_status = "orange"
    elif warnings > 4:
        status_geral = "üü° MODERADO"
        recomendacao = "ATEN√á√ÉO: O plano tem potencial, mas requer ajustes importantes para maximizar as chances de sucesso."
        cor_status = "orange"
    elif warnings > 0:
        status_geral = "üü¢ VI√ÅVEL"
        recomendacao = "BOM: O neg√≥cio √© matematicamente vi√°vel, mas algumas otimiza√ß√µes podem melhorar a performance."
        cor_status = "green"
    else:
        status_geral = "üü¢ EXCELENTE"
        recomendacao = "√ìTIMO: O plano est√° bem estruturado matematicamente e apresenta alta probabilidade de sucesso."
        cor_status = "green"
    
    # Exibir status principal
    st.markdown(f"""
    <div style="background-color: {cor_status}; padding: 20px; border-radius: 10px; margin: 10px 0;">
        <h3 style="color: white; margin: 0;">{status_geral}</h3>
        <p style="color: white; margin: 10px 0 0 0; font-size: 16px;">{recomendacao}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # M√©tricas detalhadas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("‚úÖ Aprovadas", passed_checks, f"{completion_percentage:.0f}%")
    
    with col2:
        st.metric("‚ö†Ô∏è Aten√ß√£o", warnings)
    
    with col3:
        st.metric("‚ùå Cr√≠ticas", errors)
    
    with col4:
        st.metric("üìä Total", total_checks)
    
    # Status geral
    if completion_percentage >= 80 and errors == 0:
        st.success("üéâ Excelente! Seu plano est√° bem estruturado e pronto para implementa√ß√£o.")
    elif completion_percentage >= 60 and errors <= 2:
        st.warning("‚ö° Bom progresso! Algumas melhorias s√£o necess√°rias antes de implementar.")
    else:
        st.error("üö® Aten√ß√£o! V√°rias quest√µes cr√≠ticas precisam ser resolvidas antes de prosseguir.")
    
    # Barra de progresso
    st.progress(completion_percentage / 100)
    st.caption(f"Plano {completion_percentage:.0f}% completo e validado")
    
    # Detalhes das valida√ß√µes
    st.markdown("### üìã Detalhes da Auditoria")
    
    for validation in validations:
        with st.expander(f"{validation['status']} {validation['item']}", expanded=(validation['status'] == "‚ùå")):
            st.write(f"**Detalhes:** {validation['details']}")
            if 'sugestao' in validation and validation['sugestao']:
                if validation['status'] == "‚ùå":
                    st.error(f"**üéØ {validation['sugestao']}**")
                elif validation['status'] == "‚ö†Ô∏è":
                    st.warning(f"**üí° {validation['sugestao']}**")
                else:
                    st.info(f"**‚úì {validation['sugestao']}**")
    
    # SE√á√ÉO DE PR√ìXIMOS PASSOS RECOMENDADOS
    if errors > 0 or warnings > 0:
        st.markdown("---")
        st.markdown("### üéØ Pr√≥ximos Passos Recomendados")
        
        # Priorizar a√ß√µes por criticidade
        acoes_criticas = [v for v in validations if v['status'] == "‚ùå" and 'sugestao' in v]
        acoes_melhorias = [v for v in validations if v['status'] == "‚ö†Ô∏è" and 'sugestao' in v]
        
        if acoes_criticas:
            st.error("**üö® QUEST√ïES CR√çTICAS (resolver primeiro):**")
            for i, acao in enumerate(acoes_criticas[:3], 1):
                st.write(f"‚Ä¢ {acao['item']}: {acao['sugestao']}")
        
        if acoes_melhorias:
            st.warning("**‚ö° MELHORIAS RECOMENDADAS:**")
            for i, acao in enumerate(acoes_melhorias[:3], 1):
                st.write(f"‚Ä¢ {acao['item']}: {acao['sugestao']}")
    else:
        st.success("üéâ **Parab√©ns!** Seu plano passou em todas as valida√ß√µes cr√≠ticas!")
    
    # Recomenda√ß√µes antigas (manter por compatibilidade)
    st.markdown("### üí° Outras Recomenda√ß√µes")
    
    if errors > 0:
        st.markdown("**üî¥ Quest√µes Cr√≠ticas (resolver primeiro):**")
        for validation in validations:
            if validation['status'] == '‚ùå':
                st.write(f"‚Ä¢ {validation['item']}: {validation['details']}")
    
    if warnings > 0:
        st.markdown("**üü° Melhorias Sugeridas:**")
        for validation in validations:
            if validation['status'] == '‚ö†Ô∏è':
                st.write(f"‚Ä¢ {validation['item']}: {validation['details']}")
    
    if completion_percentage >= 80:
        st.markdown("**üü¢ Plano Aprovado - Pr√≥ximas A√ß√µes:**")
        st.write("‚Ä¢ Revisar cronograma de implementa√ß√£o")
        st.write("‚Ä¢ Buscar financiamento se necess√°rio")
        st.write("‚Ä¢ Iniciar processo de abertura da empresa")
        st.write("‚Ä¢ Come√ßar negocia√ß√µes com fornecedores")


def show_fluxo_vital_tool():
    """Fluxo Vital - Guia Pr√°tico Passo a Passo para Abrir uma √ìtica"""
    
    # Header with back button
    col1, col2 = st.columns([1, 6])
    with col1:
        if st.button("‚¨ÖÔ∏è Voltar", key="back_fluxo_vital"):
            st.session_state.show_fluxo_vital = False
            st.rerun()
    
    with col2:
        st.title("üöÄ Fluxo Vital - Guia Pr√°tico para Sua √ìtica")
        st.markdown("**Checklist operacional desde a ideia at√© o primeiro giro**")
    
    # Recuperar APENAS dados reais do sistema - sem valores fict√≠cios
    investimento_total = st.session_state.business_data.get('investimento_total', 0)
    capital_giro = st.session_state.business_data.get('capital_giro', 0)
    receita_mes_1 = st.session_state.business_data.get('vendas_mes_1', 0) or st.session_state.business_data.get('receita_mensal', 0)
    
    # Investimento detalhado (dados reais dos campos do sistema)
    reforma_loja = st.session_state.business_data.get('reforma_loja', 0)
    equipamentos_moveis = st.session_state.business_data.get('equipamentos_moveis', 0)
    mobiliario_decoracao = st.session_state.business_data.get('mobiliario_decoracao', 0)
    sistema_eletrico = st.session_state.business_data.get('sistema_eletrico', 0)
    consultorio_exames = st.session_state.business_data.get('consultorio_exames', 0)
    area_vendas_estoque = st.session_state.business_data.get('area_vendas_estoque', 0)
    total_infraestrutura = reforma_loja + equipamentos_moveis + mobiliario_decoracao + sistema_eletrico + consultorio_exames + area_vendas_estoque
    
    # Custos mensais reais do sistema
    aluguel = st.session_state.business_data.get('aluguel', 0)
    agua_luz = st.session_state.business_data.get('agua_luz', 0)
    telefone_internet = st.session_state.business_data.get('telefone_internet', 0)  
    marketing = st.session_state.business_data.get('marketing', 0)
    outros_fixos = st.session_state.business_data.get('outros_fixos', 0)
    # Removed invalid assignment
    folha_mensal = st.session_state.business_data.get('salarios_total', 0)
    
    custos_operacionais = aluguel + agua_luz + telefone_internet + marketing + outros_fixos + 0
    custo_total_mensal = folha_mensal + custos_operacionais
    
    st.info(f"""
    üí∞ **Recursos Necess√°rios (baseados no seu plano):**
    - Investimento inicial: R$ {investimento_total:,.0f}
    - Capital de giro: R$ {capital_giro:,.0f}
    - Infraestrutura total: R$ {total_infraestrutura:,.0f} (Reforma: R$ {reforma_loja:,.0f} + Equipamentos: R$ {equipamentos_moveis:,.0f} + M√≥veis: R$ {mobiliario_decoracao:,.0f})
    - Custo mensal: R$ {custo_total_mensal:,.0f}
    - Meta de receita: R$ {receita_mes_1:,.0f}/m√™s
    """)
    
    # Etapas do fluxo vital
    etapas = [
        {
            "fase": "üí° PLANEJAMENTO",
            "titulo": "1. Defini√ß√£o do Neg√≥cio",
            "saldo_inicial": capital_giro,
            "gastos": 0,
            "descricao": "Validar o conceito e definir estrat√©gia",
            "acoes": [
                "‚úÖ Pesquisar mercado local e concorr√™ncia",
                "‚úÖ Definir p√∫blico-alvo e posicionamento",
                "‚úÖ Elaborar plano de neg√≥cios (voc√™ j√° fez!)",
                "‚úÖ Projetar fluxo de caixa para 12 meses"
            ]
        },
        {
            "fase": "üìã LEGALIZA√á√ÉO",
            "titulo": "2. Abertura da Empresa",
            "saldo_inicial": capital_giro,
            "gastos": st.session_state.business_data.get('custos_abertura_empresa', 0),
            "descricao": "Formalizar o neg√≥cio e obter licen√ßas",
            "acoes": [
                f"üí∞ Custos de abertura: {format_currency(st.session_state.business_data.get('custos_abertura_empresa', 0))}",
                f"üìÑ Regime tribut√°rio: {st.session_state.business_data.get('regime_tributario', 'N√£o definido')}",
                "üìÑ Obter CNPJ e inscri√ß√µes estadual/municipal",
                "üìÑ Alvar√° de funcionamento e sanit√°rio"
            ]
        },
        {
            "fase": "üè¢ INFRAESTRUTURA",
            "titulo": "3. Montagem do Espa√ßo",
            "saldo_inicial": capital_giro - st.session_state.business_data.get('custos_abertura_empresa', 0),
            "gastos": total_infraestrutura,
            "descricao": "Preparar o ponto comercial",
            "acoes": [
                f"üí∞ Reforma do espa√ßo: {format_currency(reforma_loja)}" if reforma_loja > 0 else "‚Ä¢ Reforma n√£o planejada",
                f"üí∞ Equipamentos b√°sicos: {format_currency(equipamentos_moveis)}" if equipamentos_moveis > 0 else "‚Ä¢ Equipamentos n√£o planejados",
                f"üí∞ Mobili√°rio e decora√ß√£o: {format_currency(mobiliario_decoracao)}" if mobiliario_decoracao > 0 else "‚Ä¢ Mobili√°rio n√£o planejado",
                f"üí∞ Sistema el√©trico: {format_currency(sistema_eletrico)}" if sistema_eletrico > 0 else "‚Ä¢ Sistema el√©trico n√£o planejado",
                f"üí∞ Consult√≥rio exames: {format_currency(consultorio_exames)}" if consultorio_exames > 0 else "‚Ä¢ Consult√≥rio n√£o planejado",
                f"üí∞ √Årea vendas/estoque: {format_currency(area_vendas_estoque)}" if area_vendas_estoque > 0 else "‚Ä¢ √Årea de vendas n√£o planejada"
            ]
        },
        {
            "fase": "üì¶ ESTOQUE",
            "titulo": "4. Compra do Estoque Inicial",
            "saldo_inicial": capital_giro - st.session_state.business_data.get('custos_abertura_empresa', 0) - total_infraestrutura,
            "gastos": st.session_state.business_data.get('estoque_inicial', 0),
            "descricao": "Adquirir produtos para venda",
            "acoes": [
                f"üí∞ Estoque inicial: {format_currency(st.session_state.business_data.get('estoque_inicial', 0))}" if st.session_state.business_data.get('estoque_inicial', 0) > 0 else "‚Ä¢ Estoque inicial n√£o definido",
                f"üì¶ Fornecedores configurados: {', '.join(st.session_state.business_data.get('fornecedores_selecionados', ['N√£o definidos']))}",
                f"üì¶ Prazo pagamento: {st.session_state.business_data.get('forma_pagamento_fornecedor', 'N√£o definido')}",
                "üì¶ Organizar sistema de controle de estoque"
            ]
        },
        {
            "fase": "üë• EQUIPE",
            "titulo": "5. Contrata√ß√£o de Funcion√°rios",
            "saldo_inicial": capital_giro - st.session_state.business_data.get('custos_abertura_empresa', 0) - total_infraestrutura - st.session_state.business_data.get('estoque_inicial', 0),
            "gastos": folha_mensal,
            "descricao": "Formar a equipe de trabalho",
            "acoes": [
                f"üí∞ Folha mensal: {format_currency(folha_mensal)}" if folha_mensal > 0 else "‚Ä¢ Equipe n√£o definida",
                "üë• Funcion√°rios planejados no DP e Tributa√ß√£o",
                "üìö Treinamento da equipe em produtos",
                "üìö Capacita√ß√£o em atendimento ao cliente"
            ]
        }
    ]
    
    # Exibir etapas em formato de timeline
    st.markdown("### üõ£Ô∏è Cronograma de Execu√ß√£o")
    
    saldo_atual = capital_giro
    
    for i, etapa in enumerate(etapas):
        # Card para cada etapa
        with st.expander(f"{etapa['fase']} - {etapa['titulo']}", expanded=i==0):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.markdown(f"**{etapa['descricao']}**")
                
                for acao in etapa['acoes']:
                    if acao.startswith('üí∞'):
                        st.markdown(f"<span style='color: red'>{acao}</span>", unsafe_allow_html=True)
                    else:
                        st.markdown(acao)
            
            with col2:
                saldo_antes = saldo_atual
                saldo_atual -= etapa['gastos']
                
                st.metric("Saldo Inicial", f"R$ {saldo_antes:,.0f}")
                if etapa['gastos'] > 0:
                    st.metric("Gastos", f"R$ {etapa['gastos']:,.0f}", delta=f"-{etapa['gastos']:,.0f}")
                st.metric("Saldo Final", f"R$ {saldo_atual:,.0f}")
                
                if saldo_atual < 0:
                    st.error("‚ö†Ô∏è Saldo insuficiente!")
                elif saldo_atual < 5000:
                    st.warning("‚ö†Ô∏è Reserva baixa")
                else:
                    st.success("‚úÖ Recursos OK")
    
    st.markdown("---")
    
    # Simula√ß√£o do primeiro m√™s operacional
    st.markdown("### üíº Primeiro M√™s de Opera√ß√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**üîÑ Ciclo Operacional Mensal**")
        
        # Entradas
        st.markdown("**ENTRADAS:**")
        vendas_vista = receita_mes_1 * 0.7
        st.write(f"‚Ä¢ Vendas √† vista (70%): R$ {vendas_vista:,.0f}")
        st.write(f"‚Ä¢ Total de entrada: R$ {vendas_vista:,.0f}")
        
        # Sa√≠das
        st.markdown("**SA√çDAS:**")
        
        # Calcular CMV real baseado nos custos de materiais da precifica√ß√£o
        custo_materiais_fisicos = st.session_state.business_data.get('custo_materiais_fisicos', 89.80)
        ticket_medio = st.session_state.business_data.get('ticket_medio', 180)
        vendas_quantidade = receita_mes_1 / ticket_medio if ticket_medio > 0 else 0
        cmv_real = custo_materiais_fisicos * vendas_quantidade
        percentual_cmv = (cmv_real / receita_mes_1 * 100) if receita_mes_1 > 0 else 0
        
        impostos = receita_mes_1 * 0.06
        st.write(f"‚Ä¢ Fornecedores ({percentual_cmv:.1f}%): R$ {cmv_real:,.0f}")
        st.caption(f"   Baseado em: {vendas_quantidade:.0f} √≥culos √ó R$ {custo_materiais_fisicos:.2f} custo real")
        st.write(f"‚Ä¢ Impostos (6%): R$ {impostos:,.0f}")
        st.write(f"‚Ä¢ Folha de pagamento: R$ {folha_mensal:,.0f}")
        st.write(f"‚Ä¢ Aluguel: R$ {aluguel:,.0f}")
        st.write(f"‚Ä¢ Outros custos: R$ {custos_operacionais - aluguel:,.0f}")
        
        total_saidas = cmv_real + impostos + folha_mensal + custos_operacionais
        st.write(f"‚Ä¢ **Total de sa√≠das: R$ {total_saidas:,.0f}**")
    
    with col2:
        st.markdown("**üìä Resultado do M√™s**")
        
        fluxo_mes = vendas_vista - total_saidas
        
        if fluxo_mes > 0:
            st.success(f"‚úÖ Fluxo positivo: R$ {fluxo_mes:,.0f}")
            st.write("üéâ Parab√©ns! Seu primeiro m√™s ser√° lucrativo")
        else:
            st.error(f"‚ùå Fluxo negativo: R$ {fluxo_mes:,.0f}")
            st.write("‚ö†Ô∏è Aten√ß√£o: revisar estrat√©gia de vendas")
        
        saldo_final_mes = saldo_atual + fluxo_mes
        st.metric("Saldo ap√≥s 1¬∫ m√™s", f"R$ {saldo_final_mes:,.0f}")
        
        # Meta para equil√≠brio
        if fluxo_mes < 0:
            vendas_necessarias = total_saidas / 0.7
            st.write(f"üí° **Vendas necess√°rias:** R$ {vendas_necessarias:,.0f}")
            diferenca = vendas_necessarias - receita_mes_1
            st.write(f"üìà **Aumentar vendas em:** R$ {diferenca:,.0f}")
    
    # Dicas pr√°ticas
    st.markdown("---")
    st.markdown("### üí° Dicas para o Sucesso")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**üéØ Vendas**")
        st.write("‚Ä¢ Foque em servi√ßos completos")
        st.write("‚Ä¢ Ofere√ßa exames gratuitos")
        st.write("‚Ä¢ Crie pacotes promocionais")
        st.write("‚Ä¢ Invista em marketing digital")
    
    with col2:
        st.markdown("**üí∞ Financeiro**")
        st.write("‚Ä¢ Monitore fluxo de caixa di√°rio")
        st.write("‚Ä¢ Negocie prazos com fornecedores")
        st.write("‚Ä¢ Controle rigorosamente custos")
        st.write("‚Ä¢ Mantenha reserva de emerg√™ncia")
    
    with col3:
        st.markdown("**üë• Operacional**")
        st.write("‚Ä¢ Treine equipe continuamente")
        st.write("‚Ä¢ Mantenha estoque organizado")
        st.write("‚Ä¢ Acompanhe satisfa√ß√£o clientes")
        st.write("‚Ä¢ Invista em equipamentos qualidade")
    
    # Cronograma de 90 dias
    st.markdown("---")
    st.markdown("### üìÖ Primeiros 90 Dias")
    
    meses_90_dias = [
        {
            "mes": "M√™s 1",
            "foco": "Estabiliza√ß√£o",
            "meta_vendas": receita_mes_1,
            "acoes": ["Inaugura√ß√£o", "Campanhas de lan√ßamento", "Networking local"]
        },
        {
            "mes": "M√™s 2", 
            "foco": "Crescimento",
            "meta_vendas": receita_mes_1 * 1.1,
            "acoes": ["Fideliza√ß√£o clientes", "Parcerias m√©dicos", "Marketing digital"]
        },
        {
            "mes": "M√™s 3",
            "foco": "Consolida√ß√£o", 
            "meta_vendas": receita_mes_1 * 1.2,
            "acoes": ["Avaliar resultados", "Ajustar estrat√©gias", "Planejar expans√£o"]
        }
    ]
    
    for mes_info in meses_90_dias:
        with st.expander(f"{mes_info['mes']}: {mes_info['foco']}"):
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.write("**A√ß√µes principais:**")
                for acao in mes_info['acoes']:
                    st.write(f"‚Ä¢ {acao}")
            
            with col2:
                st.metric("Meta de Vendas", f"R$ {mes_info['meta_vendas']:,.0f}")


def show_entrepreneur_summary_tool():
    """Dashboard Empresarial Inteligente - Resumo Executivo para Tomada de Decis√£o"""
    st.header("üìä Dashboard Empresarial - Resumo Executivo")
    st.markdown("**Indicadores-chave para tomada de decis√£o estrat√©gica**")
    
    st.markdown("---")
    
    # Recuperar dados principais do plano completo
    business_data = st.session_state.business_data
    nome_negocio = business_data.get('nome_otica', business_data.get('nome_negocio', 'Sua √ìtica'))
    
    # Dados financeiros das Proje√ß√µes Financeiras (Etapa 10)
    vendas_mes_1 = business_data.get('vendas_mes_1', 0)
    ticket_medio = business_data.get('ticket_medio', 0)
    investimento_total = business_data.get('investimento_total', 0)
    
    # Estrutura completa de custos
    aluguel_mensal = business_data.get('aluguel', 0)
    salarios_clt = business_data.get('salarios_clt', 0)
    servicos_terceiros = business_data.get('servicos_terceiros', 0)
    custo_combustivel = business_data.get('custo_combustivel_mensal', 0)
    energia_eletrica = business_data.get('energia_eletrica', 0)
    outros_custos = business_data.get('outros_custos_fixos', 0)
    custo_captador = business_data.get('custo_captador_mensal_calculado', 0)
    
    # CMV estimado (45% da receita bruta √© padr√£o no setor √≥tico)
    cmv_estimado = vendas_mes_1 * 0.45 if vendas_mes_1 > 0 else 0
    
    # Calcular m√©tricas operacionais
    oculos_meta_mes = int(vendas_mes_1 / ticket_medio) if ticket_medio > 0 else 0
    custos_fixos_totais = aluguel_mensal + salarios_clt + servicos_terceiros + custo_combustivel + energia_eletrica + outros_custos + custo_captador
    
    # Margem bruta (receita - CMV)
    margem_bruta_real = vendas_mes_1 - cmv_estimado if vendas_mes_1 > 0 else 0
    margem_bruta_percentual = (margem_bruta_real / vendas_mes_1 * 100) if vendas_mes_1 > 0 else 0
    
    # Lucro operacional (margem bruta - custos fixos)
    lucro_operacional = margem_bruta_real - custos_fixos_totais if margem_bruta_real > 0 else 0
    margem_operacional_percentual = (lucro_operacional / vendas_mes_1 * 100) if vendas_mes_1 > 0 else 0
    
    # Verificar se temos dados suficientes
    dados_suficientes = vendas_mes_1 > 0 and ticket_medio > 0 and investimento_total > 0
    
    if not dados_suficientes:
        st.warning("‚ö†Ô∏è Complete as Proje√ß√µes Financeiras (Etapa 10) para ver o dashboard empresarial completo")
        st.info("Ap√≥s completar, voc√™ ter√° acesso a todos os indicadores de performance e insights estrat√©gicos")
        return
    
    # SE√á√ÉO 1: INDICADORES FINANCEIROS PRINCIPAIS
    st.markdown("## üí∞ Indicadores Financeiros")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%); padding: 20px; border-radius: 15px; color: #2e7d32; text-align: center; box-shadow: 0 2px 8px rgba(0,0,0,0.08); border: 1px solid #a5d6a7;'>
                <h3 style='margin: 0; color: #1b5e20; font-size: 16px;'>üí∞ Faturamento Mensal</h3>
                <p style='font-size: 28px; margin: 10px 0; color: #1b5e20; font-weight: bold;'>{format_currency(vendas_mes_1)}</p>
                <p style='margin: 0; color: #388e3c; font-size: 12px;'>Meta de receita bruta</p>
            </div>
            """, unsafe_allow_html=True)
        
        with st.expander("üîç An√°lise Detalhada"):
            st.write("**Como interpretar:**")
            st.write(f"‚Ä¢ Este √© seu objetivo de faturamento bruto mensal")
            st.write(f"‚Ä¢ Equivale a {format_currency(vendas_mes_1 * 12)} por ano")
            st.write(f"‚Ä¢ Representa {oculos_meta_mes} √≥culos vendidos por m√™s")
            if vendas_mes_1 > 50000:
                st.success("‚úÖ Faturamento robusto para sustentabilidade")
            elif vendas_mes_1 > 25000:
                st.info("üîµ Faturamento adequado para in√≠cio")
            else:
                st.warning("‚ö†Ô∏è Considere revisar estrat√©gias de pricing")
    
    with col2:
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); padding: 20px; border-radius: 15px; color: #0d47a1; text-align: center; box-shadow: 0 2px 8px rgba(0,0,0,0.08); border: 1px solid #90caf9;'>
                <h3 style='margin: 0; color: #0d47a1; font-size: 16px;'>üìà Margem Bruta</h3>
                <p style='font-size: 28px; margin: 10px 0; color: #0d47a1; font-weight: bold;'>{margem_bruta_percentual:.1f}%</p>
                <p style='margin: 0; color: #1565c0; font-size: 12px;'>{format_currency(margem_bruta_real)} l√≠quido</p>
            </div>
            """, unsafe_allow_html=True)
        
        with st.expander("üîç An√°lise Detalhada"):
            st.write("**Como interpretar:**")
            st.write(f"‚Ä¢ Margem bruta ap√≥s descontar CMV (custo dos produtos)")
            st.write(f"‚Ä¢ CMV estimado: {format_currency(cmv_estimado)} (45% da receita)")
            st.write(f"‚Ä¢ Sobra {format_currency(margem_bruta_real)} para custos fixos e lucro")
            st.write(f"‚Ä¢ Benchmark setor √≥tico: 50-60%")
            if margem_bruta_percentual > 55:
                st.success("‚úÖ Margem bruta excelente")
            elif margem_bruta_percentual > 45:
                st.info("üîµ Margem bruta adequada")
            else:
                st.warning("‚ö†Ô∏è Margem bruta baixa - revisar fornecedores")
    
    with col3:
        payback_meses = investimento_total / lucro_operacional if lucro_operacional > 0 else 0
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%); padding: 20px; border-radius: 15px; color: #4a148c; text-align: center; box-shadow: 0 2px 8px rgba(0,0,0,0.08); border: 1px solid #ce93d8;'>
                <h3 style='margin: 0; color: #4a148c; font-size: 16px;'>‚è±Ô∏è Tempo para Retorno</h3>
                <p style='font-size: 28px; margin: 10px 0; color: #4a148c; font-weight: bold;'>{payback_meses:.0f}</p>
                <p style='margin: 0; color: #6a1b9a; font-size: 12px;'>meses para payback</p>
            </div>
            """, unsafe_allow_html=True)
        
        with st.expander("üîç An√°lise Detalhada"):
            st.write("**Como interpretar:**")
            st.write(f"‚Ä¢ Tempo para recuperar investimento de {format_currency(investimento_total)}")
            st.write(f"‚Ä¢ Com lucro operacional de {format_currency(lucro_operacional)}/m√™s")
            st.write(f"‚Ä¢ Benchmark √≥ticas: 12-24 meses")
            if payback_meses <= 18:
                st.success("‚úÖ Payback excelente")
            elif payback_meses <= 30:
                st.info("üîµ Payback adequado")
            else:
                st.warning("‚ö†Ô∏è Payback longo - otimizar custos")
    
    with col4:
        roi_anual = (lucro_operacional * 12 / investimento_total * 100) if investimento_total > 0 else 0
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #fff3e0 0%, #ffcc80 100%); padding: 20px; border-radius: 15px; color: #e65100; text-align: center; box-shadow: 0 2px 8px rgba(0,0,0,0.08); border: 1px solid #ffb74d;'>
                <h3 style='margin: 0; color: #e65100; font-size: 16px;'>üéØ ROI Anual</h3>
                <p style='font-size: 28px; margin: 10px 0; color: #e65100; font-weight: bold;'>{roi_anual:.0f}%</p>
                <p style='margin: 0; color: #f57c00; font-size: 12px;'>retorno sobre investimento</p>
            </div>
            """, unsafe_allow_html=True)
        
        with st.expander("üîç An√°lise Detalhada"):
            st.write("**Como interpretar:**")
            st.write(f"‚Ä¢ Retorno anual sobre capital investido")
            st.write(f"‚Ä¢ CDI 2024: ~12% / Poupan√ßa: ~6%")
            st.write(f"‚Ä¢ Benchmark neg√≥cios: 20-40%")
            if roi_anual > 30:
                st.success("‚úÖ ROI excelente - neg√≥cio altamente atrativo")
            elif roi_anual > 15:
                st.info("üîµ ROI adequado - supera investimentos tradicionais")
            else:
                st.warning("‚ö†Ô∏è ROI baixo - avaliar viabilidade")
    
    st.markdown("---")
    
    # SE√á√ÉO 2: INDICADORES OPERACIONAIS
    st.markdown("## üéØ Indicadores Operacionais")
    
    col1, col2, col3, col4 = st.columns(4)
    
    # Calcular vendas por dia √∫til (22 dias)
    vendas_por_dia = oculos_meta_mes / 22
    
    with col1:
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%); padding: 20px; border-radius: 15px; color: #b71c1c; text-align: center; box-shadow: 0 2px 8px rgba(0,0,0,0.08); border: 1px solid #ef9a9a;'>
                <h3 style='margin: 0; color: #b71c1c; font-size: 16px;'>üë• Meta Di√°ria</h3>
                <p style='font-size: 28px; margin: 10px 0; color: #b71c1c; font-weight: bold;'>{vendas_por_dia:.1f}</p>
                <p style='margin: 0; color: #c62828; font-size: 12px;'>√≥culos por dia √∫til</p>
            </div>
            """, unsafe_allow_html=True)
        
        with st.expander("üîç An√°lise Detalhada"):
            st.write("**Como interpretar:**")
            st.write(f"‚Ä¢ Meta: {vendas_por_dia:.1f} √≥culos por dia √∫til")
            st.write(f"‚Ä¢ {oculos_meta_mes} √≥culos por m√™s")
            st.write(f"‚Ä¢ Hor√°rio 9h-18h: {vendas_por_dia/9:.1f} por hora")
            if vendas_por_dia <= 3:
                st.success("‚úÖ Meta muito alcan√ß√°vel")
            elif vendas_por_dia <= 5:
                st.info("üîµ Meta realista com bom atendimento")
            else:
                st.warning("‚ö†Ô∏è Meta ambiciosa - foque em convers√£o")
    
    with col2:
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #388E3C 0%, #4CAF50 100%); padding: 20px; border-radius: 15px; color: white; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'>
                <h3 style='margin: 0; color: white; font-size: 16px;'>üí≥ Ticket M√©dio</h3>
                <p style='font-size: 28px; margin: 10px 0; color: white; font-weight: bold;'>{format_currency(ticket_medio)}</p>
                <p style='margin: 0; color: white; font-size: 12px;'>valor m√©dio por venda</p>
            </div>
            """, unsafe_allow_html=True)
        
        with st.expander("üîç An√°lise Detalhada"):
            st.write("**Como interpretar:**")
            st.write(f"‚Ä¢ Valor m√©dio de cada venda")
            st.write(f"‚Ä¢ Benchmark √≥ticas populares: R$ 350-500")
            st.write(f"‚Ä¢ Benchmark √≥ticas premium: R$ 600-1.200")
            if ticket_medio > 600:
                st.success("‚úÖ Ticket alto - posicionamento premium")
            elif ticket_medio > 400:
                st.info("üîµ Ticket adequado - classe m√©dia")
            else:
                st.warning("‚ö†Ô∏è Ticket baixo - revisar mix de produtos")
    
    with col3:
        # Calcular ponto de equil√≠brio
        ponto_equilibrio_oculos = custos_fixos_totais / ticket_medio if ticket_medio > 0 else 0
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #455A64 0%, #607D8B 100%); padding: 20px; border-radius: 15px; color: white; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'>
                <h3 style='margin: 0; color: white; font-size: 16px;'>‚öñÔ∏è Ponto de Equil√≠brio</h3>
                <p style='font-size: 28px; margin: 10px 0; color: white; font-weight: bold;'>{ponto_equilibrio_oculos:.0f}</p>
                <p style='margin: 0; color: white; font-size: 12px;'>√≥culos para empatar</p>
            </div>
            """, unsafe_allow_html=True)
        
        with st.expander("üîç An√°lise Detalhada"):
            st.write("**Como interpretar:**")
            st.write(f"‚Ä¢ Vendas m√≠nimas para cobrir custos fixos")
            st.write(f"‚Ä¢ Custos fixos: {format_currency(custos_fixos_totais)}")
            st.write(f"‚Ä¢ Margem de seguran√ßa: {oculos_meta_mes - ponto_equilibrio_oculos:.0f} √≥culos")
            margem_seguranca = ((oculos_meta_mes - ponto_equilibrio_oculos) / oculos_meta_mes * 100) if oculos_meta_mes > 0 else 0
            if margem_seguranca > 40:
                st.success(f"‚úÖ Margem de seguran√ßa: {margem_seguranca:.0f}%")
            elif margem_seguranca > 20:
                st.info(f"üîµ Margem de seguran√ßa: {margem_seguranca:.0f}%")
            else:
                st.warning(f"‚ö†Ô∏è Margem baixa: {margem_seguranca:.0f}%")
    
    with col4:
        # Calcular efici√™ncia de capital (vendas/investimento)
        eficiencia_capital = (vendas_mes_1 * 12) / investimento_total if investimento_total > 0 else 0
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #6A1B9A 0%, #8E24AA 100%); padding: 20px; border-radius: 15px; color: white; text-align: center; box-shadow: 0 4px 6px rgba(0,0,0,0.1);'>
                <h3 style='margin: 0; color: white; font-size: 16px;'>‚ö° Efici√™ncia Capital</h3>
                <p style='font-size: 28px; margin: 10px 0; color: white; font-weight: bold;'>{eficiencia_capital:.1f}x</p>
                <p style='margin: 0; color: white; font-size: 12px;'>receita por R$ investido</p>
            </div>
            """, unsafe_allow_html=True)
        
        with st.expander("üîç An√°lise Detalhada"):
            st.write("**Como interpretar:**")
            st.write(f"‚Ä¢ Cada R$ 1 investido gera R$ {eficiencia_capital:.1f} em receita anual")
            st.write(f"‚Ä¢ Benchmark varejo: 2-4x")
            st.write(f"‚Ä¢ Benchmark servi√ßos: 1-3x")
            if eficiencia_capital > 3:
                st.success("‚úÖ Efici√™ncia excelente")
            elif eficiencia_capital > 1.5:
                st.info("üîµ Efici√™ncia adequada")
            else:
                st.warning("‚ö†Ô∏è Baixa efici√™ncia de capital")
    
    st.markdown("---")
    
    # SE√á√ÉO 3: AN√ÅLISE DE RISCOS E OPORTUNIDADES
    st.markdown("## ‚ö†Ô∏è An√°lise de Riscos e Cen√°rios")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üîª Cen√°rio Pessimista (-20%)")
        vendas_pessimista = vendas_mes_1 * 0.8
        margem_pessimista = vendas_pessimista - custos_fixos_totais
        roi_pessimista = (margem_pessimista * 12 / investimento_total * 100) if investimento_total > 0 else 0
        
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%); padding: 15px; border-radius: 10px; color: #b71c1c; margin-bottom: 10px; border: 1px solid #ef9a9a;'>
                <h4 style='margin: 0; color: #b71c1c;'>Receita: {format_currency(vendas_pessimista)}</h4>
                <p style='margin: 5px 0; color: #c62828;'>Margem: {format_currency(margem_pessimista)} ({(margem_pessimista/vendas_pessimista*100):.1f}%)</p>
                <p style='margin: 0; color: #c62828;'>ROI: {roi_pessimista:.0f}%</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.write("**Principais riscos:**")
        st.write("‚Ä¢ Concorr√™ncia agressiva")
        st.write("‚Ä¢ Economia em recess√£o")
        st.write("‚Ä¢ Dificuldade para encontrar clientes")
        st.write("‚Ä¢ Problemas de fornecedores")
        
        if margem_pessimista > 0:
            st.info("üîµ Ainda vi√°vel no cen√°rio pessimista")
        else:
            st.error("‚ùå Neg√≥cio invi√°vel no cen√°rio pessimista")
    
    with col2:
        st.markdown("### üî∫ Cen√°rio Otimista (+30%)")
        vendas_otimista = vendas_mes_1 * 1.3
        margem_otimista = vendas_otimista - custos_fixos_totais
        roi_otimista = (margem_otimista * 12 / investimento_total * 100) if investimento_total > 0 else 0
        
        with st.container():
            st.markdown(f"""
            <div style='background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%); padding: 15px; border-radius: 10px; color: #1b5e20; margin-bottom: 10px; border: 1px solid #a5d6a7;'>
                <h4 style='margin: 0; color: #1b5e20;'>Receita: {format_currency(vendas_otimista)}</h4>
                <p style='margin: 5px 0; color: #2e7d32;'>Margem: {format_currency(margem_otimista)} ({(margem_otimista/vendas_otimista*100):.1f}%)</p>
                <p style='margin: 0; color: #2e7d32;'>ROI: {roi_otimista:.0f}%</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.write("**Principais oportunidades:**")
        st.write("‚Ä¢ Marketing digital eficaz")
        st.write("‚Ä¢ Parcerias estrat√©gicas")
        st.write("‚Ä¢ Expans√£o de servi√ßos")
        st.write("‚Ä¢ Fideliza√ß√£o de clientes")
        
        st.success("‚úÖ Grande potencial de crescimento")
    
    st.markdown("---")
    
    # SE√á√ÉO 4: ESTRAT√âGIAS PARA O SUCESSO
    st.markdown("## üöÄ Estrat√©gias para o Sucesso")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("### üí∞ Aumentar Faturamento")
        st.write("**Estrat√©gias de crescimento:**")
        if ticket_medio < 500:
            st.write("‚Ä¢ **Upsell**: Oferecer lentes premium")
            st.write("‚Ä¢ **Cross-sell**: Vender √≥culos de sol")
            st.write(f"‚Ä¢ Meta: Elevar ticket para R$ 600 (+{((600/ticket_medio-1)*100):.0f}%)")
        else:
            st.write("‚Ä¢ **Volume**: Aumentar fluxo de clientes")
            st.write("‚Ä¢ **Recorr√™ncia**: Programa de fidelidade")
        st.write("‚Ä¢ **Marketing**: Investir 5-8% do faturamento")
        st.write("‚Ä¢ **Refer√™ncias**: Programa de indica√ß√£o")
        
        # Simular impacto do aumento de ticket
        if ticket_medio < 600:
            novo_ticket = 600
            novo_faturamento = oculos_meta_mes * novo_ticket
            impacto = novo_faturamento - vendas_mes_1
            st.info(f"üí° Aumentando ticket para R$ {novo_ticket}: +{format_currency(impacto)}/m√™s")
    
    with col2:
        st.markdown("### üìâ Reduzir Custos")
        st.write("**Otimiza√ß√µes poss√≠veis:**")
        if aluguel_mensal / vendas_mes_1 > 0.15:
            st.write(f"‚Ä¢ **Aluguel**: {(aluguel_mensal/vendas_mes_1*100):.1f}% da receita (alto)")
            st.write("‚Ä¢ Negociar desconto ou buscar local menor")
        if (salarios_clt + outros_custos) / vendas_mes_1 > 0.25:
            st.write("‚Ä¢ **Pessoal**: Otimizar estrutura")
            st.write("‚Ä¢ Considerar comissionamento")
        st.write("‚Ä¢ **Fornecedores**: Negociar melhores condi√ß√µes")
        st.write("‚Ä¢ **Energia**: Equipamentos eficientes")
        st.write("‚Ä¢ **Automa√ß√£o**: Reduzir tarefas manuais")
        
        # Simular redu√ß√£o de 10% nos custos
        reducao_custos = custos_fixos_totais * 0.1
        nova_margem = lucro_operacional + reducao_custos
        st.info(f"üí° Reduzindo custos 10%: +{format_currency(reducao_custos)}/m√™s")
    
    with col3:
        st.markdown("### üéØ Aumentar Efici√™ncia")
        st.write("**Melhorias operacionais:**")
        st.write("‚Ä¢ **Atendimento**: Treinar equipe")
        st.write("‚Ä¢ **Processo**: Reduzir tempo de venda")
        st.write("‚Ä¢ **Estoque**: Otimizar giro")
        st.write("‚Ä¢ **Tecnologia**: Sistema de gest√£o")
        st.write("‚Ä¢ **Experi√™ncia**: Ambiente acolhedor")
        
        # Taxa de convers√£o atual e meta
        if vendas_por_dia <= 3:
            st.write(f"‚Ä¢ **Meta**: {vendas_por_dia:.1f} ‚Üí {vendas_por_dia*1.5:.1f} √≥culos/dia")
            st.info(f"üí° Melhorando convers√£o 50%: +{format_currency(vendas_mes_1*0.5)}/m√™s")
        else:
            st.write("‚Ä¢ **Foco**: Manter qualidade do atendimento")
            st.info("üí° Priorizar margem sobre volume")
    
    st.markdown("---")
    
    # SE√á√ÉO 5: RESUMO EXECUTIVO FINAL
    st.markdown("## üìã Resumo Executivo")
    
    # Calcular score geral do neg√≥cio
    score_faturamento = min(100, (vendas_mes_1 / 50000) * 25) if vendas_mes_1 > 0 else 0
    score_margem = min(100, (margem_operacional_percentual / 40) * 25) if margem_operacional_percentual > 0 else 0
    score_payback = min(100, max(0, (36 - payback_meses) / 36 * 25)) if payback_meses > 0 else 0
    score_roi = min(100, (roi_anual / 40) * 25) if roi_anual > 0 else 0
    score_total = score_faturamento + score_margem + score_payback + score_roi
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("### üìä Avalia√ß√£o Geral do Neg√≥cio")
        
        # Barra de progresso para score
        if score_total >= 80:
            cor_score = "#4CAF50"
            status_negocio = "EXCELENTE"
            recomendacao = "Neg√≥cio altamente vi√°vel. Prossiga com confian√ßa!"
        elif score_total >= 60:
            cor_score = "#FF9800"
            status_negocio = "BOM"
            recomendacao = "Neg√≥cio vi√°vel. Implemente melhorias sugeridas."
        elif score_total >= 40:
            cor_score = "#FF5722"
            status_negocio = "REGULAR"
            recomendacao = "Neg√≥cio arriscado. Revise custos e estrat√©gias."
        else:
            cor_score = "#D32F2F"
            status_negocio = "CR√çTICO"
            recomendacao = "Neg√≥cio invi√°vel. Reformule o plano completamente."
        
        st.markdown(f"""
        <div style='background: linear-gradient(135deg, {cor_score} 0%, {cor_score}88 100%); padding: 20px; border-radius: 15px; color: white; text-align: center; margin-bottom: 20px;'>
            <h2 style='margin: 0; color: white;'>SCORE: {score_total:.0f}/100</h2>
            <h3 style='margin: 10px 0; color: white;'>{status_negocio}</h3>
            <p style='margin: 0; color: white; font-size: 16px;'>{recomendacao}</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("**Componentes do Score:**")
        st.progress(score_faturamento/100, f"Faturamento: {score_faturamento:.0f}/25")
        st.progress(score_margem/100, f"Margem: {score_margem:.0f}/25") 
        st.progress(score_payback/100, f"Payback: {score_payback:.0f}/25")
        st.progress(score_roi/100, f"ROI: {score_roi:.0f}/25")
    
    with col2:
        st.markdown("### üéØ Pr√≥ximos Passos")
        
        if score_total >= 80:
            st.write("**A√ß√µes priorit√°rias:**")
            st.write("‚Ä¢ Finalizar financiamento")
            st.write("‚Ä¢ Definir fornecedores")
            st.write("‚Ä¢ Contratar equipe")
            st.write("‚Ä¢ Come√ßar marketing")
        elif score_total >= 60:
            st.write("**Melhorias necess√°rias:**")
            st.write("‚Ä¢ Otimizar custos fixos")
            st.write("‚Ä¢ Revisar ticket m√©dio")
            st.write("‚Ä¢ Validar demanda")
            st.write("‚Ä¢ Ajustar proje√ß√µes")
        else:
            st.write("**Revis√µes cr√≠ticas:**")
            st.write("‚Ä¢ Rever modelo de neg√≥cio")
            st.write("‚Ä¢ Reduzir investimento")
            st.write("‚Ä¢ Buscar local mais barato")
            st.write("‚Ä¢ Considerar sociedade")
        
        # Bot√£o de a√ß√£o principal
        if score_total >= 60:
            st.success("‚úÖ Prosseguir com implementa√ß√£o")
        else:
            st.error("‚ùå Revisar plano antes de prosseguir")
    
    st.markdown("---")
    
    # Footer com resumo num√©rico
    st.markdown("### üìà Resumo dos N√∫meros-Chave")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üí∞ Faturamento", format_currency(vendas_mes_1), f"{format_currency(vendas_mes_1 * 12)}/ano")
    
    with col2:
        st.metric("üìä Margem", f"{margem_operacional_percentual:.1f}%", format_currency(lucro_operacional))
    
    with col3:
        st.metric("‚è±Ô∏è Payback", f"{payback_meses:.0f} meses", f"{payback_meses/12:.1f} anos")
    
    with col4:
        st.metric("üéØ ROI", f"{roi_anual:.0f}%", "ao ano")
    
    with col5:
        st.metric("üë• Meta Di√°ria", f"{vendas_por_dia:.1f}", "√≥culos/dia")

    
def show_investor_report_tool():
    """Relat√≥rio Completo para Investidores - Multilingual"""
    
    # Seletor de idioma no topo
    col_header1, col_header2 = st.columns([3, 1])
    
    with col_header1:
        st.header("üìä Relat√≥rio Completo para Investidores")
        st.markdown("**Documento profissional baseado no checklist completo para an√°lise de investimento**")
    
    with col_header2:
        idioma = st.selectbox(
            "üåê Idioma / Language / Idioma",
            ["Portugu√™s", "English", "Espa√±ol"],
            key="investor_report_language"
        )
    

    
    # Verificar se h√° dados suficientes
    if not st.session_state.business_data:
        if idioma == "English":
            st.warning("Complete all 12 steps of the business plan to generate the complete report")
        elif idioma == "Espa√±ol":
            st.warning("Complete todas las 12 etapas del plan de negocios para generar el informe completo")
        else:
            st.warning("Complete todas as 12 etapas do plano de neg√≥cios para gerar o relat√≥rio completo")
        return
    
    # Tradu√ß√µes dos textos
    translations = {
        "Portugu√™s": {
            "tabs": ["üéØ Prop√≥sito", "üí° Solu√ß√£o", "üè¢ Mercado", "‚öîÔ∏è Concorr√™ncia", "üí∞ Financeiro", "üë• Equipe", "üìÑ Download"],
            "purpose_title": "1. PROP√ìSITO E PROBLEMA",
            "problem_identified": "Problema Identificado",
            "problem": "Problema",
            "validation": "Valida√ß√£o do Problema",
            "latent_pain": "Dor Latente no Mercado:",
            "evidence": "Evid√™ncias do Problema:",
            "target_audience": "P√∫blico-alvo",
            "relevance": "Relev√¢ncia do Problema",
            "impact": "Impacto: Afeta diretamente a qualidade de vida e produtividade de milh√µes de brasileiros",
            "urgency": "Urg√™ncia: Necessidade crescente de corre√ß√£o visual e prote√ß√£o ocular",
            "frequency": "Frequ√™ncia: Problema recorrente que afeta pessoas por toda a vida",
            "solution_title": "2. SOLU√á√ÉO E PROPOSTA DE VALOR",
            "our_solution": "Nossa Solu√ß√£o",
            "value_proposition": "Proposta de Valor",
            "competitive_diff": "Diferencial Competitivo",
            "products_services": "Produtos e Servi√ßos",
            "unique_advantages": "Vantagens √önicas",
            "solution_validation": "Valida√ß√£o da Solu√ß√£o",
            "entrepreneur_exp": "Experi√™ncia do Empreendedor",
            "business_status": "Status do Neg√≥cio: Pronto para opera√ß√£o",
            "validation_complete": "Valida√ß√£o: An√°lise completa de mercado e viabilidade realizada",
            "market_title": "3. MERCADO E OPORTUNIDADE",
            "market_size": "Tamanho do Mercado",
            "growth_analysis": "An√°lise de Crescimento",
            "sector_trends": "Tend√™ncias do Setor:",
            "strategic_location": "Localiza√ß√£o Estrat√©gica",
            "city": "Cidade",
            "pop_density": "Densidade Populacional",
            "location_advantages": "Vantagens da Localiza√ß√£o:",
            "download_complete": "üìÑ Gerar Relat√≥rio Completo para Investidores",
            "download_success": "Relat√≥rio completo gerado com sucesso!",
            "download_preview": "üìñ Pr√©via do Relat√≥rio Completo"
        },
        "English": {
            "tabs": ["üéØ Purpose", "üí° Solution", "üè¢ Market", "‚öîÔ∏è Competition", "üí∞ Financial", "üë• Team", "üìÑ Download"],
            "purpose_title": "1. PURPOSE AND PROBLEM",
            "problem_identified": "Identified Problem",
            "problem": "Problem",
            "validation": "Problem Validation",
            "latent_pain": "Latent Market Pain:",
            "evidence": "Problem Evidence:",
            "target_audience": "Target audience",
            "relevance": "Problem Relevance",
            "impact": "Impact: Directly affects the quality of life and productivity of millions of Brazilians",
            "urgency": "Urgency: Growing need for vision correction and eye protection",
            "frequency": "Frequency: Recurring problem that affects people throughout their lives",
            "solution_title": "2. SOLUTION AND VALUE PROPOSITION",
            "our_solution": "Our Solution",
            "value_proposition": "Value Proposition",
            "competitive_diff": "Competitive Differential",
            "products_services": "Products and Services",
            "unique_advantages": "Unique Advantages",
            "solution_validation": "Solution Validation",
            "entrepreneur_exp": "Entrepreneur Experience",
            "business_status": "Business Status: Ready for operation",
            "validation_complete": "Validation: Complete market and feasibility analysis conducted",
            "market_title": "3. MARKET AND OPPORTUNITY",
            "market_size": "Market Size",
            "growth_analysis": "Growth Analysis",
            "sector_trends": "Sector Trends:",
            "strategic_location": "Strategic Location",
            "city": "City",
            "pop_density": "Population Density",
            "location_advantages": "Location Advantages:",
            "download_complete": "üìÑ Generate Complete Investor Report",
            "download_success": "Complete report generated successfully!",
            "download_preview": "üìñ Complete Report Preview"
        },
        "Espa√±ol": {
            "tabs": ["üéØ Prop√≥sito", "üí° Soluci√≥n", "üè¢ Mercado", "‚öîÔ∏è Competencia", "üí∞ Financiero", "üë• Equipo", "üìÑ Descarga"],
            "purpose_title": "1. PROP√ìSITO Y PROBLEMA",
            "problem_identified": "Problema Identificado",
            "problem": "Problema",
            "validation": "Validaci√≥n del Problema",
            "latent_pain": "Dolor Latente del Mercado:",
            "evidence": "Evidencias del Problema:",
            "target_audience": "P√∫blico objetivo",
            "relevance": "Relevancia del Problema",
            "impact": "Impacto: Afecta directamente la calidad de vida y productividad de millones de brasile√±os",
            "urgency": "Urgencia: Necesidad creciente de correcci√≥n visual y protecci√≥n ocular",
            "frequency": "Frecuencia: Problema recurrente que afecta a las personas durante toda su vida",
            "solution_title": "2. SOLUCI√ìN Y PROPUESTA DE VALOR",
            "our_solution": "Nuestra Soluci√≥n",
            "value_proposition": "Propuesta de Valor",
            "competitive_diff": "Diferencial Competitivo",
            "products_services": "Productos y Servicios",
            "unique_advantages": "Ventajas √önicas",
            "solution_validation": "Validaci√≥n de la Soluci√≥n",
            "entrepreneur_exp": "Experiencia del Emprendedor",
            "business_status": "Estado del Negocio: Listo para operaci√≥n",
            "validation_complete": "Validaci√≥n: An√°lisis completo de mercado y viabilidad realizado",
            "market_title": "3. MERCADO Y OPORTUNIDAD",
            "market_size": "Tama√±o del Mercado",
            "growth_analysis": "An√°lisis de Crecimiento",
            "sector_trends": "Tendencias del Sector:",
            "strategic_location": "Ubicaci√≥n Estrat√©gica",
            "city": "Ciudad",
            "pop_density": "Densidad Poblacional",
            "location_advantages": "Ventajas de la Ubicaci√≥n:",
            "download_complete": "üìÑ Generar Informe Completo para Inversores",
            "download_success": "¬°Informe completo generado exitosamente!",
            "download_preview": "üìñ Vista Previa del Informe Completo"
        }
    }
    
    t = translations[idioma]
    
    # Dados do neg√≥cio
    nome_negocio = st.session_state.business_data.get('nome_negocio', '√ìtica n√£o informada')
    cidade = st.session_state.business_data.get('cidade', 'Cidade n√£o informada')
    estado = st.session_state.business_data.get('estado', 'Estado n√£o informado')
    vendas_mes_1 = st.session_state.business_data.get('vendas_mes_1', 0)
    
    # Tabs para o relat√≥rio completo
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs(t["tabs"])
    
    with tab1:
        st.subheader(t["purpose_title"])
        
        st.markdown(f"### {t['problem_identified']}")
        problema = st.session_state.business_data.get('problema_mercado', 'N√£o definido')
        st.write(f"**{t['problem']}:** {problema}")
        
        st.markdown(f"### {t['validation']}")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"**{t['latent_pain']}**")
            if idioma == "English":
                st.write("‚Ä¢ Difficulty accessing quality optical products")
                st.write("‚Ä¢ High prices in traditional market")
                st.write("‚Ä¢ Limited personalized service")
                st.write("‚Ä¢ Delays in specialized product delivery")
            elif idioma == "Espa√±ol":
                st.write("‚Ä¢ Dificultad para acceder a productos √≥pticos de calidad")
                st.write("‚Ä¢ Precios elevados en el mercado tradicional")
                st.write("‚Ä¢ Atenci√≥n personalizada limitada")
                st.write("‚Ä¢ Demoras en la entrega de productos especializados")
            else:
                st.write("‚Ä¢ Dificuldade de acesso a produtos √≥pticos de qualidade")
                st.write("‚Ä¢ Pre√ßos elevados no mercado tradicional")
                st.write("‚Ä¢ Atendimento personalizado limitado")
                st.write("‚Ä¢ Demora na entrega de produtos especializados")
        
        with col2:
            st.markdown(f"**{t['evidence']}**")
            publico_alvo = st.session_state.business_data.get('publico_alvo', 'N√£o definido')
            st.write(f"‚Ä¢ {t['target_audience']}: {publico_alvo}")
            if idioma == "English":
                st.write("‚Ä¢ Optical market growth: 8% annually")
                st.write("‚Ä¢ Population aging increasing demand")
                st.write("‚Ä¢ Intensive use of digital screens")
            elif idioma == "Espa√±ol":
                st.write("‚Ä¢ Crecimiento del mercado √≥ptico: 8% anual")
                st.write("‚Ä¢ Envejecimiento poblacional aumentando demanda")
                st.write("‚Ä¢ Uso intensivo de pantallas digitales")
            else:
                st.write("‚Ä¢ Crescimento do mercado √≥ptico: 8% ao ano")
                st.write("‚Ä¢ Envelhecimento populacional aumentando demanda")
                st.write("‚Ä¢ Uso intensivo de telas digitais")
        
        st.markdown(f"### {t['relevance']}")
        st.write(f"**{t['impact']}**")
        st.write(f"**{t['urgency']}**")
        st.write(f"**{t['frequency']}**")
    
    with tab2:
        st.subheader("2. SOLU√á√ÉO E PROPOSTA DE VALOR")
        
        st.markdown("### Nossa Solu√ß√£o")
        proposta_valor = st.session_state.business_data.get('proposta_valor', 'N√£o definida')
        st.write(f"**Proposta de Valor:** {proposta_valor}")
        
        st.markdown("### Diferencial Competitivo")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Produtos e Servi√ßos:**")
            produtos = st.session_state.business_data.get('produtos_servicos', 'N√£o definidos')
            st.write(f"‚Ä¢ {produtos}")
            st.write("‚Ä¢ Atendimento personalizado e consultorias")
            st.write("‚Ä¢ Tecnologia de ponta em exames")
            st.write("‚Ä¢ Parcerias com fornecedores premium")
        
        with col2:
            st.markdown("**Vantagens √önicas:**")
            st.write("‚Ä¢ Localiza√ß√£o estrat√©gica privilegiada")
            st.write("‚Ä¢ Equipe especializada e experiente")
            st.write("‚Ä¢ Processo otimizado de atendimento")
            st.write("‚Ä¢ Relacionamento pr√≥ximo com clientes")
        
        st.markdown("### Valida√ß√£o da Solu√ß√£o")
        experiencia = st.session_state.business_data.get('experiencia_setor', 'N√£o informada')
        st.write(f"**Experi√™ncia do Empreendedor:** {experiencia}")
        st.write("**Status do Neg√≥cio:** Pronto para opera√ß√£o")
        st.write("**Valida√ß√£o:** An√°lise completa de mercado e viabilidade realizada")
    
    with tab3:
        st.subheader("3. MERCADO E OPORTUNIDADE")
        
        st.markdown("### Tamanho do Mercado")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("**TAM - Total Addressable Market**")
            st.metric("Mercado √ìptico Brasil", "R$ 4,2 bi")
            st.caption("Mercado total de produtos √≥pticos no Brasil")
        
        with col2:
            st.markdown("**SAM - Serviceable Available Market**")
            tam_regional = 4200000000 * 0.02  # 2% do mercado nacional estimado para regi√£o
            st.metric(f"Mercado Regional {estado}", format_currency(tam_regional))
            st.caption("Mercado acess√≠vel na regi√£o de atua√ß√£o")
        
        with col3:
            st.markdown("**SOM - Serviceable Obtainable Market**")
            som_estimado = tam_regional * 0.01  # 1% do mercado regional
            st.metric("Mercado Obt√≠vel", format_currency(som_estimado))
            st.caption("Fatia de mercado realista nos primeiros anos")
        
        st.markdown("### An√°lise de Crescimento")
        st.write("**Tend√™ncias do Setor:**")
        st.write("‚Ä¢ Crescimento m√©dio anual: 8% (ABRA√ÉO - Associa√ß√£o Brasileira do Com√©rcio √ìptico)")
        st.write("‚Ä¢ Envelhecimento populacional: +60 anos crescendo 4% ao ano")
        st.write("‚Ä¢ Digitaliza√ß√£o: aumento de 40% em problemas de vis√£o relacionados a telas")
        st.write("‚Ä¢ Renda per capita: melhoria do poder aquisitivo da classe m√©dia")
        
        st.markdown("### Localiza√ß√£o Estrat√©gica")
        st.write(f"**Cidade:** {cidade}, {estado}")
        densidade_pop = st.session_state.business_data.get('densidade_populacional', 'N√£o informada')
        st.write(f"**Densidade Populacional:** {densidade_pop}")
        st.write("**Vantagens da Localiza√ß√£o:**")
        st.write("‚Ä¢ Alto fluxo de pedestres e ve√≠culos")
        st.write("‚Ä¢ Proximidade a centros m√©dicos e cl√≠nicas")
        st.write("‚Ä¢ Facilidade de acesso e estacionamento")
        st.write("‚Ä¢ Visibilidade comercial privilegiada")
    
    with tab4:
        st.subheader("4. AN√ÅLISE DA CONCORR√äNCIA")
        
        st.markdown("### Concorrentes Identificados")
        concorrentes = st.session_state.business_data.get('principais_concorrentes', 'N√£o identificados')
        st.write(f"**Principais Concorrentes:** {concorrentes}")
        
        st.markdown("### Matriz de Posicionamento")
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Concorrentes Diretos:**")
            st.write("‚Ä¢ √ìticas tradicionais da regi√£o")
            st.write("‚Ä¢ Redes nacionais (√ìticas Carol, Diniz)")
            st.write("‚Ä¢ Franchises locais")
            
            st.markdown("**Pontos Fortes dos Concorrentes:**")
            st.write("‚Ä¢ Marca estabelecida (redes)")
            st.write("‚Ä¢ Volume de compras (pre√ßo)")
            st.write("‚Ä¢ Marketing padronizado")
        
        with col2:
            st.markdown("**Concorrentes Indiretos:**")
            st.write("‚Ä¢ E-commerce de produtos √≥pticos")
            st.write("‚Ä¢ √ìticas em shopping centers")
            st.write("‚Ä¢ Cl√≠nicas oftalmol√≥gicas")
            
            st.markdown("**Nossos Diferenciais:**")
            st.write("‚Ä¢ Atendimento personalizado e consultivo")
            st.write("‚Ä¢ Agilidade na entrega")
            st.write("‚Ä¢ Relacionamento pr√≥ximo com clientes")
            st.write("‚Ä¢ Flexibilidade para customiza√ß√£o")
        
        st.markdown("### Estrat√©gia Competitiva")
        estrategia_marketing = st.session_state.business_data.get('estrategia_marketing', 'N√£o definida')
        st.write(f"**Estrat√©gia de Marketing:** {estrategia_marketing}")
        st.write("**Vantagem Competitiva Sustent√°vel:**")
        st.write("‚Ä¢ Especializa√ß√£o em atendimento consultivo")
        st.write("‚Ä¢ Parcerias exclusivas com fornecedores premium")
        st.write("‚Ä¢ Sistema de fideliza√ß√£o de clientes")
        st.write("‚Ä¢ Localiza√ß√£o estrat√©gica privilegiada")
    
    with tab5:
        st.subheader("5. AN√ÅLISE FINANCEIRA DETALHADA")
        
        # Calcular m√©tricas financeiras
        investimento_total = (
            st.session_state.business_data.get('reforma_loja', 0) +
            st.session_state.business_data.get('equipamentos_moveis', 0) +
            st.session_state.business_data.get('estoque_inicial', 0) +
            st.session_state.business_data.get('capital_giro', 0)
        )
        
        faturamento_anual = vendas_mes_1 * 12 if vendas_mes_1 else 0
        
        st.markdown("### Investimento Inicial")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            reforma = st.session_state.business_data.get('reforma_loja', 0)
            st.metric("Reforma", format_currency(reforma))
        
        with col2:
            equipamentos = st.session_state.business_data.get('equipamentos_moveis', 0)
            st.metric("Equipamentos", format_currency(equipamentos))
        
        with col3:
            estoque = st.session_state.business_data.get('estoque_inicial', 0)
            st.metric("Estoque Inicial", format_currency(estoque))
        
        with col4:
            capital_giro = st.session_state.business_data.get('capital_giro', 0)
            st.metric("Capital de Giro", format_currency(capital_giro))
        
        st.metric("**INVESTIMENTO TOTAL**", format_currency(investimento_total))
        
        st.markdown("### Proje√ß√µes Financeiras")
        
        if vendas_mes_1 > 0:
            # Gerar DRE usando o gerador existente
            try:
                from dre_generator import DREGenerator
                dre_gen = DREGenerator()
                dre_data = dre_gen.generate_dre(st.session_state.business_data, {})
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**DRE Projetado (Mensal):**")
                    st.write(f"‚Ä¢ Receita Bruta: {format_currency(dre_data['receita_bruta'])}")
                    st.write(f"‚Ä¢ (-) Impostos: {format_currency(dre_data['impostos'])}")
                    st.write(f"‚Ä¢ (-) CMV: {format_currency(dre_data['cmv'])}")
                    st.write(f"‚Ä¢ Lucro Bruto: {format_currency(dre_data['lucro_bruto'])}")
                    st.write(f"‚Ä¢ (-) Despesas Operacionais: {format_currency(dre_data['despesas_operacionais'])}")
                    st.markdown(f"**‚Ä¢ Lucro L√≠quido: {format_currency(dre_data['lucro_liquido'])}**")
                
                with col2:
                    st.markdown("**Indicadores de Performance:**")
                    margem_bruta = (dre_data['lucro_bruto'] / dre_data['receita_bruta']) * 100 if dre_data['receita_bruta'] > 0 else 0
                    margem_liquida = (dre_data['lucro_liquido'] / dre_data['receita_bruta']) * 100 if dre_data['receita_bruta'] > 0 else 0
                    
                    st.metric("Margem Bruta", f"{margem_bruta:.1f}%")
                    st.metric("Margem L√≠quida", f"{margem_liquida:.1f}%")
                    
                    if investimento_total > 0 and dre_data['lucro_liquido'] > 0:
                        roi_anual = (dre_data['lucro_liquido'] * 12 / investimento_total) * 100
                        payback_anos = investimento_total / (dre_data['lucro_liquido'] * 12)
                        st.metric("ROI Anual", f"{roi_anual:.1f}%")
                        st.metric("Payback", f"{payback_anos:.1f} anos")
                
                st.markdown("### An√°lise de Viabilidade")
                st.write("**Pontos Fortes Financeiros:**")
                st.write(f"‚Ä¢ Margem l√≠quida atrativa: {margem_liquida:.1f}%")
                st.write(f"‚Ä¢ Payback aceit√°vel: {payback_anos:.1f} anos")
                st.write("‚Ä¢ Baixo investimento inicial comparado ao potencial de retorno")
                st.write("‚Ä¢ Fluxo de caixa positivo desde o primeiro ano")
                
            except Exception as e:
                st.warning("Complete as Proje√ß√µes Financeiras (Etapa 10) para an√°lise detalhada")
        else:
            st.warning("Complete as Proje√ß√µes Financeiras (Etapa 10) para an√°lise detalhada")
        
        st.markdown("### Cen√°rios e Riscos")
        st.markdown("**Cen√°rio Conservador:** Redu√ß√£o de 20% no faturamento")
        st.markdown("**Cen√°rio Realista:** Proje√ß√µes apresentadas")
        st.markdown("**Cen√°rio Otimista:** Crescimento de 30% sobre as proje√ß√µes")
        
        st.markdown("**Principais Riscos:**")
        st.write("‚Ä¢ Concorr√™ncia de grandes redes")
        st.write("‚Ä¢ Varia√ß√µes na economia local")
        st.write("‚Ä¢ Mudan√ßas na legisla√ß√£o do setor")
        st.write("‚Ä¢ Depend√™ncia de fornecedores")
        
        st.markdown("**Mitiga√ß√£o de Riscos:**")
        st.write("‚Ä¢ Diversifica√ß√£o de fornecedores")
        st.write("‚Ä¢ Reserva de capital de giro")
        st.write("‚Ä¢ Foco em fideliza√ß√£o de clientes")
        st.write("‚Ä¢ Monitoramento constante do mercado")
    
    with tab6:
        st.subheader("6. EQUIPE E GEST√ÉO")
        
        st.markdown("### Perfil do Empreendedor")
        experiencia = st.session_state.business_data.get('experiencia_setor', 'N√£o informada')
        st.write(f"**Experi√™ncia no Setor:** {experiencia}")
        
        motivacao = st.session_state.business_data.get('motivacao', 'N√£o informada')
        st.write(f"**Motiva√ß√£o:** {motivacao}")
        
        st.markdown("### Estrutura Organizacional")
        num_funcionarios = st.session_state.business_data.get('num_funcionarios', 1)
        st.write(f"**N√∫mero de Funcion√°rios:** {num_funcionarios}")
        
        # Mostrar estrutura de funcion√°rios se dispon√≠vel
        if hasattr(st.session_state, 'funcionarios') and st.session_state.funcionarios:
            st.markdown("**Equipe Planejada:**")
            for func in st.session_state.funcionarios:
                salario = func.get('salario_base', 0)
                cargo = func.get('cargo', 'N√£o definido')
                st.write(f"‚Ä¢ {cargo}: R$ {salario:,.2f}")
        
        st.markdown("### Compet√™ncias da Equipe")
        st.write("**Compet√™ncias T√©cnicas:**")
        st.write("‚Ä¢ Conhecimento em produtos √≥pticos")
        st.write("‚Ä¢ Atendimento ao cliente especializado")
        st.write("‚Ä¢ Gest√£o comercial e financeira")
        st.write("‚Ä¢ Marketing digital e relacionamento")
        
        st.markdown("### Necessidades de Contrata√ß√£o")
        st.write("**Perfis Necess√°rios:**")
        st.write("‚Ä¢ Vendedor especializado em produtos √≥pticos")
        st.write("‚Ä¢ Atendente com experi√™ncia em relacionamento")
        st.write("‚Ä¢ Suporte administrativo")
        
        st.markdown("### Plano de Crescimento da Equipe")
        st.write("**Ano 1:** Equipe inicial para opera√ß√£o")
        st.write("**Ano 2:** Expans√£o com vendedor adicional")
        st.write("**Ano 3:** Supervis√£o e gest√£o especializada")
    
    with tab7:
        st.subheader(t["download_complete"].replace("üìÑ ", ""))
        
        # Mostrar duas op√ß√µes de relat√≥rio
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üìÑ Relat√≥rio Padr√£o Multil√≠ngue")
            if idioma == "English":
                st.info("Complete investor report with multilingual support and professional formatting")
            elif idioma == "Espa√±ol":
                st.info("Informe completo para inversores con soporte multiling√ºe y formato profesional")
            else:
                st.info("Relat√≥rio completo para investidores com suporte multil√≠ngue e formata√ß√£o profissional")
        
        with col2:
            st.markdown("#### üìä Relat√≥rio Estruturado Profissional")
            if idioma == "English":
                st.info("Industry-standard structured report with KPIs, financial analysis, and risk assessment")
            elif idioma == "Espa√±ol":
                st.info("Informe estructurado est√°ndar de la industria con KPIs, an√°lisis financiero y evaluaci√≥n de riesgos")
            else:
                st.info("Relat√≥rio estruturado padr√£o da ind√∫stria com KPIs, an√°lise financeira e avalia√ß√£o de riscos")
        
        # Bot√µes lado a lado
        col_btn1, col_btn2 = st.columns(2)
        
        with col_btn1:
            if st.button(t["download_complete"], type="primary", key="standard_report"):
                try:
                    from multilingual_pdf_generator import MultilingualInvestorPDFGenerator
                    
                    # Gerar PDF profissional multil√≠ngue
                    pdf_generator = MultilingualInvestorPDFGenerator()
                    pdf_buffer = pdf_generator.generate_investor_report_pdf(st.session_state.business_data, idioma)
                    
                    # Nome do arquivo baseado no idioma
                    if idioma == "English":
                        filename = f"complete_investor_report_{nome_negocio.replace(' ', '_')}.pdf"
                        label = "üì• Download Complete Investor Report (PDF)"
                    elif idioma == "Espa√±ol":
                        filename = f"informe_completo_inversores_{nome_negocio.replace(' ', '_')}.pdf"
                        label = "üì• Descargar Informe Completo para Inversores (PDF)"
                    else:
                        filename = f"relatorio_completo_investidores_{nome_negocio.replace(' ', '_')}.pdf"
                        label = "üì• Download Relat√≥rio Completo para Investidores (PDF)"
                    
                    # Download do PDF multil√≠ngue
                    st.download_button(
                        label=label,
                        data=pdf_buffer.getvalue(),
                        file_name=filename,
                        mime="application/pdf"
                    )
                    
                    st.success(t["download_success"])
                
                except Exception as e:
                    if idioma == "English":
                        st.error(f"Error generating report: {str(e)}")
                    elif idioma == "Espa√±ol":
                        st.error(f"Error al generar informe: {str(e)}")
                    else:
                        st.error(f"Erro ao gerar relat√≥rio: {str(e)}")
        
        with col_btn2:
            # Bot√£o para relat√≥rio estruturado profissional
            if idioma == "English":
                structured_label = "üìä Generate Professional Report"
                structured_filename = f"structured_investor_report_{nome_negocio.replace(' ', '_')}.pdf"
            elif idioma == "Espa√±ol":
                structured_label = "üìä Generar Informe Estructurado"
                structured_filename = f"informe_estructurado_inversor_{nome_negocio.replace(' ', '_')}.pdf"
            else:
                structured_label = "üìä Gerar Relat√≥rio Estruturado"
                structured_filename = f"relatorio_estruturado_investidor_{nome_negocio.replace(' ', '_')}.pdf"
            
            if st.button(structured_label, type="secondary", key="structured_report"):
                try:
                    # Gerar relat√≥rio estruturado
                    structured_generator = StructuredInvestorReport()
                    structured_buffer = structured_generator.generate_structured_report(st.session_state.business_data, idioma)
                    
                    st.download_button(
                        label=f"üì• Download {structured_label.replace('üìä Gerar ', '').replace('üìä Generate ', '').replace('üìä Generar ', '')}",
                        data=structured_buffer.getvalue(),
                        file_name=structured_filename,
                        mime="application/pdf",
                        key="download_structured_report"
                    )
                    
                    if idioma == "English":
                        st.success("Professional structured report generated successfully!")
                    elif idioma == "Espa√±ol":
                        st.success("¬°Informe estructurado profesional generado exitosamente!")
                    else:
                        st.success("Relat√≥rio estruturado profissional gerado com sucesso!")
                
                except Exception as e:
                    if idioma == "English":
                        st.error(f"Error generating structured report: {str(e)}")
                    elif idioma == "Espa√±ol":
                        st.error(f"Error al generar informe estructurado: {str(e)}")
                    else:
                        st.error(f"Erro ao gerar relat√≥rio estruturado: {str(e)}")
        
        # Vers√£o texto para compatibilidade (opcional)
        if st.checkbox("Incluir vers√£o texto", key="include_text_version"):
            # Gerar vers√£o texto para compatibilidade
            if idioma == "English":
                    relatorio_expandido = f"""
COMPLETE INVESTOR REPORT
{nome_negocio}
Date: {datetime.now().strftime('%m/%d/%Y')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. PURPOSE AND PROBLEM

Identified Problem:
{st.session_state.business_data.get('problema_mercado', 'Difficulty accessing quality optical products with personalized service')}

Market Validation:
‚Ä¢ Optical market growth: 8% annually
‚Ä¢ Population aging increasing demand
‚Ä¢ Intensive use of digital screens
‚Ä¢ Target audience: {st.session_state.business_data.get('publico_alvo', 'Not defined')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

2. SOLUTION AND VALUE PROPOSITION

Value Proposition:
{st.session_state.business_data.get('proposta_valor', 'Not defined')}

Products and Services:
{st.session_state.business_data.get('produtos_servicos', 'Complete optical products with specialized service')}

Competitive Advantage:
‚Ä¢ Personalized and consultative service
‚Ä¢ Privileged strategic location
‚Ä¢ Close customer relationships
‚Ä¢ Delivery speed

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

3. MARKET AND OPPORTUNITY

Location: {cidade}, {estado}

Market Size:
‚Ä¢ TAM (Brazil): R$ 4.2 billion
‚Ä¢ SAM (Regional): R$ {(4200000000 * 0.02):,.0f}
‚Ä¢ SOM (Obtainable): R$ {(4200000000 * 0.02 * 0.01):,.0f}

Sector Trends:
‚Ä¢ Average annual growth: 8%
‚Ä¢ Population aging: +60 years growing 4% annually
‚Ä¢ Digitalization: 40% increase in vision problems

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

4. FINANCIAL ANALYSIS

Initial Investment:
‚Ä¢ Renovation: R$ {st.session_state.business_data.get('reforma_loja', 0):,.2f}
‚Ä¢ Equipment: R$ {st.session_state.business_data.get('equipamentos_moveis', 0):,.2f}
‚Ä¢ Initial Stock: R$ {st.session_state.business_data.get('estoque_inicial', 0):,.2f}
‚Ä¢ Working Capital: R$ {st.session_state.business_data.get('capital_giro', 0):,.2f}
TOTAL: R$ {investimento_total:,.2f}

Annual Projections:
‚Ä¢ Revenue: R$ {faturamento_anual:,.2f}
‚Ä¢ Average Ticket: R$ {st.session_state.business_data.get('ticket_medio', 0):,.2f}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

5. TEAM AND MANAGEMENT

Entrepreneur Experience:
{st.session_state.business_data.get('experiencia_setor', 'Not informed')}

Organizational Structure:
‚Ä¢ Employees: {num_funcionarios}
‚Ä¢ Payroll: R$ {st.session_state.business_data.get('salarios_total', 0):,.2f}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

6. CONCLUSION AND RECOMMENDATION

Investment Strengths:
‚Ä¢ Constantly growing market
‚Ä¢ Low initial investment
‚Ä¢ Strategic location
‚Ä¢ Entrepreneur experience
‚Ä¢ Proven business model

Identified Risks:
‚Ä¢ Competition from large chains
‚Ä¢ Local economy dependence
‚Ä¢ Market seasonality

Recommendation:
RECOMMENDED investment based on complete market analysis,
financial viability and entrepreneur profile.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    """
            elif idioma == "Espa√±ol":
                    relatorio_expandido = f"""
INFORME COMPLETO PARA INVERSORES
{nome_negocio}
Fecha: {datetime.now().strftime('%d/%m/%Y')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. PROP√ìSITO Y PROBLEMA

Problema Identificado:
{st.session_state.business_data.get('problema_mercado', 'Dificultad para acceder a productos √≥pticos de calidad con atenci√≥n personalizada')}

Validaci√≥n del Mercado:
‚Ä¢ Crecimiento del mercado √≥ptico: 8% anual
‚Ä¢ Envejecimiento poblacional aumentando demanda
‚Ä¢ Uso intensivo de pantallas digitales
‚Ä¢ P√∫blico objetivo: {st.session_state.business_data.get('publico_alvo', 'No definido')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

2. SOLUCI√ìN Y PROPUESTA DE VALOR

Propuesta de Valor:
{st.session_state.business_data.get('proposta_valor', 'No definida')}

Productos y Servicios:
{st.session_state.business_data.get('produtos_servicos', 'Productos √≥pticos completos con atenci√≥n especializada')}

Ventaja Competitiva:
‚Ä¢ Atenci√≥n personalizada y consultiva
‚Ä¢ Ubicaci√≥n estrat√©gica privilegiada
‚Ä¢ Relaci√≥n cercana con clientes
‚Ä¢ Rapidez en la entrega

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

3. MERCADO Y OPORTUNIDAD

Ubicaci√≥n: {cidade}, {estado}

Tama√±o del Mercado:
‚Ä¢ TAM (Brasil): R$ 4,2 mil millones
‚Ä¢ SAM (Regional): R$ {(4200000000 * 0.02):,.0f}
‚Ä¢ SOM (Obtenible): R$ {(4200000000 * 0.02 * 0.01):,.0f}

Tendencias del Sector:
‚Ä¢ Crecimiento promedio anual: 8%
‚Ä¢ Envejecimiento poblacional: +60 a√±os creciendo 4% anual
‚Ä¢ Digitalizaci√≥n: aumento del 40% en problemas de visi√≥n

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

4. AN√ÅLISIS FINANCIERO

Inversi√≥n Inicial:
‚Ä¢ Renovaci√≥n: R$ {st.session_state.business_data.get('reforma_loja', 0):,.2f}
‚Ä¢ Equipos: R$ {st.session_state.business_data.get('equipamentos_moveis', 0):,.2f}
‚Ä¢ Stock Inicial: R$ {st.session_state.business_data.get('estoque_inicial', 0):,.2f}
‚Ä¢ Capital de Trabajo: R$ {st.session_state.business_data.get('capital_giro', 0):,.2f}
TOTAL: R$ {investimento_total:,.2f}

Proyecciones Anuales:
‚Ä¢ Facturaci√≥n: R$ {faturamento_anual:,.2f}
‚Ä¢ Ticket Promedio: R$ {st.session_state.business_data.get('ticket_medio', 0):,.2f}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

5. EQUIPO Y GESTI√ìN

Experiencia del Emprendedor:
{st.session_state.business_data.get('experiencia_setor', 'No informada')}

Estructura Organizacional:
‚Ä¢ Empleados: {num_funcionarios}
‚Ä¢ N√≥mina: R$ {st.session_state.business_data.get('salarios_total', 0):,.2f}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

6. CONCLUSI√ìN Y RECOMENDACI√ìN

Fortalezas de la Inversi√≥n:
‚Ä¢ Mercado en crecimiento constante
‚Ä¢ Baja inversi√≥n inicial
‚Ä¢ Ubicaci√≥n estrat√©gica
‚Ä¢ Experiencia del emprendedor
‚Ä¢ Modelo de negocio comprobado

Riesgos Identificados:
‚Ä¢ Competencia de grandes cadenas
‚Ä¢ Dependencia de la econom√≠a local
‚Ä¢ Estacionalidad del mercado

Recomendaci√≥n:
Inversi√≥n RECOMENDADA basada en an√°lisis completo del mercado,
viabilidad financiera y perfil del emprendedor.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    """
            else:  # Portugu√™s
                    relatorio_expandido = f"""
RELAT√ìRIO COMPLETO PARA INVESTIDORES
{nome_negocio}
Data: {datetime.now().strftime('%d/%m/%Y')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

1. PROP√ìSITO E PROBLEMA

Problema Identificado:
{st.session_state.business_data.get('problema_mercado', 'Dificuldade de acesso a produtos √≥pticos de qualidade com atendimento personalizado')}

Valida√ß√£o do Mercado:
‚Ä¢ Crescimento do mercado √≥ptico: 8% ao ano
‚Ä¢ Envelhecimento populacional aumentando demanda
‚Ä¢ Uso intensivo de telas digitais
‚Ä¢ P√∫blico-alvo: {st.session_state.business_data.get('publico_alvo', 'N√£o definido')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

2. SOLU√á√ÉO E PROPOSTA DE VALOR

Proposta de Valor:
{st.session_state.business_data.get('proposta_valor', 'N√£o definida')}

Produtos e Servi√ßos:
{st.session_state.business_data.get('produtos_servicos', 'Produtos √≥pticos completos com atendimento especializado')}

Diferencial Competitivo:
‚Ä¢ Atendimento personalizado e consultivo
‚Ä¢ Localiza√ß√£o estrat√©gica privilegiada
‚Ä¢ Relacionamento pr√≥ximo com clientes
‚Ä¢ Agilidade na entrega

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

3. MERCADO E OPORTUNIDADE

Localiza√ß√£o: {cidade}, {estado}

Tamanho de Mercado:
‚Ä¢ TAM (Brasil): R$ 4,2 bilh√µes
‚Ä¢ SAM (Regional): R$ {(4200000000 * 0.02):,.0f}
‚Ä¢ SOM (Obt√≠vel): R$ {(4200000000 * 0.02 * 0.01):,.0f}

Tend√™ncias do Setor:
‚Ä¢ Crescimento m√©dio anual: 8%
‚Ä¢ Envelhecimento populacional: +60 anos crescendo 4% ao ano
‚Ä¢ Digitaliza√ß√£o: aumento de 40% em problemas de vis√£o

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

4. AN√ÅLISE FINANCEIRA

Investimento Inicial:
‚Ä¢ Reforma: R$ {st.session_state.business_data.get('reforma_loja', 0):,.2f}
‚Ä¢ Equipamentos: R$ {st.session_state.business_data.get('equipamentos_moveis', 0):,.2f}
‚Ä¢ Estoque: R$ {st.session_state.business_data.get('estoque_inicial', 0):,.2f}
‚Ä¢ Capital de Giro: R$ {st.session_state.business_data.get('capital_giro', 0):,.2f}
TOTAL: R$ {investimento_total:,.2f}

Proje√ß√µes Anuais:
‚Ä¢ Faturamento: R$ {faturamento_anual:,.2f}
‚Ä¢ Ticket M√©dio: R$ {st.session_state.business_data.get('ticket_medio', 0):,.2f}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

5. EQUIPE E GEST√ÉO

Experi√™ncia do Empreendedor:
{st.session_state.business_data.get('experiencia_setor', 'N√£o informada')}

Estrutura Organizacional:
‚Ä¢ Funcion√°rios: {num_funcionarios}
‚Ä¢ Folha de Pagamento: R$ {st.session_state.business_data.get('salarios_total', 0):,.2f}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

6. CONCLUS√ÉO E RECOMENDA√á√ÉO

Pontos Fortes do Investimento:
‚Ä¢ Mercado em crescimento constante
‚Ä¢ Baixo investimento inicial
‚Ä¢ Localiza√ß√£o estrat√©gica
‚Ä¢ Experi√™ncia do empreendedor
‚Ä¢ Modelo de neg√≥cio comprovado

Riscos Identificados:
‚Ä¢ Concorr√™ncia de grandes redes
‚Ä¢ Depend√™ncia da economia local
‚Ä¢ Sazonalidade do mercado

Recomenda√ß√£o:
Investimento RECOMENDADO com base na an√°lise completa do mercado,
viabilidade financeira e perfil do empreendedor.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
                    """
                
            # Bot√£o adicional para vers√£o texto (compatibilidade)
            st.markdown("---")
            
            if idioma == "English":
                filename_txt = f"complete_investor_report_{nome_negocio.replace(' ', '_')}.txt"
                label_txt = "üìÑ Download Text Version"
            elif idioma == "Espa√±ol":
                filename_txt = f"informe_completo_inversores_{nome_negocio.replace(' ', '_')}.txt"
                label_txt = "üìÑ Descargar Versi√≥n Texto"
            else:
                filename_txt = f"relatorio_completo_investidores_{nome_negocio.replace(' ', '_')}.txt"
                label_txt = "üìÑ Download Vers√£o Texto"
            
            st.download_button(
                label=label_txt,
                data=relatorio_expandido,
                file_name=filename_txt,
                mime="text/plain"
            )
            
            # Mostrar pr√©via do conte√∫do
            with st.expander(t["download_preview"]):
                if idioma == "English":
                    st.info("PDF contains professional formatting with charts, tables, and executive layout")
                elif idioma == "Espa√±ol":
                    st.info("El PDF contiene formato profesional con gr√°ficos, tablas y dise√±o ejecutivo")
                else:
                    st.info("O PDF cont√©m formata√ß√£o profissional com gr√°ficos, tabelas e layout executivo")
                
                st.text(relatorio_expandido[:2000] + "..." if len(relatorio_expandido) > 2000 else relatorio_expandido)
        
        st.markdown("---")
        if idioma == "English":
            st.markdown("**Important:** This report answers the complete investor checklist:")
            st.write("‚úì Purpose and problem clearly defined")
            st.write("‚úì Detailed solution and value proposition")
            st.write("‚úì Complete market and opportunity analysis")
            st.write("‚úì Competition study and positioning")
            st.write("‚úì Realistic financial projections")
            st.write("‚úì Team profile and competencies")
            st.write("‚úì Risk analysis and mitigation")
            st.write("‚úì Substantiated recommendation")
        elif idioma == "Espa√±ol":
            st.markdown("**Importante:** Este informe responde al checklist completo para inversores:")
            st.write("‚úì Prop√≥sito y problema claramente definidos")
            st.write("‚úì Soluci√≥n y propuesta de valor detalladas")
            st.write("‚úì An√°lisis completo de mercado y oportunidad")
            st.write("‚úì Estudio de competencia y posicionamiento")
            st.write("‚úì Proyecciones financieras realistas")
            st.write("‚úì Perfil del equipo y competencias")
            st.write("‚úì An√°lisis de riesgos y mitigaci√≥n")
            st.write("‚úì Recomendaci√≥n fundamentada")
        else:
            st.markdown("**Importante:** Este relat√≥rio responde ao checklist completo para investidores:")
            st.write("‚úì Prop√≥sito e problema claramente definidos")
            st.write("‚úì Solu√ß√£o e proposta de valor detalhadas")
            st.write("‚úì An√°lise completa de mercado e oportunidade")
            st.write("‚úì Estudo da concorr√™ncia e posicionamento")
            st.write("‚úì Proje√ß√µes financeiras realistas")
            st.write("‚úì Perfil da equipe e compet√™ncias")
            st.write("‚úì An√°lise de riscos e mitiga√ß√£o")
            st.write("‚úì Recomenda√ß√£o fundamentada")

def show_premissas():
    """Central de Controle das Premissas - Atualiza todo o sistema"""
    
    st.title("‚öôÔ∏è Premissas do Neg√≥cio")
    st.markdown("**Central de controle para atualizar todas as vari√°veis do plano automaticamente**")
    
    # Card de status atual
    col1, col2, col3 = st.columns(3)
    
    with col1:
        vendas_atual = st.session_state.business_data.get('vendas_mes_1', 0)
        st.metric("Vendas Mensais", format_currency(vendas_atual))
    
    with col2:
        ticket_atual = st.session_state.business_data.get('ticket_medio', 0)
        st.metric("Ticket M√©dio", format_currency(ticket_atual))
    
    with col3:
        oculos_atual = int(vendas_atual / ticket_atual) if ticket_atual > 0 else 0
        st.metric("√ìculos/M√™s", f"{oculos_atual} unidades")
    
    st.markdown("---")
    
    # Se√ß√£o 1: Premissas de Vendas
    st.markdown("### üìä 1. Premissas de Vendas")
    
    col_prem1, col_prem2 = st.columns(2)
    
    with col_prem1:
        # Meta de √≥culos vendidos
        nova_meta_oculos = st.number_input(
            "Meta de √≥culos vendidos por m√™s:",
            min_value=1,
            max_value=500,
            value=oculos_atual if oculos_atual > 0 else 30,
            step=1,
            help="Quantos √≥culos voc√™ planeja vender por m√™s",
            key="nova_meta_oculos"
        )
        
        # Ticket m√©dio
        novo_ticket_medio = st.number_input(
            "Ticket m√©dio por venda (R$):",
            min_value=100.0,
            max_value=5000.0,
            value=float(ticket_atual) if ticket_atual > 0 else 500.0,
            step=50.0,
            help="Valor m√©dio de cada venda",
            key="novo_ticket_medio"
        )
    
    with col_prem2:
        # Faturamento calculado automaticamente
        novo_faturamento = nova_meta_oculos * novo_ticket_medio
        st.metric("Faturamento Mensal Calculado", format_currency(novo_faturamento))
        
        # Distribui√ß√£o de vendas
        st.markdown("**Distribui√ß√£o de Vendas:**")
        percentual_avista = st.slider(
            "% Vendas √† Vista:",
            min_value=0,
            max_value=100,
            value=st.session_state.business_data.get('percentual_vendas_avista', 50),
            step=5,
            key="novo_percentual_avista"
        )
        
        vendas_avista = int(nova_meta_oculos * (percentual_avista / 100))
        vendas_parcelada = nova_meta_oculos - vendas_avista
        
        st.write(f"‚Ä¢ √Ä vista: {vendas_avista} √≥culos")
        st.write(f"‚Ä¢ Parcelado: {vendas_parcelada} √≥culos")
    
    # Se√ß√£o 2: Custos e Margens
    st.markdown("### üí∞ 2. Estrutura de Custos")
    
    col_custo1, col_custo2 = st.columns(2)
    
    with col_custo1:
        # Custo m√©dio por √≥culos
        custo_medio_oculos = st.number_input(
            "Custo m√©dio por √≥culos (R$):",
            min_value=50.0,
            max_value=1000.0,
            value=st.session_state.business_data.get('custo_medio_oculos', 180.0),
            step=10.0,
            help="Custo dos produtos (lente + arma√ß√£o + acess√≥rios)",
            key="novo_custo_medio_oculos"
        )
        
        # Margem desejada
        margem_desejada = st.number_input(
            "Margem desejada (%):",
            min_value=50,
            max_value=500,
            value=st.session_state.business_data.get('margem_desejada', 180),
            step=10,
            help="Margem de lucro sobre o custo",
            key="nova_margem_desejada"
        )
    
    with col_custo2:
        # Pre√ßo sugerido
        preco_sugerido = custo_medio_oculos * (1 + margem_desejada / 100)
        st.metric("Pre√ßo Sugerido", format_currency(preco_sugerido))
        
        # Margem real vs ticket m√©dio
        if novo_ticket_medio > 0:
            margem_real = ((novo_ticket_medio - custo_medio_oculos) / custo_medio_oculos) * 100
            st.metric("Margem Real do Ticket", f"{margem_real:.1f}%")
    
    # Se√ß√£o 3: Captador
    st.markdown("### üë• 3. Sistema de Capta√ß√£o")
    
    usar_captador = st.checkbox(
        "Usar sistema de capta√ß√£o",
        value=st.session_state.business_data.get('usar_sistema_captacao', False),
        key="usar_captador_premissas"
    )
    
    if usar_captador:
        col_capt1, col_capt2 = st.columns(2)
        
        with col_capt1:
            comissao_avista = st.number_input(
                "Comiss√£o por venda √† vista (R$):",
                min_value=0.0,
                max_value=100.0,
                value=st.session_state.business_data.get('comissao_avista', 30.0),
                step=1.0,
                key="nova_comissao_avista"
            )
            
            comissao_parcelada = st.number_input(
                "Comiss√£o por venda parcelada (R$):",
                min_value=0.0,
                max_value=50.0,
                value=st.session_state.business_data.get('comissao_parcelada', 5.0),
                step=1.0,
                key="nova_comissao_parcelada"
            )
        
        with col_capt2:
            # C√°lculo do custo do captador
            custo_captador_avista = vendas_avista * comissao_avista
            custo_captador_parcelada = vendas_parcelada * comissao_parcelada
            custo_captador_total = custo_captador_avista + custo_captador_parcelada
            
            st.metric("Custo Captador/M√™s", format_currency(custo_captador_total))
            
            # Mem√≥ria de c√°lculo
            with st.expander("üîç Mem√≥ria de C√°lculo Captador"):
                st.code(f"""
C√°lculo do Captador:
‚Ä¢ {vendas_avista} vendas √† vista √ó R$ {comissao_avista:.2f} = R$ {custo_captador_avista:.2f}
‚Ä¢ {vendas_parcelada} vendas parceladas √ó R$ {comissao_parcelada:.2f} = R$ {custo_captador_parcelada:.2f}
TOTAL: R$ {custo_captador_total:.2f}/m√™s
                """)
    
    # Bot√£o para aplicar todas as mudan√ßas
    st.markdown("---")
    
    col_botao1, col_botao2, col_botao3 = st.columns([1, 2, 1])
    
    with col_botao2:
        if st.button("üîÑ APLICAR TODAS AS PREMISSAS", type="primary", use_container_width=True, key="aplicar_premissas"):
            
            # Atualizar todas as vari√°veis do sistema
            st.session_state.business_data.update({
                # Vendas
                'vendas_mes_1': novo_faturamento,
                'ticket_medio': novo_ticket_medio,
                'meta_oculos_mes': nova_meta_oculos,
                'percentual_vendas_avista': percentual_avista,
                
                # Custos
                'custo_medio_oculos': custo_medio_oculos,
                'margem_desejada': margem_desejada,
                
                # Captador
                'usar_sistema_captacao': usar_captador,
                'comissao_avista': comissao_avista if usar_captador else 0,
                'comissao_parcelada': comissao_parcelada if usar_captador else 0,
                'custo_captador_mensal_calculado': custo_captador_total if usar_captador else 0,
                

                
                # Sincronizar com outras etapas
                'ticket_medio_esperado': novo_ticket_medio,  # Etapa 3
                'meta_faturamento_mensal': novo_faturamento,  # Etapa 7
                'faturamento_mensal': novo_faturamento,  # Etapa 10
            })
            
            # Recalcular captador
            if usar_captador:
                custo_captador = calcular_custo_captador_mensal()
                st.session_state.business_data['custo_captador_mensal_calculado'] = custo_captador
            
            st.success("‚úÖ **Todas as premissas foram aplicadas com sucesso!**")
            st.balloons()
            
            # Mostrar resumo das mudan√ßas
            with st.expander("üìã Resumo das Atualiza√ß√µes"):
                st.markdown(f"""
                **Vendas Atualizadas:**
                ‚Ä¢ Meta: {nova_meta_oculos} √≥culos/m√™s
                ‚Ä¢ Ticket: {format_currency(novo_ticket_medio)}
                ‚Ä¢ Faturamento: {format_currency(novo_faturamento)}
                ‚Ä¢ Distribui√ß√£o: {percentual_avista}% √† vista, {100-percentual_avista}% parcelado
                
                **Custos Atualizados:**
                ‚Ä¢ Custo m√©dio: {format_currency(custo_medio_oculos)}
                ‚Ä¢ Margem: {margem_desejada}%
                ‚Ä¢ Pre√ßo sugerido: {format_currency(preco_sugerido)}
                
                **Captador:** {'Ativo' if usar_captador else 'Inativo'}
                {f'‚Ä¢ Custo mensal: {format_currency(custo_captador_total)}' if usar_captador else ''}
                
                **Etapas Sincronizadas:**
                ‚Ä¢ Etapa 3: Ticket m√©dio esperado
                ‚Ä¢ Etapa 7: Meta de faturamento
                ‚Ä¢ Etapa 8: Sistema de capta√ß√£o  
                ‚Ä¢ Etapa 10: Proje√ß√µes financeiras
                """)
    
    # Se√ß√£o de auditoria
    st.markdown("---")
    st.markdown("### üîç Auditoria do Sistema")
    
    with st.expander("Ver dados atuais do sistema"):
        dados_relevantes = {
            'vendas_mes_1': st.session_state.business_data.get('vendas_mes_1', 0),
            'ticket_medio': st.session_state.business_data.get('ticket_medio', 0),
            'custo_captador_mensal_calculado': st.session_state.business_data.get('custo_captador_mensal_calculado', 0),
            'usar_sistema_captacao': st.session_state.business_data.get('usar_sistema_captacao', False),
            'comissao_avista': st.session_state.business_data.get('comissao_avista', 0),
            'comissao_parcelada': st.session_state.business_data.get('comissao_parcelada', 0)
        }
        st.json(dados_relevantes)

if __name__ == "__main__":
    main()